<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript 数据结构--数组</title>
      <link href="/2021/07/25/javascript-array/"/>
      <url>/2021/07/25/javascript-array/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数组是计算机编程世界里最常见的数据结构。任何一种编程语言都包含数组。它是编程语言中的内建模型，通常效率很高，可以满足不同需求的数据存储。</p></blockquote><h2 id="一、JavaScript-中的数组"><a href="#一、JavaScript-中的数组" class="headerlink" title="一、JavaScript 中的数组"></a>一、JavaScript 中的数组</h2><p>数组的标准定义是：一个存储元素的<strong>线性集合</strong>（<code>collection</code>），元素可以通过索引来进行存取操作，所以通常是数字，用来计算元素之间存储位置的偏移量。</p><p>通俗地讲，数组是一种<strong>线性表</strong>数据结构，它使用一组连续的内存空间，来存储一组具有相同类型的数据。但是在 JavaScript 中，数组中可以保存不同类型的值（为遵守最佳实践，一般不建议这么做）。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e4c45f3b1fe41d9aa5c102e320311f5~tplv-k3u1fbpfcp-watermark.image" alt="线性表.001.jpeg"><br>然而 JavaScript 中的数组，严格来说应该称作对象，是一种特殊的对象，索引是它的属性，可以是整数，但是由于 JavaScript 中对象的属性名必须为字符串，所以这些索引在内部由数字类型被转换为字符串类型。</p><h2 id="二、使用数组"><a href="#二、使用数组" class="headerlink" title="二、使用数组"></a>二、使用数组</h2><h3 id="2-1-创建和初始化数组"><a href="#2-1-创建和初始化数组" class="headerlink" title="2.1 创建和初始化数组"></a>2.1 创建和初始化数组</h3><p>你可以通过 <code>[]</code> 操作符来声明一个数组变量：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 长度为 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然了，你也可以在声明数组时直接放入一些元素：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 长度为 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外，你还可以通过构造函数来创建它：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样，你也可以用它来创建一个长度为 10，元素为 0 的数组：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后，我们可以通过 <code>Array.isArray()</code> 来判断一个对象是否是数组:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-添加和删除元素"><a href="#2-2-添加和删除元素" class="headerlink" title="2.2 添加和删除元素"></a>2.2 添加和删除元素</h3><p><strong>添加元素：</strong></p><ol><li><code>push</code> 方法: 把元素添加到数组的末尾；</li><li><code>unshift</code> 方法: 把元素插入到数组的首位；</li></ol><p><strong>删除元素：</strong></p><ol><li><code>pop</code> 方法：删除数组末尾的元素;</li><li><code>shift</code> 方法：删除数组首位的元素；</li><li><code>slice</code> 方法：删除相应位置和数量的元素，还可以通过第三个参数添加或替换元素。</li></ol><p><strong>Tips!!!:</strong></p><ol><li>在 JavaScript 中，数组是一个可以修改的对象。添加元素，它就会动态增长；</li><li>通过 <code>push</code> 和 <code>pop</code> 方法，可以用数组来模拟栈；</li><li>通过 <code>unshift</code> 和 <code>shift</code> 方法，可以用数组来模拟队列。</li></ol><h3 id="2-3-二维和多维数组"><a href="#2-3-二维和多维数组" class="headerlink" title="2.3 二维和多维数组"></a>2.3 二维和多维数组</h3><p>JavaScript 只支持一维数组，但是可以通过数组嵌套数组的方式实现任一多维数组：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-JavaScript-数组的方法"><a href="#2-4-JavaScript-数组的方法" class="headerlink" title="2.4 JavaScript 数组的方法"></a>2.4 JavaScript 数组的方法</h3><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>concat</code></td><td>连接 2 个或更多数组，并返回结果</td></tr><tr><td><code>every</code></td><td>对数组中每一个元素运行指定函数，如果该函数对每一项都返回true，则返回 true</td></tr><tr><td><code>filter</code></td><td>对数组中每一个元素运行指定函数，返回该函数返回 true结果的项组成的数组</td></tr><tr><td><code>forEach</code></td><td>对数组中每一个元素运行指定函数，没有返回值</td></tr><tr><td><code>join</code></td><td>将所有的数组元素拼接成一个字符串</td></tr><tr><td><code>indexOf</code></td><td>返回第一个与给定参数相等的数组元素的索引，没有找到则返回-1</td></tr><tr><td><code>lastIndexOf</code></td><td>返回在数组中搜索到的与给定参数相等的元素的索引里最大的值</td></tr><tr><td><code>map</code></td><td>对数组中的每一项运行指定函数，返回每次函数调用的结果组成的数组</td></tr><tr><td><code>reverse</code></td><td>翻转数组</td></tr><tr><td><code>slice</code></td><td>传入索引值，将数组里对应范围内的元素作为新数组返回</td></tr><tr><td><code>some</code></td><td>对数组中的每一项运行指定函数，任一项返回true，则返回true</td></tr><tr><td><code>sort</code></td><td>对数组中的元素进行排序</td></tr><tr><td><code>toString</code></td><td>将数组作为字符串返回</td></tr><tr><td><code>valueOf</code></td><td>类似 toString</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尤雨溪自述：打造 Vue 3 背后的故事</title>
      <link href="/2020/05/30/making-vue-3/"/>
      <url>/2020/05/30/making-vue-3/</url>
      
        <content type="html"><![CDATA[<p>尤雨溪在今年年初 Vue 3 正式发布之前撰写了这篇长文，详述 Vue 3 的设计过程。前端之巅将全文翻译如下，希望能帮助你更好地了解 Vue 3 背后的故事。</p><p>在过去的一年中，Vue 团队一直都在开发 Vue.js 的下一个主要版本，我们希望能在今年上半年发布它（本文完成时这项工作尚在进行）。Vue 新版本的理念成型于 2018 年末，当时 Vue 2 的代码库已经有两岁半了。比起通用软件的生命周期来这好像也没那么久，但在这段时期，前端世界已经今昔非比了。</p><p>在我们更新（和重写）Vue 的主要版本时，主要考虑两点因素：首先是新的 JavaScript 语言特性在主流浏览器中的受支持水平；其次是当前代码库中随时间推移而逐渐暴露出来的一些设计和架构问题。</p><h2 id="一、为什么重写"><a href="#一、为什么重写" class="headerlink" title="一、为什么重写"></a>一、为什么重写</h2><h3 id="利用新的语言特性"><a href="#利用新的语言特性" class="headerlink" title="利用新的语言特性"></a>利用新的语言特性</h3><p>随着 ES2015 标准的落地，JavaScript（以前被称为 ECMAScript，缩写为 ES）获得了诸多重大改进，同时主流浏览器也终于开始对这些新特性提供良好的支持了。其中的一些特性使我们能够大幅提升 Vue 的能力。</p><p>这里面最值得一提的就是 Proxy ，它为框架提供了拦截针对对象的操作的能力。Vue 的一项核心特性就是监听用户定义状态的变化，并响应式更新 DOM。Vue 2 是通过替换状态对象属性的 getter 和 setter 来实现这种响应能力的。转向 Proxy 后，我们就能解决 Vue 当下存在的诸多局限（比如无法检测新增属性等），还能提供更好的性能。</p><p>但 Proxy 是一个原生的语言特性，无法在老式浏览器中提供完整的 polyfill。为此我们需要改动新版框架的浏览器支持范围——这是一项破坏性变更，只有新的主要版本才能实现。</p><h2 id="二、解决架构问题"><a href="#二、解决架构问题" class="headerlink" title="二、解决架构问题"></a>二、解决架构问题</h2><blockquote><p>在现有代码库上修复这些问题需要大量高风险的重构工作，几乎等同于重写了。</p></blockquote><p>在维护 Vue 2 的过程中，我们积累的很多问题受限于现有的架构是很难解决的。例如，模板编译器的写法使我们很难实现良好的源映射支持。另外，虽然 Vue 2 技术上支持构建以非 DOM 平台为目标的高级渲染器，但为了实现这一支持，我们需要 fork 代码库，还得复制一大堆代码。在现有代码库上修复这些问题需要大量高风险的重构工作，几乎已经等同于重写了。</p><p>同时，我们在很多内部模块与看起来无处可去的零散代码之间生成了很多隐藏的耦合关系，结果积累了不少技术债。现在我们很难单独理解代码库中某一部分的含义，而且我们也注意到贡献者们很少有信心做出突破性的更改。通过重写，我们得以基于这些问题重新思考代码的组织方式。</p><h2 id="三、早期的原型阶段"><a href="#三、早期的原型阶段" class="headerlink" title="三、早期的原型阶段"></a>三、早期的原型阶段</h2><p>我们是从 2018 年末开始创建 Vue 3 的原型的，主要目标是验证针对上述问题的解决方案。在这一阶段，我们主要是为后续的开发工作打下牢固的基础。</p><h3 id="转向-TypeScript"><a href="#转向-TypeScript" class="headerlink" title="转向 TypeScript"></a>转向 TypeScript</h3><p>Vue 2 最初是用纯粹的 ES 编写的。原型阶段开始后不久，我们意识到对于这么大规模的项目来说，类型系统会非常有用。类型检查可以大幅降低在重构中引入意外 bug 的几率，也能提升贡献者在做出突破性更改时的信心。我们采用了 Facebook 的 Flow 类型检查器，因为它可以渐进添加到一个现有的纯 ES 项目中。Flow 起了一定作用，但我们的收益不及预期；特别是它的重大更改太多了，升级起来相当痛苦。它对集成开发环境的支持也不如 TypeScript 与 VS Code 的深度集成水平。</p><p>我们还注意到越来越多的用户在结合使用 Vue 和 TypeScript。为了支持他们的使用场景，我们需要在源码之外单独编写和维护一套 TypeScript 声明，其使用了另一套类型系统。转向 TypeScript 后，我们就能自动生成声明文件，降低维护成本。</p><h3 id="解耦内部包"><a href="#解耦内部包" class="headerlink" title="解耦内部包"></a>解耦内部包</h3><p>我们还采用了一个单体仓库方案，其中框架是由众多内部包组成的，每个包都有自己独立的 API、类型定义和测试用例。我们想让各个模块间的依赖关系更明显，让开发人员更容易阅读、理解和修改所有这些依赖项。这是我们降低项目贡献门槛，提升其长期可维护性的关键举措。</p><h3 id="制定-RFC-流程"><a href="#制定-RFC-流程" class="headerlink" title="制定 RFC 流程"></a>制定 RFC 流程</h3><p>2018 年末，我们有了一个带有新的响应系统和虚拟 DOM 渲染器的原型。我们验证了计划中的内部架构优化，但只是粗略起草了面向外部的 API 更改想法。现在该将这些想法转变为具体的设计了。</p><p>我们知道这一步要在早期谨慎进行。Vue 的广泛流行意味着重大更改可能会给用户带来巨大的迁移成本，还可能让生态碎片化。为了让用户对重大更改提交反馈，我们在 2019 年初制定了一套 RFC（征求意见）流程。所有 RFC 都有一个模板，包括动机、设计细节、权衡以及采用策略等内容。这套流程的实现形式，是在一个 Github 仓库上将提案提交成拉取请求，这样自然就可以在评论中讨论提案了。</p><p>结果表明这个 RFC 流程非常有用。作为一个思维框架，它强制我们全面考虑一个潜在更改的所有层面，并让整个社区可以参与到设计过程中，并提交经过充分思考的特性需求。</p><h2 id="四、更快，更小"><a href="#四、更快，更小" class="headerlink" title="四、更快，更小"></a>四、更快，更小</h2><blockquote><p>前端框架的性能至关重要。</p></blockquote><p>前端框架的性能至关重要。尽管 Vue 2 已经提供了颇具竞争力的性能表现，但这次重写让我们有机会试验新的渲染策略来进一步提升性能。</p><h3 id="突破虚拟-DOM-的瓶颈"><a href="#突破虚拟-DOM-的瓶颈" class="headerlink" title="突破虚拟 DOM 的瓶颈"></a>突破虚拟 DOM 的瓶颈</h3><p>Vue 有一套独特的渲染策略：它提供了一个类 HTML 的模板语法，但将模板编译成了一个返回虚拟 DOM 树的渲染函数。框架会递归遍历两个虚拟 DOM 树，对比每个节点的所有属性来判断该更新 DOM 的哪些部分。这种相对暴力的算法一般还是很快的，这要感谢现代 JS 引擎实现的那么多高级优化措施。但是更新过程还是会涉及很多不必要的 CPU 工作。当你的模板存在大量静态内容，却只有少量动态绑定时，更新的效率就会显得尤为低下——还是要递归遍历整个虚拟 DOM 树，才能找出要更新的部分。</p><p>所幸模板编译这一步让我们可以对模板进行静态分析，并提取动态部分的信息。Vue 2 跳过了静态子树，在一定程度上做到了这一点；但是由于过度简化的编译器架构，更高级的优化就很难实现了。在 Vue 3 中我们重写了编译器，加入了一个合适的 AST transform 管道，让我们能以 transform 插件的形式进行编译时优化。</p><p>现在有了新的架构，我们想要找到一个尽可能减少额外开销的渲染策略。一个选项是抛弃虚拟 DOM 并直接生成命令式 DOM 操作，但这会失去直接编写虚拟 DOM 渲染函数的能力，我们发现这是对于高级用户和库作者们非常有价值的能力。此外，这也会是一个影响巨大的重大更改。</p><p>接下来的选项就是摆脱不必要的虚拟 DOM 树遍历和属性对比，这也是更新过程中性能开销最大的部分。为此，编译器和运行时需要协同工作：编译器分析模板，生成带有优化线索的代码，而运行时获取线索并选择最快路径。这里有三大优化工作：</p><p>首先，在树级别，我们注意到没有动态调整节点结构的模板指令（如 v-if 和 v-for）时，节点的结构完全保持静态。如果我们将模板根据这些结构化指令拆分为一些嵌套 “ 块 “，每一个块中的节点结构也会保持静态。当我们更新一个块中的节点时，就不必再递归遍历整个树了——块内的动态绑定可以在一个平面数组里追踪。这一优化极大减少了需要遍历的树的数量，规避了大部分虚拟 DOM 树开销。</p><p>其次，编译器会激进检测模板中的静态节点、子树甚至数据对象，并在生成的代码中将它们提取到渲染函数之外。这就可以避免在每次渲染时重新创建这些对象，大幅减少了内存占用，并减少了垃圾收集的频率。</p><p>最后，在元素级别，编译器会为每一个有动态绑定的元素，根据其需要进行的更新类型生成一个优化标志。比如说一个元素有一个动态的 class 绑定和一些静态属性，它会获得一个标志，表示这里只需要进行 class 检查。运行时会获取这些标志，然后选择最快的路径。</p><blockquote><p>CPU 时间：是指 JavaScript 运算所消耗的时间，不包括浏览器 DOM 操作所用的时间。</p></blockquote><p>结合这些优化，我们的渲染更新速度获得了显著改进，在某些场景下 Vue 3 的 CPU 时间仅为 Vue 2 的十分之一不到。</p><h3 id="缩小包体积"><a href="#缩小包体积" class="headerlink" title="缩小包体积"></a>缩小包体积</h3><p>框架的大小也会影响其性能。这是 Web 应用程序特有的现象，因为资产需要在线下载，而应用需要等到浏览器解析完必要的 JavaScript 代码后才能开始交互。单页面应用程序在这方面的矛盾尤为明显。尽管 Vue 一直以来都是相对轻量级的框架——Vue 2 的运行时大小为 23KB（gzip 压缩后），我们还是注意到了两个问题：</p><p>首先，不是所有人都需要框架的全部功能。例如，从来不需要过渡特性的应用还是需要下载和解析相关代码。</p><p>另外，我们在不断给框架增加新特性，框架也在不断变大，没有止境。这样我们在权衡新特性的利弊时，就得非常在意包大小这个权重。结果，我们会倾向于只加入那些大多数用户都会用到的特性。</p><p>理想状态下，用户可以在构建时去掉框架中自己不需要的特性（也就是 “ 摇树优化 “），只保留自己用到的特性。这样我们在添加只有部分用户会用到的特性时，并不会给其他用户增添应用体积的负担。</p><p>在 Vue 3 中，我们把大多数全局 API 和内部 helper 移到了 ES 模块导出中，从而实现了这个目标。这样现代的打包器就可以静态分析模块依赖项，并去掉与未使用导出相关的代码。模板编译器也会生成适合摇树优化的代码，只会对模板确实用到的特性导入 helper。</p><p>框架的有些部分是永远无法摇树优化的，因为它们对于所有应用类型来说都很重要。我们将这部分无法舍弃的代码的体积称作基线大小。虽然 Vue 3 增加了很多新特性，但其基线大小只有大约 10KB（gzip 后），不到 Vue 2 的一半。</p><h2 id="五、满足扩展需求"><a href="#五、满足扩展需求" class="headerlink" title="五、满足扩展需求"></a>五、满足扩展需求</h2><p>我们还想改善 Vue 应对大规模应用程序的能力。我们最初设计 Vue 时主要想的是降低入门门槛并平滑学习曲线。但随着 Vue 愈加流行，我们也看到了越来越多的项目需求随着时间推移不断扩大，后期甚至包含数以百计的模块，需要几十名开发人员来维护。对于这种类型的项目，TypeScript 这样的类型系统和可以提供组织清晰、易于复用的代码的能力是必不可少的，但 Vue 2 在这些方面的支持水平不甚理想。</p><p>在 Vue 3 的早期设计阶段，我们尝试内置对使用 class 编写组件的支持，从而更好地整合 TypeScript。这里的问题在于，为了让 class 可用而需要的很多语言特性（例如 class fields 和 decorators）都还处在提案阶段，有可能在正式版中出现变化。随之而来的复杂性和不确定性让我们开始质疑 Class API 是否真的合适，因为它只能改善一点 TypeScript 的整合能力而已。</p><p>于是我们决定探索其他途径来解决扩展问题。受到 React Hooks 的启发，我们想到了暴露底层的响应式和组件生命周期的 API，从而提供一种更灵活地编写组件逻辑的方式，也就是 Composition API 。Composition API 不再需要用一个长长的配置列表定义组件，它允许用户自由定义、组合和重用组件逻辑，就像写函数一样，同时还能提供完善的 TypeScript 支持。</p><p>我们非常喜欢这个想法。尽管 Composition API 是为解决特定类型的问题设计的，但也能用在单纯的组件开发中。在提案的初稿中我们有些忘乎所以，暗示我们可能会在未来的版本中用 Composition API 替换掉当前的 Options API。这引起了社区成员的极大反弹，给我们上了重要的一课，让我们认识到了与社区沟通长期计划和发展方向，以及理解用户需求的重要性。在听取社区反馈之后，我们完全重做了提案，确认 Composition API 只是锦上添花，是 Options API 的补充。新版提案的反馈要正面许多，我们还收到了很多建设性的意见。</p><h2 id="六、把握平衡"><a href="#六、把握平衡" class="headerlink" title="六、把握平衡"></a>六、把握平衡</h2><blockquote><p>开发人员的多样性意味着使用场景的多样性。</p></blockquote><p>如今有超过一百万的开发人员在使用 Vue，其中有只懂一点 HTML/CSS 的新手，从 jQuery 一路走来的专家，从其他框架迁移过来的老鸟，在寻找前端解决方案的后端工程师，还有负责设计大规模软件的架构师。开发人员的多样性意味着使用场景的多样性：有的开发人员可能想要提升旧项目的交互体验，另一些人可能想要快速开发低成本的一次性项目；架构师可能要应对规模巨大的长期项目，以及项目生命周期内的开发团队成员变动。</p><p>Vue 的设计在不断根据这些需求变化和发展，我们也设法从诸多权衡中找到平衡点。Vue 的口号“渐进式框架”，背后就是这个过程中形成的分层 API 设计。新手可以通过 CDN script、基于 HTML 的模板以及直观的 Options API 顺利学习入门。而专家可以通过全功能的 CLI、渲染函数以及 Composition API 来处理复杂需求。</p><p>要实现我们的愿景还有很多工作要做，其中最重要的就是更新支持库、文档和工具，以保证平滑的迁移。我们会在未来的几个月中继续努力，而且我们迫不及待想要看到社区能用 Vue 3 创造怎样的精彩了。</p><p>作者介绍<br>尤雨溪是 Vue.js 框架的创建者和项目领导，也是一位独立开源开发者。</p><ul><li><p>原文链接：<a href="https://increment.com/frontend/making-vue-3/">https://increment.com/frontend/making-vue-3/</a></p></li><li><p>译文链接：<a href="https://www.infoq.cn/article/rTS3OweiTlA8OldIidBz">https://www.infoq.cn/article/rTS3OweiTlA8OldIidBz</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术搬运 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>喜欢一个人，就多让 Ta 微笑</title>
      <link href="/2020/04/06/luck-01/"/>
      <url>/2020/04/06/luck-01/</url>
      
        <content type="html"><![CDATA[<p>我们终其一生，不就是为了遇见那个最值得的人么。</p><p><img src="http://images.iamtaoxin.com/mweb/2020-04-06-15861784987662%20.png" alt=""></p><p>越长大，越孤单，越很少能感受到真正的快乐，更多时候是在带着面具生活着，。微笑可能只是一种纯粹礼貌的表情，不带任何心情，那些单纯的快乐慢慢变成了奢望。</p><p>生活本就没有那么多快乐，生活本就需要我们去创造更多的快乐。</p><p>如果真正喜欢一个人，就多让 ta 微笑。</p><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-04-06-15861784987682%20.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人间值得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome80 跨域名登录失效的问题</title>
      <link href="/2020/03/23/chrome-80/"/>
      <url>/2020/03/23/chrome-80/</url>
      
        <content type="html"><![CDATA[<p><code>Chrome 80</code> 版本在跨域名登录时存在问题，可能会使页面陷入死循环的状态，导致用户无法正常登录。这主要是由于这个版本中，Chrome 的策略有所更新。</p><p>在旧版浏览器，如果 <code>SameSite</code> 属性没有设置，或者没有得到运行浏览器的支持，那么它的行为等同于 <code>None</code>，<code>Cookies</code> 会被包含在任何请求中——包括跨站请求。</p><p>但是，在 <code>Chrome 80+</code> 版本中，<code>SameSite</code> 的默认属性是 <code>SameSite=Lax</code>。换句话说，当 <code>Cookie</code> 没有设置 <code>SameSite</code> 属性时，将会视作 <code>SameSite</code> 属性被设置为<code>Lax</code> 。如果想要指定 <code>Cookies</code> 在同站、跨站请求都被发送，那么需要明确指定 <code>SameSite</code> 为 <code>None</code>。具有 <code>SameSite=None</code> 的 <code>Cookie</code> 也必须标记为安全并通过 <code>HTTPS</code> 传送。</p><p>在 <code>Chrome 88</code> 之前，您将能够使用策略还原为旧版 <code>Cookie</code> 行为。您可以使用 <code>LegacySameSiteCookieBehaviorEnabledForDomainList</code> 指定受信任的域，也可以使用 <code>LegacySameSiteCookieBehaviorEnabled</code> 控制全局默认值。有关更多详细信息，请访问 <code>Cookie旧版SameSite政策</code>：<a href="https://www.chromium.org/administrators/policy-list-3/cookie-legacy-samesite-policies。">https://www.chromium.org/administrators/policy-list-3/cookie-legacy-samesite-policies。</a></p><p>以上更新可能对以下功能造成影响：</p><ul><li>跨域名登陆失效</li><li><code>jsonp</code> 获取数据失效</li><li><code>iframe</code> 嵌套的页面打不开或异常</li><li>部分客户端未改造导致各种数据获取异常</li></ul><p>建议大家针对上述更新对自己的站点功能在新版浏览器下做一些测试，以免影响功能正常使用。</p><p>你可以到 <code>chrome://flags/</code> 开启 <code>SameSite by default cookies</code>、<code>Cookies without SameSite must be secure</code> 进行测试。</p><p><img src="http://images.iamtaoxin.com/mweb/2020-03-23-15849696390219%20.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩过的坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 的作用域插槽的用法</title>
      <link href="/2020/03/11/vue-slot/"/>
      <url>/2020/03/11/vue-slot/</url>
      
        <content type="html"><![CDATA[<p>在某些场景下，需要让插槽中的内容能够访问子组件中才有的数据。</p><p><a name="rBvCr"></a></p><h2 id="一、场景代码"><a href="#一、场景代码" class="headerlink" title="一、场景代码"></a>一、场景代码</h2><p>有一个带有如下模板的 <code>&lt;list&gt;</code> 组件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"action"</span> v<span class="token operator">-</span>bind<span class="token operator">:</span>action<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>页面代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>list<span class="token operator">></span>    <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>action<span class="token operator">=</span><span class="token string">"&#123; action &#125;"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>button size<span class="token operator">=</span><span class="token string">"mini"</span> icon<span class="token operator">=</span><span class="token string">"el-icon-view"</span> type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"handleEdit(action)"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>button size<span class="token operator">=</span><span class="token string">"mini"</span> icon<span class="token operator">=</span><span class="token string">"el-icon-delete-solid"</span> type<span class="token operator">=</span><span class="token string">"danger"</span> @click<span class="token operator">=</span><span class="token string">"handleRemove(action.id)"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>list<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面代码可以看出，为了让 <code>action</code>  在父级的插槽内容中可用，我将 <code>user</code>  作为 <code>&lt;slot&gt;</code>  元素的一个特性绑定到了组件上面。因此，绑定在 <code>&lt;slot&gt;</code>  上的特性被称为  <strong>插槽 prop。</strong>而且，在父级作用域中，我们可以给 <code>v-lot</code>  附带一个值（上面代码中便是 <code>action</code> ）来定义我们提供的插槽 prop 的名字。</p><p>观察上面代码，可以看出，这种写法是具名插槽，当然也可以使用默认插槽：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>list<span class="token operator">></span>    <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span><span class="token keyword">default</span><span class="token operator">=</span><span class="token string">"&#123; action &#125;"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>button size<span class="token operator">=</span><span class="token string">"mini"</span> icon<span class="token operator">=</span><span class="token string">"el-icon-view"</span> type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"handleEdit(action)"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>button size<span class="token operator">=</span><span class="token string">"mini"</span> icon<span class="token operator">=</span><span class="token string">"el-icon-delete-solid"</span> type<span class="token operator">=</span><span class="token string">"danger"</span> @click<span class="token operator">=</span><span class="token string">"handleRemove(action.id)"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>list<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种写法还可以更简单些，不带参数 <code>v-slot</code>  被假定对应默认插槽：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>list<span class="token operator">></span>    <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">=</span><span class="token string">"&#123; action &#125;"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>button size<span class="token operator">=</span><span class="token string">"mini"</span> icon<span class="token operator">=</span><span class="token string">"el-icon-view"</span> type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"handleEdit(action)"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>button size<span class="token operator">=</span><span class="token string">"mini"</span> icon<span class="token operator">=</span><span class="token string">"el-icon-delete-solid"</span> type<span class="token operator">=</span><span class="token string">"danger"</span> @click<span class="token operator">=</span><span class="token string">"handleRemove(action.id)"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>list<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="fb8iT"></a></p><h2 id="二、其他事项"><a href="#二、其他事项" class="headerlink" title="二、其他事项"></a>二、其他事项</h2><p>注意：</p><ol><li>默认插槽的缩写语法 不能 和具名插槽混用，会导致作用域不明确；</li><li>如果出现多个插槽，须为<strong>_所有的  _</strong>插槽使用完整的基于 <code>&lt;template&gt;</code>  的语法。</li></ol><p>另外：<br />关于 Vue 的作用域插槽的详细描述，可查看官方文档：<a href="">作用于插槽</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>You Are Using the Runtime-Only Build of Vue Where the Template Compiler Is Not Available. Either Pre</title>
      <link href="/2020/03/07/vue-run-time/"/>
      <url>/2020/03/07/vue-run-time/</url>
      
        <content type="html"><![CDATA[<p>在 Vue 项目初始化时遇到了这样的问题：</p><blockquote><p>[Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.</p></blockquote><h3 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h3><p>Vue 的代码有两种形式， <code>compiler</code> 模式 和 <code>runtime</code> 模式，默认为 <code>runtime</code> 模式，Vue 模块则指向 <code>dist/vue.runtime.common.js</code> 位置。</p><p>观察我的 main.js 代码，是这样的的，跟之前的写法大为不同：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">_ eslint-disable no-new _</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    App<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token string">"&lt;App/>"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种形式是 <code>compiler</code> 模式，因此就会出现上面的错误。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol><li>直接修改 main.js 代码</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//runtime</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  router<span class="token punctuation">,</span>  store<span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>Vue cli 2.0</code> 中没有出现这个为，是因为 2.0 中 有 <code>webpack</code> 的别名配置如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">resolve<span class="token operator">:</span><span class="token punctuation">&#123;</span> alias<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token string">'vue$'</span><span class="token operator">:</span> <span class="token string">'vue/dist/vue.esm.js'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说， <code>import Vue from &#39;vue&#39;</code> 这行代码被解析为 <code>import Vue from &#39;vue/dist/vue.esm.js&#39;</code> , 因此直接指定了文件的位置，而没有使用 <code>main</code> 字段默认的文件位置。<br>针对上面问题，也可以直接在 <code>main.js</code> 中修改引用 <code>vue</code> 的代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue/dist/vue.esm.js"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>修改 <code>webpack</code> 配置</li></ol><p>在 Vue cli 3.0 中需要在 <code>vue.config.js</code> 文件里加上 <code>webpack</code> 的配置，具体代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">configureWebpack<span class="token operator">:</span> <span class="token punctuation">&#123;</span> resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">'vue\$'</span><span class="token operator">:</span> <span class="token string">'vue/dist/vue.esm.js'</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一笑</title>
      <link href="/2020/03/02/daily-laught/"/>
      <url>/2020/03/02/daily-laught/</url>
      
        <content type="html"><![CDATA[<p>笑，是人的一种平和心态以及善良的内心表现，同时，也是体内安多芬分泌物增高的时候。人的心情处于正常状态时，在与他人交谈期间就会呈现为平和的心理作用并用微笑来展现人与人之间的善意交往。人们常说“笑一笑，十年少”，笑口常开，笑天下可笑之事。</p><p><em>段子多摘自网络，侵删。</em></p><h4 id="2020-05-25"><a href="#2020-05-25" class="headerlink" title="2020-05-25"></a>2020-05-25</h4><hr><p>从前有一位老人，他在去世前给三个儿子出题以确实如何分割遗产，题目为用一金币买的东西充满房子。大儿子买了稻草，装了半屋，二儿子打开瓦斯，充满了房间，这时候小儿子端着一根点燃的蜡烛走进房间</p><h4 id="2020-05-24"><a href="#2020-05-24" class="headerlink" title="2020-05-24"></a>2020-05-24</h4><hr><p>据说小孩能看见不干净的东西，大人们千万别不当回事！我一个朋友说他小时候经常看到两个小孩在他家空调上，就和父母说了这事，把他家里人吓的够呛，最后请来法师又请来半仙一阵忙活，可父母再问孩子，他还是能看见那俩小孩。后来因为这事他们家把房子卖了，搬到了另一个城市，连家具家电都不要了，直到他长大后…他爹才知道那两个小孩是海尔兄弟…差点没把他打死…</p><h4 id="2020-05-23"><a href="#2020-05-23" class="headerlink" title="2020-05-23"></a>2020-05-23</h4><hr><p>网上买了个东西，想着捉弄一下快递小哥，收件人写的皇上，终于来了，对着快递小哥等他说：“皇上，你的快递。”想不到的是他问：“拿谁的快递？”我只能说：“拿皇上的。”快递小哥给我来了句：“哦～公公好年轻啊！”?</p><h4 id="2020-05-22"><a href="#2020-05-22" class="headerlink" title="2020-05-22"></a>2020-05-22</h4><hr><p>爷爷退休了，报名上了老年大学， 正读一年级的孙子好奇地问：“爷爷，你还读书啊?” 爷爷说：“我读书有什么不好吗?” 孙子说：“好是好，就是万一你学校通知开家长会，那你怎么办呢?”.. .. .. 见过操心的没见过这么操心的 ！</p><h4 id="2020-05-21"><a href="#2020-05-21" class="headerlink" title="2020-05-21"></a>2020-05-21</h4><hr><p>花心的男人，是台球，一个杆可以进好几个洞。顾家的好男人，是高尔夫球，一个杆只进一个洞。而那些单身的屌丝们，是乒乓球，很黄，却没有洞可以进。</p><h4 id="2020-05-20"><a href="#2020-05-20" class="headerlink" title="2020-05-20"></a>2020-05-20</h4><hr><p>今天是 520，我想说：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geyqxndv87j30et08cdg2.jpg" alt=""></p><h4 id="2020-05-19"><a href="#2020-05-19" class="headerlink" title="2020-05-19"></a>2020-05-19</h4><hr><p>有个贼偷水果被巡逻队抓，要关起来。那贼还理直气壮的说：不就偷了 20 斤山竹，至于关起来吗? 巡逻队不慌不忙的说：以前有个猴就偷了一个桃，被关了 500 年。</p><h4 id="2020-05-18"><a href="#2020-05-18" class="headerlink" title="2020-05-18"></a>2020-05-18</h4><hr><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gex08tp6pcj30c105974h.jpg" alt=""></p><h4 id="2020-05-17"><a href="#2020-05-17" class="headerlink" title="2020-05-17"></a>2020-05-17</h4><hr><p>当年，和她赌气分手，昨天她出嫁，我偷偷的开车混在迎亲的车队后面，没开多远，收到她短信:“你不是说这辈子都不想见我吗，为什么要跟在车队后面？” 我回复:“你怎么知道我在车队后面，你还关注我？” 不一会收到她回复:“不是我关注你，是你的拖拉机声音太大！”</p><h4 id="2020-05-16"><a href="#2020-05-16" class="headerlink" title="2020-05-16"></a>2020-05-16</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-05-16-15896285084838%20.jpg" alt=""></p><h4 id="2020-05-15"><a href="#2020-05-15" class="headerlink" title="2020-05-15"></a>2020-05-15</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-05-15-15895250585896%20.jpg" alt=""></p><h4 id="2020-05-14"><a href="#2020-05-14" class="headerlink" title="2020-05-14"></a>2020-05-14</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-05-14-15894214713049%20.jpg" alt=""></p><h4 id="2020-05-13"><a href="#2020-05-13" class="headerlink" title="2020-05-13"></a>2020-05-13</h4><hr><p>我爸妈都是特别不负责任的人，很久以前他们借别人钱的时候许下承诺：“借你的钱我们通通会还你。”</p><p>然后他们生下我取名叫“通通”。</p><h4 id="2020-05-12"><a href="#2020-05-12" class="headerlink" title="2020-05-12"></a>2020-05-12</h4><hr><p>白衬衣袖口容易发黄，一般的洗衣精很难洗掉，不少人为此感到头疼，其实，不妨在洗的时候，吃点头痛药，就没那么头疼了。</p><h4 id="2020-05-11"><a href="#2020-05-11" class="headerlink" title="2020-05-11"></a>2020-05-11</h4><hr><p>“爸爸，为什么我哥叫解放呢？”“咱们家有个传统，孩子一出生，出门看见啥就叫啥，生了你哥，出门看见了辆解放车，就叫解放，你姐呢，出门下雪了，就叫白雪，知道了吗狗屎？”</p><h4 id="2020-05-10"><a href="#2020-05-10" class="headerlink" title="2020-05-10"></a>2020-05-10</h4><hr><p>小猪佩奇昨晚做了个梦，梦到自己长大以后成为了一个水手，妈妈说梦境跟现实都是相反的，于是佩琪长大后成了火腿。</p><h4 id="2020-05-09"><a href="#2020-05-09" class="headerlink" title="2020-05-09"></a>2020-05-09</h4><hr><p>同事儿子会吹笛子和口琴，有一次来我家里玩，对我侄子说：你会吹笛子吗？侄子摇摇头。又说：你会吹口琴吗？侄子又摇摇头。然后问：那你会吹什么？侄子不好意思地说：我会吹空调！</p><h4 id="2020-05-08"><a href="#2020-05-08" class="headerlink" title="2020-05-08"></a>2020-05-08</h4><p>我哥问我妈：“当年家里那么穷，你干嘛还要生下弟弟？”</p><p>我妈说：“当年看你个子矮，怕你今后受欺负没人帮你报仇，所以才生下老二。”</p><p>我哥感动的说：“妈，这想法谁告诉你的？”</p><p>妈说：“看水浒传呀，武大郎要不是有个兄弟，死的多冤呀！”</p><h4 id="2020-05-07"><a href="#2020-05-07" class="headerlink" title="2020-05-07"></a>2020-05-07</h4><hr><p>听说睡觉时把手机放在枕头边上会有辐射，对身体不好，于是睡觉时果断把枕头丢了。</p><h4 id="2020-05-06"><a href="#2020-05-06" class="headerlink" title="2020-05-06"></a>2020-05-06</h4><hr><p>当年备战高考，晚上挑灯夜战，父亲走进我的房间说：注意劳逸结合，特别要保护好视力，千万别近视了！免得以后做泥瓦匠的时候看不到吊线，砖墙砌得不标准，老板要扣钱的！毕竟依你的成绩，上大学是不现实的。</p><h4 id="2020-05-05"><a href="#2020-05-05" class="headerlink" title="2020-05-05"></a>2020-05-05</h4><hr><p>黄鼠狼在养鸡场山崖边立了块碑,写道:“不勇敢地飞下去,你怎么知道自己原来是一只搏击长空的鹰?!”</p><p>从此以后,黄鼠狼每天都能在崖底吃到那些摔死的鸡!</p><h4 id="2020-05-04"><a href="#2020-05-04" class="headerlink" title="2020-05-04"></a>2020-05-04</h4><hr><p>我为了研究女生洗澡喜欢用什么牌子的沐浴露，找了 100 个人，结果她们的回答惊人的一致：你 TM 是怎么进来的。</p><h4 id="2020-05-03"><a href="#2020-05-03" class="headerlink" title="2020-05-03"></a>2020-05-03</h4><hr><p>酝酿了很久，我辗转找到一个我中学暗恋的女生的电话，给她发了一条短信：如果只有一碗粥，你先喝半碗，剩下的半碗，我放在怀里给你保温……几分钟后，她回了一条短信:你愿意做我孩子的父亲吗？</p><h4 id="2020-05-02"><a href="#2020-05-02" class="headerlink" title="2020-05-02"></a>2020-05-02</h4><hr><p>单位组织体检,护士说领导心率一直不正常,遂请主任医师复检，复查后，主任和蔼地对护士说:以后把胸前的扣子扣好，可以提高工作效率。</p><h4 id="2020-05-01"><a href="#2020-05-01" class="headerlink" title="2020-05-01"></a>2020-05-01</h4><hr><p>老夫妇去拍照，摄影师问：“大爷，您是要侧光，逆光，还是全光？”，大爷腼腆的说：“我是无所谓，能不能给你大妈留条裤衩？”</p><h4 id="2020-04-30"><a href="#2020-04-30" class="headerlink" title="2020-04-30"></a>2020-04-30</h4><hr><p>小保姆嗓门特别大，主人叮嘱，今晚来的都是有身份的人，说话务必小声一点。吃完饭，主人客人玩牌，小保姆收拾完想早点休息，于是凑近男主人耳边轻声道：“那我先睡了哈。”</p><h4 id="2020-04-29"><a href="#2020-04-29" class="headerlink" title="2020-04-29"></a>2020-04-29</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-04-29-15881206638257%20.jpg" alt=""></p><h4 id="2020-04-28"><a href="#2020-04-28" class="headerlink" title="2020-04-28"></a>2020-04-28</h4><hr><p>甲女：“你的未婚夫知道你的年龄吗？”乙女：“是的，他知道一部分。”</p><h4 id="2020-04-27"><a href="#2020-04-27" class="headerlink" title="2020-04-27"></a>2020-04-27</h4><hr><p>一次坐公交，一位漂亮 MM 上了车，掏出了卡来刷卡，只听刷卡机回复：滴<del>老人卡</del>！全车人冻住，皆而望她。</p><p>她一脸黑线说：看什么，天山童老，没见过啊？一大爷起身，说：来，大娘，您坐这儿！</p><h4 id="2020-04-26"><a href="#2020-04-26" class="headerlink" title="2020-04-26"></a>2020-04-26</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-04-26-15878314420495%20.jpg" alt=""></p><h4 id="2020-04-25"><a href="#2020-04-25" class="headerlink" title="2020-04-25"></a>2020-04-25</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-04-25-15878085560958%20.jpg" alt=""></p><h4 id="2020-04-24"><a href="#2020-04-24" class="headerlink" title="2020-04-24"></a>2020-04-24</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-04-24-15876939225400%20.jpg" alt=""></p><h4 id="2020-04-23"><a href="#2020-04-23" class="headerlink" title="2020-04-23"></a>2020-04-23</h4><hr><p>看到姑姑在化妆，小侄女跑过来：“姑姑，我也要化妆。”“小丫头，你化什么妆？”“姑姑，我们班上有个男孩……”“瞧不出来啊，才上一年级，就有男朋友了？是不是想好看点，让他更喜欢你？”“不，他太讨厌，我要像你这样化个妆，吓死他！”“滚……”</p><h4 id="2020-04-22"><a href="#2020-04-22" class="headerlink" title="2020-04-22"></a>2020-04-22</h4><hr><p>哥们：咱们关系怎么样？我：很铁！哥们：那好，既然这样，我跟你借钱的话你愿意借多少？我：60 块。哥们：靠，都很铁的关系你才借 60？我：对啊，废铁一斤 5 毛，你 120 斤。哥们：…..</p><h4 id="2020-04-21"><a href="#2020-04-21" class="headerlink" title="2020-04-21"></a>2020-04-21</h4><hr><p>爸爸：“怎么搞的，大白天还开着灯？”儿子：“这是你早晨上班前忘记关了。”爸爸：“你发现了，为什么不关上？”儿子：“你不是经常教育我要用事实说服人吗？”</p><h4 id="2020-04-20"><a href="#2020-04-20" class="headerlink" title="2020-04-20"></a>2020-04-20</h4><hr><p>前两天，老师打电话说我儿子考试语文９８分数学１７分，孩子偏科太严重了，人无压力轻飘飘，我给他好一顿胖揍还别说，这次考试就好多了，语文数学都１７分。</p><h4 id="2020-04-19"><a href="#2020-04-19" class="headerlink" title="2020-04-19"></a>2020-04-19</h4><hr><p>今天和老妈去吃酒席，去之前老妈教我，出去嘴要甜一点，说看见别人小孩长得还过去的，就要夸奖人家长得好漂亮，实在看着丑的就夸奖别人长得好高，结果，吃个饭已经有好多人夸我长得高了。</p><h4 id="2020-04-18"><a href="#2020-04-18" class="headerlink" title="2020-04-18"></a>2020-04-18</h4><hr><p>刚才结果外卖小哥哥手里的外卖，我说“辛苦啦，快多年了还得送外卖”，小哥笑笑和我说，“您也辛苦啦，快过年了还得吃外卖”。</p><h4 id="2020-04-17"><a href="#2020-04-17" class="headerlink" title="2020-04-17"></a>2020-04-17</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-04-17-15870844097161%20.jpg" alt=""></p><h4 id="2020-04-16"><a href="#2020-04-16" class="headerlink" title="2020-04-16"></a>2020-04-16</h4><hr><p>小孩把妓院养的鹦鹉偷回家，一进门，鹦鹉便叫：搬家啦！看见他妈妈又叫：老板也换啦！看见他姐姐又叫：小姐也换了！看见他爸爸又叫：我 cao 还是老客！</p><h4 id="2020-04-15"><a href="#2020-04-15" class="headerlink" title="2020-04-15"></a>2020-04-15</h4><hr><p>去年，哥们终于做出了痛苦的决择，放弃了那个追了三年，为她买了三年早餐还被嫌弃了三年的女神。。。。上月，我突然接到了哥们和他女神要结婚的消息，细细才知道是女孩主动打电话给他的，原因是早晨起床去买早点真的很难受很难受。。。。</p><h4 id="2020-04-14"><a href="#2020-04-14" class="headerlink" title="2020-04-14"></a>2020-04-14</h4><hr><p>早上起来去上班，两条腿痛的上下楼梯都得横着走，同事:“你怎么啦？路都不会走了！”我:“昨晚跟姐夫玩石头剪刀布，赢一次就深蹲 100 下，结果我连输两次，姐夫躺沙发上笑眯眯地看着我蹲了 200 下，累得我满身大汗，”同事:“你没赢为什么要蹲？”</p><h4 id="2020-04-13"><a href="#2020-04-13" class="headerlink" title="2020-04-13"></a>2020-04-13</h4><hr><p>周末逛街买了瓶可乐，发现一老婆婆紧跟着我，于是转身问她：“干什么？老奶奶。”她说：“我要你手上的空瓶。”原来如此，于是我把空瓶给了她，谁知走了一段路发现她还跟着，纳闷地问她：“瓶子不是给你了吗？还有事？”谁知她说：“这天那么热，我就不相信你不再买一瓶！”</p><h4 id="2020-04-12"><a href="#2020-04-12" class="headerlink" title="2020-04-12"></a>2020-04-12</h4><hr><p>邻居是丑女，今天正在家中洗澡！突然丑女喊道：“老公，好象有人偷看我洗澡！”老公：“是吗？那你赶紧把窗户打开！”丑女大怒：“我疯啦？”老公解释道：“你让他看清楚，下次他再也不敢看了”</p><h4 id="2020-04-11"><a href="#2020-04-11" class="headerlink" title="2020-04-11"></a>2020-04-11</h4><hr><p>某公厕内，A 君便秘，拉了好久都拉不出来，这时另一男子 B 君冲进来，刚蹲下就噼里啪啦的拉得好不畅快，A 君听到后说：“伙计，真羡慕你呀，拉得这么痛快” B 君说：“有啥好羡慕的，裤子还没脱呢……</p><h4 id="2020-04-10"><a href="#2020-04-10" class="headerlink" title="2020-04-10"></a>2020-04-10</h4><hr><p>哥们结婚，让我陪着买家具，我让他买那个高端上档次的大沙发，哥们死活嫌贵，好说歹说不同意。最后旁边一个阿姨对他说：“一看你的朋友就是过来人，沙发和床一样重要，你确定你结婚后每天都能睡在床上吗？”哥们意味深长地看了一眼我发黑级别的眼圈，大喝一声：“走！带我看看最贵的！</p><h4 id="2020-04-09"><a href="#2020-04-09" class="headerlink" title="2020-04-09"></a>2020-04-09</h4><hr><p>上个月跟老丈人去钓鱼，浮标下沉，一拉是条大鱼，我用力往上拉，结果没站稳，把年过六旬的老丈人撞进了河里。老丈人上岸后也没说什么，就说水有点凉！前几天我又去找老丈人：爸，钓鱼去吗？老丈人：我就一个女儿，财产早晚都是你们的，你别太急……</p><h4 id="2020-04-08"><a href="#2020-04-08" class="headerlink" title="2020-04-08"></a>2020-04-08</h4><hr><p>和男朋友一起走，喜欢手搂着他的腰，顺便扯着他的衣服。有一天散步中，他忽然说：“别扯我的衣服了好不好？”我不悦，说：“你和我说话就不能加个宝贝？”然后他说：“别扯我的宝贝衣服好不好？”我：“……”</p><h4 id="2020-04-07"><a href="#2020-04-07" class="headerlink" title="2020-04-07"></a>2020-04-07</h4><hr><p>吃饭的时候，老婆教导儿子：“以后结了婚，一定要学会藏私房钱，你看你爸藏了我就找不着。”</p><p>我争辩道：“我从没藏过私房钱！ ”</p><p>老婆立马捅了一下我，说：“这句最重要，记着经常说！ ”</p><h4 id="2020-04-06"><a href="#2020-04-06" class="headerlink" title="2020-04-06"></a>2020-04-06</h4><hr><p>小美在作文簿里写上长大后的愿望：一、我希望能有一个可爱的孩子；二、我还希望能有一个爱我的丈夫。结果，发现老师写了一句评语：“请注意先后顺序。”</p><h4 id="2020-04-05"><a href="#2020-04-05" class="headerlink" title="2020-04-05"></a>2020-04-05</h4><hr><p>有个朋友第一次勤工俭学在公园里卖冰棍，不好意思吆喝；这时候突然有一人在那里大喊：“卖冰棍儿<del>卖冰棍儿</del>”。那朋友一听，心里可高兴了，就跟着喊：“我也是<del>我也是</del>”。</p><h4 id="2020-04-04"><a href="#2020-04-04" class="headerlink" title="2020-04-04"></a>2020-04-04</h4><hr><p>一小孩给了我一百块钱，让我给他当家长。到了他班主任那里，我立马就跪下来了：老婆，你听我解释……”</p><h4 id="2020-04-03"><a href="#2020-04-03" class="headerlink" title="2020-04-03"></a>2020-04-03</h4><hr><p>儿子哭闹着要买乐高，老婆被吵的不耐烦了：有本事你再哭一声，看我不揍你！我劝道：你昨天看了一篇文章，还跟我说对小孩不能那么简单粗暴！老婆听了，若有所思。她蹲了下来，温柔的对儿子说：不能哭哦，再哭妈妈会揍你的呦！</p><h4 id="2020-04-02"><a href="#2020-04-02" class="headerlink" title="2020-04-02"></a>2020-04-02</h4><hr><p>走到楼下，看到一男一女坐在草坪上谈恋爱，女的狂戳手机，男的无奈坐在旁边。我过去只说了一句“卧槽，有蛇！”那女的哇的一下就扑到男的怀里去了。我刚在心里默默道，学长只能帮你到这里了。谁料到那男的推开女孩，跑的比什么都快。</p><h4 id="2020-04-01"><a href="#2020-04-01" class="headerlink" title="2020-04-01"></a>2020-04-01</h4><hr><p>隔壁女汉子好像终于意识到找个男盆友的重要性了，因为她的签名改成了：其实想说，有个男朋友还是蛮重要的，至少在家里水管爆裂的时候，可以给我递下扳手…</p><h4 id="2020-03-31"><a href="#2020-03-31" class="headerlink" title="2020-03-31"></a>2020-03-31</h4><p>有一次急性肠胃炎去医院，痛的死去活来，我爸来看我，一脸焦急的跟我说，这医院怎么连一个 wifi 都连不上。</p><h4 id="2020-03-30"><a href="#2020-03-30" class="headerlink" title="2020-03-30"></a>2020-03-30</h4><hr><p>一同学分不清“钓”跟“钩”，作文里有句话就变成了“鱼终于上钓了”</p><h4 id="2020-03-29"><a href="#2020-03-29" class="headerlink" title="2020-03-29"></a>2020-03-29</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-03-29-15854789561113%20.jpg" alt=""></p><h4 id="2020-03-28"><a href="#2020-03-28" class="headerlink" title="2020-03-28"></a>2020-03-28</h4><hr><p>孩子问妈妈：“为什么蜡烛火苗一窜一窜的” 妈妈说：“因为这是精神小火 ” ​</p><h4 id="2020-03-27"><a href="#2020-03-27" class="headerlink" title="2020-03-27"></a>2020-03-27</h4><hr><p>你听过最孤独的话是什么？</p><p>同学，作业就剩你没交了。</p><h4 id="2020-03-26"><a href="#2020-03-26" class="headerlink" title="2020-03-26"></a>2020-03-26</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-03-26-15851828399976%20.jpg" alt=""></p><h4 id="2020-03-25"><a href="#2020-03-25" class="headerlink" title="2020-03-25"></a>2020-03-25</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-03-25-15851310523049%20.jpg" alt=""></p><h4 id="2020-03-24"><a href="#2020-03-24" class="headerlink" title="2020-03-24"></a>2020-03-24</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-03-24-15850152690208%20.jpg" alt=""></p><h4 id="2020-03-23"><a href="#2020-03-23" class="headerlink" title="2020-03-23"></a>2020-03-23</h4><hr><p>你听过最孤独的话是什么？</p><p>同学，作业就剩你没交了。</p><h4 id="2020-03-22"><a href="#2020-03-22" class="headerlink" title="2020-03-22"></a>2020-03-22</h4><hr><p>有个人想给自己孩子取名张三，最后取了张思睿</p><h4 id="2020-03-21"><a href="#2020-03-21" class="headerlink" title="2020-03-21"></a>2020-03-21</h4><hr><p>初中的时候刚带隐形眼镜，回到家给奶奶说戴隐形眼镜了。奶奶问我什么是隐形眼镜，我用小镊子夹起来给奶奶看，奶奶说：还真是隐形的呢。奶奶走出屋后我发现，没夹起来！！！</p><h4 id="2020-03-20"><a href="#2020-03-20" class="headerlink" title="2020-03-20"></a>2020-03-20</h4><hr><p>英语四六级考试，我跟宿管阿姨打招呼，宿管阿姨很开心祝我考 100 分。</p><h4 id="2020-03-19"><a href="#2020-03-19" class="headerlink" title="2020-03-19"></a>2020-03-19</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-03-19-15845844052317%20.jpg" alt=""></p><h4 id="2020-03-18"><a href="#2020-03-18" class="headerlink" title="2020-03-18"></a>2020-03-18</h4><hr><p>昨晚合租室友说他上火了，我就把我屉子里的黄 连上 清 片给了他。中午跟同事妹子一起在食堂吃饭，正聊的高兴，室友打电话来，我在帮妹子剥鸡蛋壳，就接通打开了扬声器，问他干啥呢，室友大着嗓门说：“哈哈，昨晚谢谢你啊，效果真不错，我屁眼今天不疼了。”玛德感谢你个铲子，劳资成焦点了。</p><h4 id="2020-03-17"><a href="#2020-03-17" class="headerlink" title="2020-03-17"></a>2020-03-17</h4><hr><p>“心狠手辣的小明舔了自己的手竟然被辣哭了。”</p><h4 id="2020-03-16"><a href="#2020-03-16" class="headerlink" title="2020-03-16"></a>2020-03-16</h4><hr><p>话说有一个傻媳妇要进城，公公不放心呀，于是叮嘱说：媳妇呀，上城买东西要记得砍价，那东西要价都高。你要记得往一半砍，知道吗？于是媳妇在一家服装店左挑右选，终于选好了一件衣服就问老板：多少钱呀？80。不，40。60 卖你了！30！40 还不行？？？20！得啦，我白送你一套算了。嘿嘿！想蒙我没那么容易，我要半套。</p><h4 id="2020-03-15"><a href="#2020-03-15" class="headerlink" title="2020-03-15"></a>2020-03-15</h4><hr><p>再一个河塘边，一个旅游者问一个村民：这个河里能洗澡么？村民说：不能，因为这里有鄂鱼。旅游者很吃惊的问：那河的下游呢？村民看了看旅游者说：当然可以了，因为这的鄂鱼怕那的鲨鱼。</p><h4 id="2020-03-14"><a href="#2020-03-14" class="headerlink" title="2020-03-14"></a>2020-03-14</h4><hr><p>一位挨家挨户推销吸尘器的推销员来到一座新楼房的第一家。他敲门，一位很有耐性的女士来开门。</p><p>还没等她有机会开口说话，他就跑进屋内，把自己带的一桶牛粪倒在地毯上。</p><p>他说：“夫人，如果这台吸尘器不能出现奇迹把这些牛粪吸干净的话，我把它们吃得干干净净。”</p><p>她转身面对着他，得意洋洋地说：“你要在它们上面加一些番茄酱吗？”</p><p>推销员不解地问：“你为什么问这个呢？”</p><p>她说：“我们刚刚搬进来，电还不通呢。”</p><h4 id="2020-03-13"><a href="#2020-03-13" class="headerlink" title="2020-03-13"></a>2020-03-13</h4><hr><p>吃饭时，一人说去方便一下老外不解，旁人告诉他方便就是上厕所。</p><p>敬酒时，另一人对老外说，希望下次出国时能给予方便，老外纳闷不敢问。</p><p>酒席上，电视台美女主持人提出，在她方便的时候会安排老外做专访。</p><p>老外愕然：怎么能在你方便的时候？美女主持人说，那在你方便时，我请你吃饭。</p><p>老外晕倒！</p><h4 id="2020-03-12"><a href="#2020-03-12" class="headerlink" title="2020-03-12"></a>2020-03-12</h4><hr><p>我有个外国朋友是中国通，今天换了个 QQ 签名：“you don‘t know love far high.”</p><p>我猜可能他失恋了，觉得对方对爱的含义理解不够深。</p><p>问他到底什么意思，丫说：“法海你不懂爱。”</p><h4 id="2020-03-11"><a href="#2020-03-11" class="headerlink" title="2020-03-11"></a>2020-03-11</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-03-11-15839016508277%20.jpg" alt=""></p><h4 id="2020-03-10"><a href="#2020-03-10" class="headerlink" title="2020-03-10"></a>2020-03-10</h4><hr><p>前两天防盗门锁坏了，进不了屋，厂家来人半天也没修好，无奈只能 110 报警，割了防盗门！</p><p>没一会儿警察来了，还从所里带了个刚抓的小偷。警察跟小偷说：“快点儿啊，给你十分钟，我这回去还等着下班了。”</p><p>小偷：“用不了，五分钟的事儿。”然后，咔咔几下，门开了…开了……连一分钟都没用！</p><p>据说当时厂家专业人士的脸色很难看…</p><h4 id="2020-03-09"><a href="#2020-03-09" class="headerlink" title="2020-03-09"></a>2020-03-09</h4><hr><p>晚上俩人散步，走到一条比较黒的小路， 女的故意跟那男的撒娇说：“会不会有坏人啊，我怕！” 男的马上挺起胸膛说：“别怕，有哥在。” 女的说：“哥，你都有些什么本事？” 只听那货说：“哥跑的快。”</p><h4 id="2020-03-08"><a href="#2020-03-08" class="headerlink" title="2020-03-08"></a>2020-03-08</h4><hr><p>上学时有天晚上和一学妹去看电影，看完十一点了。她回不了宿舍，我阴笑着对她说：哈哈，回不了宿舍了把，她低下头羞涩的说：嗯。 然后我笑的更开心了：我能回去，哈哈……</p><h4 id="2020-03-07"><a href="#2020-03-07" class="headerlink" title="2020-03-07"></a>2020-03-07</h4><hr><p>有一天，媳妇深情地望着我说：老公，你是什么时候下决心向我求婚的？我想了想回答：额，我每次来你家那条汪都要咬我，有次我来了它居然不咬了？我想你们一定把我当成一家人了。媳妇失望地摇摇头：唉，那是你来的太频繁了，狗狗都不想搭理了。</p><h4 id="2020-03-06"><a href="#2020-03-06" class="headerlink" title="2020-03-06"></a>2020-03-06</h4><hr><p>公交上，有一女生，和一个外国人英语交谈，交谈声巨大，妹子表情夸张，时不时还浪笑，就这样持续了，很长时间。妹子忽然用中文问司机：某 XXX 站到了吗？司机答：已经过了。妹子发飙了：你怎么不报站啊？司机淡定的答到：讲中文，我怕你听不懂。</p><h4 id="2020-03-05"><a href="#2020-03-05" class="headerlink" title="2020-03-05"></a>2020-03-05</h4><hr><p>考试前，小红对小明说，如果这次你能考全班第一，我就做你的女朋友。全班同学都听到了，试卷发下来后，大家都默默地把笔放下了，打算交白卷，小明眼泛泪花。 他看了一眼虎背熊腰的小红，默默地把试卷撕下来吃了。 小红微微一笑，在自己的卷子上写下了小明的名字……</p><h4 id="2020-03-04"><a href="#2020-03-04" class="headerlink" title="2020-03-04"></a>2020-03-04</h4><hr><p>“孩子，你一定得把字练好！妈妈当年就是没听你外婆的话，导致。。。”这时楼下有人呼唤孩子妈妈，“秃英！快点！三缺一！都等你呐！”孩子终于明白了妈妈所说话的含义，因为他妈妈叫秀英。。。</p><h4 id="2020-03-03"><a href="#2020-03-03" class="headerlink" title="2020-03-03"></a>2020-03-03</h4><hr><p>小时候，我跟院子里几个小孩，玩躲猫猫游戏，我见我家灶台上有一口大锅，煮猪食的那种锅，我就爬锅里去躲着，然后把锅盖盖上，后来不知道是什么时候我睡着了，他们都没有找到我，晚上的时候，我妈回来就烧火煮猪食，差点没把我烧死…..</p><h4 id="2020-03-02"><a href="#2020-03-02" class="headerlink" title="2020-03-02"></a>2020-03-02</h4><hr><p>早上晨练，在楼下看到隔壁那家的妻子脸上有伤。两个邻居在那儿议论：“哎呀！她家到底是怎么回事儿？”答：“昨晚你没听到吗，好像是他两口子打架呢。”问：“听到了，咦？她老公不是出差了吗？”答：“半夜回来了呗。”</p><h4 id="2020-03-01"><a href="#2020-03-01" class="headerlink" title="2020-03-01"></a>2020-03-01</h4><hr><p>以前我爸爸非常惹女人喜欢，总是有女人隔三差五的给他打电话！总惹得我家里天天吵架，我也天天在哭！从我毕业以后，我们家里总算清静了，我的爸爸妈妈也不吵架了！我的班主任也没有给我爸打过电话！</p><h4 id="2020-02-29"><a href="#2020-02-29" class="headerlink" title="2020-02-29"></a>2020-02-29</h4><hr><p>医生说：“你为什么要换病房?你的邻床是个极好的病友，他是有名的相声演员。”</p><p>病人打断他说：“你说得没错！可我一笑，手术的伤口就嘣开了。”</p><h4 id="2020-02-28"><a href="#2020-02-28" class="headerlink" title="2020-02-28"></a>2020-02-28</h4><hr><p>一个女生天天给男生送便当，送了 2 个月之后。</p><p>男生害羞的对女生说: 便当很好吃我….</p><p>话没说完，女生激动的说: 真的吗?</p><p>那是我哥做的，他喜欢你很久了。</p><h4 id="2020-02-27"><a href="#2020-02-27" class="headerlink" title="2020-02-27"></a>2020-02-27</h4><hr><p>幽灵：上帝，我下次投胎想和天使一样全身洁白，并且带着一对翅膀，但我仍然想吸血。­</p><p>上帝：那你投胎做护舒宝吧。­</p><h4 id="2020-02-26"><a href="#2020-02-26" class="headerlink" title="2020-02-26"></a>2020-02-26</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-02-26-15827068634059%20.jpg" alt=""></p><h4 id="2020-02-25"><a href="#2020-02-25" class="headerlink" title="2020-02-25"></a>2020-02-25</h4><hr><p>二货朋友来我家玩，我给他到了一杯雪碧。他接过放茶几上不小心碰倒了，雪碧洒了出来，二货一看脸都绿了。一把掀翻我家桌子，抓住我的衣领说：“TMD 水里有毒？”</p><h4 id="2020-02-24"><a href="#2020-02-24" class="headerlink" title="2020-02-24"></a>2020-02-24</h4><hr><p>淘宝上一件商品的一条评价：“我穿着这件新买的斗篷去面包店，因为冷，把胳膊缩在里面。面包店老板以为我是失去 双 臂 的残 疾 人，坚决不收钱，而且很贴心地把面包袋挂在我的脖子上…为了不让店主失望，我用头顶开了门，走了出来…”</p><h4 id="2020-02-23"><a href="#2020-02-23" class="headerlink" title="2020-02-23"></a>2020-02-23</h4><hr><p>某女生的男友是一个超级斯文的人，</p><p>她给男友说，平时斯文没关系，但是啪啪啪的时候能不能粗暴一点！可以骂她！这样比较有情趣！</p><p>她男友经常一边啪啪啪，一边痛诉“你是不是傻，你是不是傻”(≧▽≦)/</p><h4 id="2020-02-22"><a href="#2020-02-22" class="headerlink" title="2020-02-22"></a>2020-02-22</h4><hr><p>一天，女神去找禅师：“大师，我其实只想当个普通人，可是他们非把我当女神，好无奈啊。”禅师没说话，递给她一个袋子，让她去后院装垃圾。不一会儿装满了，禅师又递给她一个袋子。女神若有所思地点点头：“大师，您的意思是让我敞开心扉，容纳下一切，才能幸福是吗？”禅师摇摇头：“不，我的意思是…装，你接着装…”</p><h4 id="2020-02-21"><a href="#2020-02-21" class="headerlink" title="2020-02-21"></a>2020-02-21</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-02-21-15822787317546%20.jpg" alt=""></p><h4 id="2020-02-20"><a href="#2020-02-20" class="headerlink" title="2020-02-20"></a>2020-02-20</h4><hr><p>有个人超级不会说话，一天朋友家老人过寿，他也应邀出席。最后吃完长寿面，他兴致勃勃地介绍说：“这种面在我们那叫挂面。”</p><h4 id="2020-02-19"><a href="#2020-02-19" class="headerlink" title="2020-02-19"></a>2020-02-19</h4><hr><p>医生刚给个小学生扎手指查血。针刚扎，小学生放了个巨响的屁，他那彪悍老妈说道：“呀，还给你扎漏气儿了啊？”</p><h4 id="2020-02-18"><a href="#2020-02-18" class="headerlink" title="2020-02-18"></a>2020-02-18</h4><hr><p>去见女友父母，吃饭的时候她妈问：“现在消费那么高，小伙子每个月能挣多少钱呀？”我叹了口气：“唉，没多少，跟要饭的差不多。”她妈一听，高兴地说：“那每个月岂不是能挣好几万？不错不错！”我。。。</p><h4 id="2020-02-17"><a href="#2020-02-17" class="headerlink" title="2020-02-17"></a>2020-02-17</h4><hr><p>朋友说：“长得好看的人经常会莫名其妙的被加上各种属性，比如聪明，美丽，大方，善良等等”，而长的难看的就一个词，那就是踏实！说的好有道理，我竟无言以对</p><h4 id="2020-02-16"><a href="#2020-02-16" class="headerlink" title="2020-02-16"></a>2020-02-16</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-02-16-15818307227481%20.jpg" alt=""></p><h4 id="2020-02-15"><a href="#2020-02-15" class="headerlink" title="2020-02-15"></a>2020-02-15</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-02-15-15817646016687%20.jpg" alt=""></p><h4 id="2020-02-14"><a href="#2020-02-14" class="headerlink" title="2020-02-14"></a>2020-02-14</h4><hr><p>今天上完厕所不小心掉了十块钱在里面，想了半天没决定捡不捡。想走又舍不得，想捡起来又下不去手。于是我果断又丢了一百块在里面，总算下得去手了！</p><h4 id="2020-02-13"><a href="#2020-02-13" class="headerlink" title="2020-02-13"></a>2020-02-13</h4><hr><p>今天老爸要我去相亲，我说不用了，你马上就要当爷爷了…老爸很惊讶，赶紧把相亲的约定给推了…挂完电话问我：“你什么时候有的对象？”我说没有呀，你不是种了几棵葫芦吗？我看快成熟了……说完我就感觉我的脸火辣辣的疼……</p><h4 id="2020-02-12"><a href="#2020-02-12" class="headerlink" title="2020-02-12"></a>2020-02-12</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-02-11-15814050379288%20.jpg" alt=""></p><h4 id="2020-02-11"><a href="#2020-02-11" class="headerlink" title="2020-02-11"></a>2020-02-11</h4><hr><p>和老婆吵架了…事后很后悔不该不让着她…想送她一个项链哄哄她…可是又不知道买多长的…于是…晚上趁老婆熟睡的时候…偷偷拿绳子在她脖子上量…结果…她醒了</p><h4 id="2020-02-10"><a href="#2020-02-10" class="headerlink" title="2020-02-10"></a>2020-02-10</h4><hr><p>作业做了很久，顺手打开收音机，一个温柔的声音传出：“如果肤色粉红，脸上的绒毛细嫩柔软，那么说明很健康……”听到这里，忍不住摸了自己的脸，对镜顾盼，再笑一笑，样子健康可爱。这时，又听播音员说道：“好，听众朋友，这次我们的《养猪知识讲座》就到这里。”</p><h4 id="2020-02-09"><a href="#2020-02-09" class="headerlink" title="2020-02-09"></a>2020-02-09</h4><hr><p>老师正在讲课，看到两个学生枕着书睡觉，其中一个是成绩优秀的学生，一个是差生。教师把那个差生拉起来骂道：“你这个不思上进的家伙，一看书就睡觉，你看人家连睡觉也在看书。”</p><h4 id="2020-02-08"><a href="#2020-02-08" class="headerlink" title="2020-02-08"></a>2020-02-08</h4><hr><p>晚上回家，听到巷子有哭声，靠近一看，原来是一衣衫不整的女子在哭。问怎么了，小姐答：“我被色狼侵犯了！”我：“没事吧？”小姐答：“他突然从背后抓住我的胸部，然后就把我放了……”我：“那还哭什么呢？”小姐答：“因为……那色狼居然说，真倒霉，竟然抱到个男的。”</p><h4 id="2020-02-07"><a href="#2020-02-07" class="headerlink" title="2020-02-07"></a>2020-02-07</h4><hr><p>一天和同事出去吃早餐，同事点了担担面，加鸡蛋，面盛上来之后同事没看到面便问：”我的蛋呢？“服务员很自然的答道：“在下面。”</p><h4 id="2020-02-06"><a href="#2020-02-06" class="headerlink" title="2020-02-06"></a>2020-02-06</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-02-06-15809864720645%20.jpg" alt=""></p><h4 id="2020-02-05"><a href="#2020-02-05" class="headerlink" title="2020-02-05"></a>2020-02-05</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-02-05-15808686258647%20.jpg" alt=""></p><h4 id="2020-02-04"><a href="#2020-02-04" class="headerlink" title="2020-02-04"></a>2020-02-04</h4><hr><p>在自习室，由于最近要考试了，人满为患。一哥们儿好不容易发现个空位刚坐下，旁边是一妹子，那哥们儿就滔滔不绝的和妹子讲话：”妹子，你哪个院的啊？多大啦？”过了一会，妹子终于不耐烦了，扔下一句：”你有病啊？” 就走了。正当我暗地嘲笑那哥们儿热脸贴上冷屁股时，他淡定的掏出手机，拨打了一个电话号码：”喂？媳妇儿，座位已经占好了，嗯嗯，挨着的，快来吧”。</p><h4 id="2020-02-03"><a href="#2020-02-03" class="headerlink" title="2020-02-03"></a>2020-02-03</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-02-03-15806945311838%20.jpg" alt=""></p><h4 id="2020-02-02"><a href="#2020-02-02" class="headerlink" title="2020-02-02"></a>2020-02-02</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-02-02-15806302602502%20.jpg" alt=""></p><h4 id="2020-02-01"><a href="#2020-02-01" class="headerlink" title="2020-02-01"></a>2020-02-01</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-02-01-15805468784805%20.jpg" alt=""></p><h4 id="2020-01-31"><a href="#2020-01-31" class="headerlink" title="2020-01-31"></a>2020-01-31</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-01-31-15804689918441%20.jpg" alt=""></p><h4 id="2020-01-30"><a href="#2020-01-30" class="headerlink" title="2020-01-30"></a>2020-01-30</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-01-30-15803730035411%20.jpg" alt=""></p><h4 id="2020-01-29"><a href="#2020-01-29" class="headerlink" title="2020-01-29"></a>2020-01-29</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-01-29-15802665105931%20.jpg" alt=""></p><h4 id="2020-01-28"><a href="#2020-01-28" class="headerlink" title="2020-01-28"></a>2020-01-28</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-01-28-15802125083226%20.jpg" alt=""></p><h4 id="2020-01-27"><a href="#2020-01-27" class="headerlink" title="2020-01-27"></a>2020-01-27</h4><hr><p>王老汉想买彩票又不想出门，于是把两元钱冲进了马桶。</p><h4 id="2020-01-26"><a href="#2020-01-26" class="headerlink" title="2020-01-26"></a>2020-01-26</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-01-26-15800098847387%20.jpg" alt=""></p><h4 id="2020-01-25"><a href="#2020-01-25" class="headerlink" title="2020-01-25"></a>2020-01-25</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-01-25-15799448528178%20.png" alt=""></p><h4 id="2020-01-24"><a href="#2020-01-24" class="headerlink" title="2020-01-24"></a>2020-01-24</h4><hr><p>下午我爹骂我..后来情绪激动还扇了我一耳光，当时想缓解一下气氛，本来想说“爸，你饿吗，我给你弄点吃的吧？”结果一时嘴快说成了：“爸，你没吃饭是吧？”</p><h4 id="2020-01-23"><a href="#2020-01-23" class="headerlink" title="2020-01-23"></a>2020-01-23</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-01-23-15797455339931%20.jpg" alt=""></p><h4 id="2020-01-22"><a href="#2020-01-22" class="headerlink" title="2020-01-22"></a>2020-01-22</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-01-22-15796626823470%20.jpg" alt=""></p><h4 id="2020-01-21"><a href="#2020-01-21" class="headerlink" title="2020-01-21"></a>2020-01-21</h4><hr><p><img src="http://images.iamtaoxin.com/mweb/2020-01-21-15795728981536%20.jpg" alt=""></p><h4 id="2020-01-20"><a href="#2020-01-20" class="headerlink" title="2020-01-20"></a>2020-01-20</h4><hr><p>“小明，你来给大家念一下’软‘字的拼音念法。”</p><p>“日完——软！”</p><p>“不对！我怎么教的？小红，你来。”</p><p>“好的老师，日五晚——软！”</p><p>“你们这帮学生真是要气死我，小华你来！”</p><p>“嗯，应该是，日吾俺——软。”</p><p>“没有一个记性好的，一天天在想什么。老师最后再教一遍，跟我念：日五晚俺——软！”</p><p>“日五晚俺——软！”</p><h4 id="2020-01-19"><a href="#2020-01-19" class="headerlink" title="2020-01-19"></a>2020-01-19</h4><hr><p>儿子每天都笑得很开心。我问儿子：“为什么你天天都那么开心？”老公在旁边说：“因为他没老婆。”</p><h4 id="2020-01-18"><a href="#2020-01-18" class="headerlink" title="2020-01-18"></a>2020-01-18</h4><hr><p>某人在精神病院实习，忽然一神经病患者手持一把菜刀向他追来，这人转头就跑，直到跑到一条死胡同，心想这下完了，那个病人说：给你刀，该你追我了。</p><h4 id="2020-01-17"><a href="#2020-01-17" class="headerlink" title="2020-01-17"></a>2020-01-17</h4><hr><p><img src="https://cdn.nlark.com/yuque/0/2020/png/263309/1579225189121-fad62bb7-3e6d-42c9-b5bb-98b1328574b6.png" alt=""></p><h4 id="2020-01-16"><a href="#2020-01-16" class="headerlink" title="2020-01-16"></a>2020-01-16</h4><hr><p>刚刚无聊，我试着给 10086 发信息：“我想你了。”</p><p>没想到 10086 真的给回信息了：“来找我啊，死鬼！”</p><p>我吓得赶紧放下了爸爸的手机。</p><h4 id="2020-01-15"><a href="#2020-01-15" class="headerlink" title="2020-01-15"></a>2020-01-15</h4><hr><p><img src="http://images.iamtaoxin.com/2020/01/15/15790525928034.jpg" alt=""></p><h4 id="2020-01-14"><a href="#2020-01-14" class="headerlink" title="2020-01-14"></a>2020-01-14</h4><hr><p>今天上班无聊中在玩手机，突然看到老板过来了，我就匆忙把手机收起来，一不小心把手机掉地上了，我还慌乱中，老板弯腰帮我把手机捡了起来，然后跟我说了句我这辈子都能记住的话。他说:没事，你玩你的，只要你把事情做好了，我不会说你，没必要做样子给我看，我也不喜欢别人只做样子；今天我是你老板，说不定哪天我破产，你发达了，我就要给你打工呢？做人实实在在就好……结果第二天我因为穿运动鞋被开除了！</p><h4 id="2020-01-13"><a href="#2020-01-13" class="headerlink" title="2020-01-13"></a>2020-01-13</h4><hr><p>我问爸爸:”为什么我只有大伯，二伯，四叔，五叔?为什么没有三叔?我三叔呢?死了吗？” 爸爸抬手一耳刮子给我抽懵了。</p><h4 id="2020-01-12"><a href="#2020-01-12" class="headerlink" title="2020-01-12"></a>2020-01-12</h4><hr><p>最近来亲戚了，不舒服就和男朋友闹别扭，持续了一周了，最近两天死皮赖脸的缠着我！我懒得搭理他，就指了指坏掉的空调说道：男人都是大猪蹄子，就和破空调一样，我热了偏要吹热风，我冷了偏要吹凉风！男朋友也怒了，说到：你连空调都不如，最起码它知道吹。</p><h4 id="2020-01-11"><a href="#2020-01-11" class="headerlink" title="2020-01-11"></a>2020-01-11</h4><hr><p>在某个风和日丽的下午，班主任没在，我们逃课上网，刚翻过墙，边上是一银行。一辆运钞车，两名特警拿枪指着我们问：‘‘干什么的？’’我们没见过这阵式，当时就吓傻了，弱弱的说：‘‘逃课。’’特警蜀黍说：‘‘滚回去。’’我们刚翻回去，看见校长站在墙边，对我们喊到：‘‘你们几个，干什么的？’’我同学反应特快，说：‘‘找人。’’校长大吼：‘‘给我滚出去。’’……</p><h4 id="2020-01-10"><a href="#2020-01-10" class="headerlink" title="2020-01-10"></a>2020-01-10</h4><hr><p>麋鹿在森林里迷路了</p><p>于是，给它的好朋友长颈鹿打电话：喂？我迷路啦！</p><p>长颈鹿：嗯，我长颈鹿啦…</p><h4 id="2020-01-09"><a href="#2020-01-09" class="headerlink" title="2020-01-09"></a>2020-01-09</h4><hr><p><img src="https://cdn.nlark.com/yuque/0/2020/png/263309/1578534964425-a12bb3a8-d2d9-42ca-8c6a-27c796037fc0.png" alt=""></p><h4 id="2020-01-08"><a href="#2020-01-08" class="headerlink" title="2020-01-08"></a>2020-01-08</h4><hr><p><img src="https://cdn.nlark.com/yuque/0/2020/png/263309/1578448565019-73b3a621-e528-4603-a2c6-221fbd2635e3.png" alt=""></p><h4 id="2020-01-07"><a href="#2020-01-07" class="headerlink" title="2020-01-07"></a>2020-01-07</h4><hr><p>老婆做了一个新发型，我看了忧伤的说：说好了一起到白头，你却半路焗了油。正在厨房忙碌的妈妈听到出来说：儿子，知足吧，我也曾对你爸说过，说好一起到白头的，他却半路秃了瓢……</p><h4 id="2020-01-06"><a href="#2020-01-06" class="headerlink" title="2020-01-06"></a>2020-01-06</h4><hr><p><img src="https://cdn.nlark.com/yuque/0/2020/png/263309/1578276103590-3ce5f6b2-d0a3-4953-8e80-1c55ab6207d9.png" alt=""></p><h4 id="2020-01-05"><a href="#2020-01-05" class="headerlink" title="2020-01-05"></a>2020-01-05</h4><hr><p><img src="https://cdn.nlark.com/yuque/0/2020/png/263309/1578233895274-f1a618f0-01ad-4951-9ba5-302d76815d3c.png" alt=""></p><h4 id="2020-01-04"><a href="#2020-01-04" class="headerlink" title="2020-01-04"></a>2020-01-04</h4><hr><p>一个农夫的女儿实在太丑了，他只好让她去玉米地当稻草人吓唬乌鸦。结果，她不仅吓走了乌鸦，甚至有三只乌鸦吓得把一些玉米送了回来。</p><h4 id="2020-01-03"><a href="#2020-01-03" class="headerlink" title="2020-01-03"></a>2020-01-03</h4><hr><p>有个老头子去看病，医生给他开了一副药然后对他说：”药效十二小时”。老头子点了头就笑着走了，老头子边走边笑，回到家还在不停的笑啊笑。家人奇怪就问：“你怎么回事啊”老头说：“尼玛，这医生开的什么药啊，要笑十二个小时，笑得快累死了”</p><h4 id="2020-01-02"><a href="#2020-01-02" class="headerlink" title="2020-01-02"></a>2020-01-02</h4><p>女：有三套房吗？</p><p>男：没有！</p><p>女：有奔驰、宝马吗？</p><p>男：没有！</p><p>女：有 7 位数存款吗？</p><p>男：没有！</p><p>女：那你有啥？</p><p>男：我………</p><p>女转身就走。突然男的说：我管理几百人。其中有很多律师、教授、企业家，还有很多帅哥美女。</p><p>女立刻回头抱住男的腰，满脸崇拜地说道：死鬼，你不早说，这就够了！！那你是什么公司老总？</p><p>男：我是群主</p><h4 id="2020-01-01"><a href="#2020-01-01" class="headerlink" title="2020-01-01"></a>2020-01-01</h4><hr><p>某人在精神病院实习，忽然一神经病患者手持一把菜刀向他追来，这人转头就跑，直到跑到一条死胡同，心想这下完了，那个病人说：给你刀，该你追我了。</p><h4 id="2019-12-31"><a href="#2019-12-31" class="headerlink" title="2019-12-31"></a>2019-12-31</h4><hr><p>跟我妈一块坐地铁，我在玩手机，旁边一个熊孩子一巴掌把我手机打掉了，然后他立即缩回他妈妈怀里，他妈妈说：他还是孩子，不懂事。说完了也不帮我把手机捡起来道个歉啥的。我二话不说捡起手机，然后对着小男孩后脑勺一巴掌扇过去，小男孩当时就哭了，他妈妈立马就急了，我直接缩回我妈怀里，我妈来了句：他还是孩子，不懂事。</p><h4 id="2019-12-30"><a href="#2019-12-30" class="headerlink" title="2019-12-30"></a>2019-12-30</h4><hr><p><img src="https://cdn.nlark.com/yuque/0/2019/png/263309/1577670588652-16ed97e5-7fb8-4284-89b9-4c351ce9689a.png" alt=""></p><h4 id="2019-12-29"><a href="#2019-12-29" class="headerlink" title="2019-12-29"></a>2019-12-29</h4><hr><p><img src="https://cdn.nlark.com/yuque/0/2019/png/263309/1577585352334-6aeabb04-367f-49ef-b33f-4361054adb45.png" alt=""></p><h4 id="2019-12-28"><a href="#2019-12-28" class="headerlink" title="2019-12-28"></a>2019-12-28</h4><hr><p>一名劫匪慌忙中窜上了一辆车的后座，上车后发现主驾和副驾的一男一女疑惑地回头看着他，他立即拔出枪威胁到“赶快开车，甩掉后面的警车，否则老子一枪崩了你！”于是副驾上的男人转过脸对那女的说“大姐，别慌，听我口令把刚才的动作再练习一遍，挂一档，轻松离合，轻踩油门，走…走，哎 走…哎，哎，对，走走…</p><h4 id="2019-12-27"><a href="#2019-12-27" class="headerlink" title="2019-12-27"></a>2019-12-27</h4><hr><p><img src="https://cdn.nlark.com/yuque/0/2019/png/263309/1577417054900-69392395-0663-4071-978b-1e6303138398.png" alt=""></p><h4 id="2019-12-26"><a href="#2019-12-26" class="headerlink" title="2019-12-26"></a>2019-12-26</h4><hr><p>悟空和唐僧一起上某卫视非诚勿扰,悟空上台,24 盏灯全灭。理由:1.没房没车只有一根破棍. 2.保镖职业危险.3.动不动打妖精,对女生不温柔. 4.坐过牢,曾被压五指山下 500 年。唐僧上台，哗!灯全亮。 理由:1.公务员； 2.皇上兄弟，后台最硬 3.精通梵文等外语 4.长得帅 5.最关键一点：有宝马！</p><h4 id="2019-12-25"><a href="#2019-12-25" class="headerlink" title="2019-12-25"></a>2019-12-25</h4><hr><p><img src="https://cdn.nlark.com/yuque/0/2019/png/263309/1577239627558-ef1e74e3-24d3-4a6e-8994-5f57a606202a.png" alt=""></p><h4 id="2019-12-24"><a href="#2019-12-24" class="headerlink" title="2019-12-24"></a>2019-12-24</h4><hr><p>一个猎人开枪打了一只狐狸，然后猎人死了。狐狸说哈哈哈，我是反射狐。</p><h4 id="2019-12-23"><a href="#2019-12-23" class="headerlink" title="2019-12-23"></a>2019-12-23</h4><hr><p><img src="https://cdn.nlark.com/yuque/0/2019/png/263309/1577065908371-e0417357-79bf-4135-908a-5ee8b12a5a3e.png" alt=""></p><h4 id="2019-12-22"><a href="#2019-12-22" class="headerlink" title="2019-12-22"></a>2019-12-22</h4><hr><p>小时候我妈打我，我就哭，我妈就说：不准哭，再哭还打你，然后我就不敢再哭了。然后下次打我我就不哭她说：哎哟，皮长厚了，叫你不哭，叫你不哭。然后我被打的更惨了。妈，你开心就好。</p><h4 id="2019-12-21"><a href="#2019-12-21" class="headerlink" title="2019-12-21"></a>2019-12-21</h4><hr><p><img src="https://cdn.nlark.com/yuque/0/2019/png/263309/1576901482877-1e98f366-1fe2-45a6-ae27-674223916e56.png" alt=""></p><h4 id="2019-12-20"><a href="#2019-12-20" class="headerlink" title="2019-12-20"></a>2019-12-20</h4><hr><p><img src="https://cdn.nlark.com/yuque/0/2019/png/263309/1576805664600-de5e07e8-e3dd-452f-b25f-bee3124fa822.png" alt=""></p><h4 id="2019-12-19"><a href="#2019-12-19" class="headerlink" title="2019-12-19"></a>2019-12-19</h4><hr><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/263309/1576719431803-ac272214-ef99-4e71-882d-b4b05365ee4b.jpeg" alt=""></p><h4 id="2019-12-18"><a href="#2019-12-18" class="headerlink" title="2019-12-18"></a>2019-12-18</h4><hr><p>医院挂号处遇到一个让我心动的女孩，她排外队伍的最前头，我在她隔几人的身后。好几次鼓了鼓勇气想要走近搭讪，却都无功而返。眼瞅着她从小窗里拿出病例本转身向我这边走来，我知道这擦身而过或抱憾终生，这才红着脸怯生生地挤出几个字：“你有病吧？”</p><h4 id="2019-12-17"><a href="#2019-12-17" class="headerlink" title="2019-12-17"></a>2019-12-17</h4><hr><p>窗外，雨淅沥沥的下。她双眼望着我，“见家长吧。”我不禁心头一震，这么久了，她是第一次对我说这样的话，我眼泛泪花，有点哽咽，试探问道：“是不是有点早？”她情绪竟然有些激动：“还敢讨价还价！你已经两天没交作业了！叫家长！”</p><h4 id="2019-12-16"><a href="#2019-12-16" class="headerlink" title="2019-12-16"></a>2019-12-16</h4><hr><p>我一朋友去年算命说他今年命犯桃花，会被一个忽然出现的女人伤得很深，昨天他在拐角处被一大妈骑电动车撞了，现在还在医院里躺着。</p><h4 id="2019-12-15"><a href="#2019-12-15" class="headerlink" title="2019-12-15"></a>2019-12-15</h4><hr><p>一个体弱男经常在学校被人欺负，早上，被同班同学欺负，放学被别班欺负 于是有一天他偷偷带了一根绳子，跑到一个荒郊野外，把绳子挂在树上，然后………..</p><p>坐在上面当起了秋千，心情好多了</p><h4 id="2019-12-14"><a href="#2019-12-14" class="headerlink" title="2019-12-14"></a>2019-12-14</h4><hr><p>前些日子遇到位江湖大哥，大哥小腿两边各纹一条鲤鱼，颜色一红一黑，左边鱼头朝上，右边朝下，形态遒劲，面目狰狞，很是骇人。吃饭时终于有人问到了纹身的寓意，大哥点上一只烟，说：”我出生在 1976 年 3 月 15 日…”我们都竖起耳朵，等待着接下来注定血雨腥风的故事。大哥押口烟，接着说：”我是双鱼座”</p><h4 id="2019-12-13"><a href="#2019-12-13" class="headerlink" title="2019-12-13"></a>2019-12-13</h4><hr><p><img src="https://cdn.nlark.com/yuque/0/2019/png/263309/1576201171279-7aa76a9b-70cf-4846-a2b4-3ea2ce92c3ae.png" alt=""></p><h4 id="2019-12-12"><a href="#2019-12-12" class="headerlink" title="2019-12-12"></a>2019-12-12</h4><hr><p>同学一见面就跟我诉苦，说他前段时间总盗汗，一睡着就出汗，医院检查花了好几百，后来又找了个老中医开了十来副中药，喝了也不管用，而且一天比一天厉害。我问：“后来呢?咋治好的?”一问到这，我明显看到同学的嘴角一抽搐，愤愤道：“我换了个薄被子。”</p><h4 id="2019-12-11"><a href="#2019-12-11" class="headerlink" title="2019-12-11"></a>2019-12-11</h4><hr><p><img src="https://cdn.nlark.com/yuque/0/2019/png/263309/1576028658452-12e69506-681b-40b4-b853-6dd0fea921a4.png" alt=""></p><h4 id="2019-12-10"><a href="#2019-12-10" class="headerlink" title="2019-12-10"></a>2019-12-10</h4><hr><p>吃坏东西，几天持续拉肚子，和老公出去没多久又有感觉了，马上往回赶。途中一摩托车快速朝我们方向过来，惊吓着躲闪还是被带到了，受伤倒是木有，就是过程中放松了。结果是我听到摩托车大哥打电话说：“我把一个人撞出屎来了……” 笑尿了。。。撞出屎来了。。。。。</p><h4 id="2019-12-09"><a href="#2019-12-09" class="headerlink" title="2019-12-09"></a>2019-12-09</h4><hr><p>某人去厕所怎么也打不开马桶盖，着急就把屎拉在了马桶盖上，方便以后突然发现墙壁上有个按钮，就按了一下，没想到盖子突然弹开，把屎弹在天花板上。他很难为情，叫来服务员指着天花板：我给你 200 块钱你帮我把这个清理干净。服务员看了看天花板对他说：我给你 800 块钱你告诉我你是怎么把屎拉在天花板上的</p><h4 id="2019-12-08"><a href="#2019-12-08" class="headerlink" title="2019-12-08"></a>2019-12-08</h4><hr><p><img src="https://pic2.zhimg.com/v2-13ccd65ef45b58f54c5a48d90b7fd041_r.jpg" alt=""></p><h4 id="2019-12-07"><a href="#2019-12-07" class="headerlink" title="2019-12-07"></a>2019-12-07</h4><hr><p>下午肚子饿，看见同事桌上有瓶酸奶，想都没想就喝了，一会同事来了大叫到：“我的洗面奶怎么不见了！108 块啊！”哥没说话，只是默默的走向厕所，一顿抠嗓子，老难受了，把东西拼命的吐，直到吐出酸水，好不容易吐的差不多了，眼泪叭嚓滴回到座位上时，同事抱着一个瓶子 说：“吓死我了，洗面奶滚到桌子下了，我的酸奶怎么又不见了呢。”哥心里直骂：你奶奶个熊滴，喝你点酸奶，把人往死里整。</p><h4 id="2019-12-06"><a href="#2019-12-06" class="headerlink" title="2019-12-06"></a>2019-12-06</h4><hr><p>一个乞丐问大师：“大师，为什么我这么可怜，难道就这样乞讨一生吗？” 大师拿出一枚硬币，抛向空中，落在乞丐面前。“大师，您是说人生就像硬币一样，都会有正反面吗？” 大师：“拿着这块钱，再不滚我抽你。”</p><h4 id="2019-12-05"><a href="#2019-12-05" class="headerlink" title="2019-12-05"></a>2019-12-05</h4><hr><p><img src="https://pic4.zhimg.com/80/v2-59cfa25fbd8ac3f4dcf27c03f908ac2f_hd.jpg" alt=""></p><h4 id="2019-12-04"><a href="#2019-12-04" class="headerlink" title="2019-12-04"></a>2019-12-04</h4><hr><p>去加油，加油站的大姐说:“四百三十五”</p><p>老婆问:“抹个零，四百三行不行?”</p><p>我对她说:“别丢人，你以为买菜啊，还讲价。”</p><p>她说“不问问怎么知道行不行?”</p><p>我说“不用问，加油站能讲价我裸奔回家”。</p><p>大姐笑着看看我说“行，就收四百三。”</p><h4 id="2019-12-03"><a href="#2019-12-03" class="headerlink" title="2019-12-03"></a>2019-12-03</h4><hr><p>吃火锅，看见火锅店的墙上提醒，羊是自己养的，菜是自己种的油是自己榨的，提醒顾客放心使用。买单的时候我，悄悄告诉老板，钱是我自己印的，请放心使用，老板追了我好几条街没追上，真有意思，腿是我自己长的，想往哪里跑就往哪里跑。</p><h4 id="2019-12-02"><a href="#2019-12-02" class="headerlink" title="2019-12-02"></a>2019-12-02</h4><hr><p><img src="https://pic1.zhimg.com/80/v2-cb28de86d6e3d1e50b4498580d9f37bc_hd.jpg" alt=""></p><h4 id="2019-12-01"><a href="#2019-12-01" class="headerlink" title="2019-12-01"></a>2019-12-01</h4><hr><p>记得那年高考成绩出来时，一哥们的分数是 369，本科线 399，他当时那叫一个悲痛万分，悔不当初，恨不能用他 300 斤肥肉换 30 分!!!结果有人提醒他，399 是文科的本科线，你激动个啥!他一听，犹如柳暗花明又一村，查了一下理科本科线，妈的，370!</p><h4 id="2019-11-30"><a href="#2019-11-30" class="headerlink" title="2019-11-30"></a>2019-11-30</h4><hr><p>一位年轻妈妈抱着女儿进了医院。女儿天真地问：</p><p>“妈妈，我们来干嘛？”</p><p>妈妈说：“打针啊。”</p><p>女儿问：“干嘛要打针，针做错什么事了么？打针针不疼么？”</p><p>5 分钟后，女儿开始咆哮</p><p>“这是针打我！这是针打我！”</p><h4 id="2019-11-29"><a href="#2019-11-29" class="headerlink" title="2019-11-29"></a>2019-11-29</h4><hr><p>初三的时候班主任直接把办公地点换到班级里最后一排靠门的角落 那是一节化学课 由于上节化学课学了钠元素老师为了复习就问道“钠是什么” 大家默不作答 老师又很大声的说“钠！是！什！么！”就在这时班主任的手机在后排响了起来“钠是一条神奇的天路” 沉默了两秒后全班爆笑 当时化学老师的脸都绿了</p><h4 id="2019-11-28"><a href="#2019-11-28" class="headerlink" title="2019-11-28"></a>2019-11-28</h4><hr><p>高中时候，班里一哥们，1991 年生，不大，就是特老相….. 以下是他坐公交时发生的一点事情： 高二时候，这哥们座公交去学校，因为路途长，百无聊赖的时候，邻座的一个 35 岁左右的男人跟他搭话，那人张嘴就来句：“大哥去哪里？ 这哥们也许是平常遭遇这样的待遇多了，也并不万分惊奇，颇平静的回答：“三中”。那男人第二句话：“噢，去看孩子吧？孩子上学挺苦的……” 那哥们脸部抽搐了一下，没吭声。 第三句话：“大哥，你孩子上几年纪了？”那哥们是真烦了，也不解释，顺口来了句：“高一” 这个时候，经典出现了。那男人异常惊奇地瞪大眼睛看着那哥们，看了足足十秒钟，来了句:“大哥，那您结婚可是挺晚的啊！”</p><h4 id="2019-11-27"><a href="#2019-11-27" class="headerlink" title="2019-11-27"></a>2019-11-27</h4><hr><p><img src="https://pic3.zhimg.com/80/v2-08c4527778efcbbab953e4f8fdba5782_hd.jpg" alt=""></p><h4 id="2019-11-26"><a href="#2019-11-26" class="headerlink" title="2019-11-26"></a>2019-11-26</h4><hr><p>晚上去奶奶家吃火锅，饭桌上我加夹了一块排骨，不小心掉在地上了！</p><p>怪心疼的，就问我奶奶：“奶奶，你今天拖地了吗？”</p><p>奶奶说：“拖了，我每天早晨都拖地。”</p><p>然后我就放心的把排骨放到嘴里。</p><p>紧接着我奶奶又说：“你爷爷晚上泡脚的水我不倒，留着早晨拖地。。。”</p><h4 id="2019-11-25"><a href="#2019-11-25" class="headerlink" title="2019-11-25"></a>2019-11-25</h4><hr><p>有人问：“胡歌你演技这么好你怎么不上天呢？”</p><p>结果</p><p>胡歌提名飞天奖<strong>最佳男演员</strong>。</p><h4 id="2019-11-24"><a href="#2019-11-24" class="headerlink" title="2019-11-24"></a>2019-11-24</h4><hr><blockquote><p>名称</p></blockquote><p>问：什么名字，日本人听起来是日本名字，中国人一听就知道是中国人起的？</p><p>答：房屋中介。</p><h4 id="2019-11-23"><a href="#2019-11-23" class="headerlink" title="2019-11-23"></a>2019-11-23</h4><hr><p>小鸡：“为什么人类都有名字，而我们都叫做鸡？”</p><p>母鸡：“人活着的时候都有名字，死了就叫鬼罢了；我们鸡活着时没有名字，死了就有很多名了啦！”</p><p>小鸡：“什么名？”</p><p>母鸡：“炸鸡、咖喱鸡、白斩鸡、烧鸡、叫花鸡。。。”</p><h4 id="2019-11-22"><a href="#2019-11-22" class="headerlink" title="2019-11-22"></a>2019-11-22</h4><hr><p>我朋友有一次坐黑车，被交警拦下。</p><p>司机解释说：“我们俩是朋友，我知道他号码。”说着，便拨打我朋友手机。</p><p>因为我朋友坐他车好几次，所以互相留了号码，手机立刻响了。</p><p>他拿出手机，交警瞧了瞧，只见屏幕上显示”黑车司机”。</p><h4 id="2019-11-21"><a href="#2019-11-21" class="headerlink" title="2019-11-21"></a>2019-11-21</h4><hr><p><img src="https://pic3.zhimg.com/v2-106070f2659ccb95c6ab6b1a14ec981a_r.jpg" alt=""></p><h4 id="2019-11-20"><a href="#2019-11-20" class="headerlink" title="2019-11-20"></a>2019-11-20</h4><hr><p>小明和爸爸俩人坐公交车。</p><p>小明：爸爸，什么时候到啊?</p><p>爸爸：停了就到了。</p><p>小明：什么时候停啊?</p><p>爸爸：到了就停了。</p><p>。。。</p><h4 id="2019-11-19"><a href="#2019-11-19" class="headerlink" title="2019-11-19"></a>2019-11-19</h4><hr><p>“谁能想到，这名年仅 16 岁的少女，在四年前只是一个年仅 12 岁的少女。”</p><h4 id="2019-11-18"><a href="#2019-11-18" class="headerlink" title="2019-11-18"></a>2019-11-18</h4><hr><p>正在外面遛狗，忽然一个人把我的狗杀了。</p><p>我问：“为什么要杀我的狗？”</p><p>他回答：“有人花钱说要你狗命!”</p><p>。。。</p><p>没见到这么二的人，就跟他聊了一会。</p><p>他突然问到：“你有女朋友吗？”</p><p>我说：“还没呢！”</p><p>突然他就用刀子捅了过来，还说到：“对不起，单身狗也是狗！”</p><p>我说：“可是。。我有。。。男朋友。。。。啊”</p><p>他再捅一刀：“秀恩爱死的快”</p><p>。。。</p><h4 id="2019-11-17"><a href="#2019-11-17" class="headerlink" title="2019-11-17"></a>2019-11-17</h4><hr><p>有个小朋友我叫他跳个舞，他弱弱的说了句“我不会”。</p><p>我就说“男孩子要自信一点，大胆一点”。</p><p>结果他嚣张的喊了一句“老子不会”。</p><h4 id="2019-11-16"><a href="#2019-11-16" class="headerlink" title="2019-11-16"></a>2019-11-16</h4><hr><p><img src="https://pic2.zhimg.com/80/v2-0181aeaacab624dd919a81e78122ae73_hd.jpg" alt=""></p><h4 id="2019-11-15"><a href="#2019-11-15" class="headerlink" title="2019-11-15"></a>2019-11-15</h4><hr><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20190416/e0774731710543d69eedad3fb578cf6f.jpeg" alt=""></p><h4 id="2019-11-14"><a href="#2019-11-14" class="headerlink" title="2019-11-14"></a>2019-11-14</h4><hr><p>读初中时候，学校谈朋友都的很多。</p><p>一天，我爹给了我一张漂亮女人照片说：这是女孩子她妈妈照片，漂亮吧，那女儿一定更漂亮，今天爹告诉你个秘密，咱们家在你很小的时候给你定了娃娃亲，就是这女人的女儿，现在搬到外地了，你可别谈朋友，对不起人家啊，收好照片，等你考上大学就安排你们见面。</p><p>终于上大学了，今天在宿舍讲了我的故事，他们都表示不信。</p><p>于是我拿出了照片，结果我一宿舍童鞋看了一眼说：这特么这不是武藤兰么。</p><h4 id="2019-11-13"><a href="#2019-11-13" class="headerlink" title="2019-11-13"></a>2019-11-13</h4><hr><p><img src="http://images.iamtaoxin.com/2019-11-13-15736086251432.jpg" alt=""></p><h4 id="2019-11-12"><a href="#2019-11-12" class="headerlink" title="2019-11-12"></a>2019-11-12</h4><hr><p><img src="https://pic1.zhimg.com/v2-e26aedac284376acba6d7661b5595243_r.jpg" alt=""></p><h4 id="2019-11-11"><a href="#2019-11-11" class="headerlink" title="2019-11-11"></a>2019-11-11</h4><hr><p><img src="https://pic4.zhimg.com/v2-0cf50333860e27a58e33a60078655ff2_r.jpg" alt=""></p><h4 id="2019-11-10"><a href="#2019-11-10" class="headerlink" title="2019-11-10"></a>2019-11-10</h4><hr><p><img src="https://pic3.zhimg.com/80/v2-9393f7671d1ca10cf3850740b1814e62_hd.jpg" alt=""></p><h4 id="2019-11-09"><a href="#2019-11-09" class="headerlink" title="2019-11-09"></a>2019-11-09</h4><hr><p><img src="http://images.iamtaoxin.com/2019-11-09-IMG_1512.png" alt=""></p><h4 id="2019-11-08"><a href="#2019-11-08" class="headerlink" title="2019-11-08"></a>2019-11-08</h4><hr><p><img src="https://pic3.zhimg.com/v2-54a18b45781a3fb655b5a3bbf8b6f56a_r.jpg" alt=""></p><h4 id="2019-11-07"><a href="#2019-11-07" class="headerlink" title="2019-11-07"></a>2019-11-07</h4><hr><p>前天在公交上，和别人撞衫了，别问我谁穿更帅，丫的竟然是个小男孩！就这样众目睽睽之下，一大一小素未蒙面的俩个人穿着一样的衣服傻站在那，我已经很尴尬了。</p><p>那小孩看了我半天，好奇的问我：叔叔，你的衣服也是在奇奇宝贝屋买得吗？</p><h4 id="2019-11-06"><a href="#2019-11-06" class="headerlink" title="2019-11-06"></a>2019-11-06</h4><hr><p>下了出租车发现手机掉车上了，在雨中追了好长一截大喊：师傅等等，师傅等等！师傅停车了。这时发现手机拿在手上，于是对师傅说：下雨天路滑，您慢点开啊。师傅：……</p><h4 id="2019-11-05"><a href="#2019-11-05" class="headerlink" title="2019-11-05"></a>2019-11-05</h4><hr><p><img src="https://pic1.zhimg.com/80/e3ffe82f6d00287669f58663d2e6f2bc_hd.png" alt=""></p><h4 id="2019-11-04"><a href="#2019-11-04" class="headerlink" title="2019-11-04"></a>2019-11-04</h4><hr><p>入住酒店，房间烟味太重，打给前台，前台说：“您稍等我们来给您做无烟处理”</p><p>我心想现在科技好发达。</p><p>二分钟后来了个大叔，打开我房间所有窗户，然后走了。</p><h4 id="2019-11-03"><a href="#2019-11-03" class="headerlink" title="2019-11-03"></a>2019-11-03</h4><hr><p>老婆心血来潮要那个，老公笑了笑，掏出一百元丢给老婆，然后睡一边去了。</p><p>老婆：“给了钱就不做了?”</p><p>老公：“嗯!”</p><p>老婆：“那你说说这叫什么费用?”</p><p>老公：“保护费啊!”</p><p>老婆：“保护什么?”</p><p>老公：“肾!”</p><h4 id="2019-11-02"><a href="#2019-11-02" class="headerlink" title="2019-11-02"></a>2019-11-02</h4><hr><p>地铁上，一个男的觉得对面女孩很面熟，就一直盯着他看。</p><p>女孩被看烦了，就问：“你瞅啥?”</p><p>那男孩就说：“我觉着你很面熟，像我以前那个女朋友。”</p><p>那个女孩怒道：“我 TM 就是你以前那个女朋友。”</p><p>男孩懵比了。。。</p><h4 id="2019-11-01"><a href="#2019-11-01" class="headerlink" title="2019-11-01"></a>2019-11-01</h4><hr><p><img src="http://images.iamtaoxin.com/2019-11-01-15725992271485.jpg" alt=""></p><h4 id="2019-10-31"><a href="#2019-10-31" class="headerlink" title="2019-10-31"></a>2019-10-31</h4><hr><p><img src="https://pic4.zhimg.com/v2-1ab3ddff10f7b12b97edcd21f2af37a8_r.jpg" alt=""></p><h4 id="2019-10-30"><a href="#2019-10-30" class="headerlink" title="2019-10-30"></a>2019-10-30</h4><hr><p>足球教练在赛前对他的队员们面授机宜：“你们抢不到球，就往对方腿上踢！”</p><p>一队员忽然道：“比赛用的球去那儿了？”</p><p>另一队员：“不用找了，没球一样踢。”</p><h4 id="2019-10-29"><a href="#2019-10-29" class="headerlink" title="2019-10-29"></a>2019-10-29</h4><hr><p><img src="https://pic2.zhimg.com/80/v2-4f7a6d0baefdd4a6b242cb82ffb086f9_hd.jpg" alt=""></p><h4 id="2019-10-28"><a href="#2019-10-28" class="headerlink" title="2019-10-28"></a>2019-10-28</h4><hr><p><img src="https://pic1.zhimg.com/80/v2-ff620b6c0ace867cb553f1db27418db0_hd.jpg" alt=""></p><h4 id="2019-10-27"><a href="#2019-10-27" class="headerlink" title="2019-10-27"></a>2019-10-27</h4><hr><p>快躲起来</p><p><img src="https://pic1.zhimg.com/v2-514d397ee6ae9b987517b5db6d3b7c24_r.jpg" alt=""></p><h4 id="2019-10-26"><a href="#2019-10-26" class="headerlink" title="2019-10-26"></a>2019-10-26</h4><hr><p><img src="https://pic4.zhimg.com/7ab341028b06c41a6dbdc12ed0bc696f_r.jpg" alt=""></p><h4 id="2019-10-25"><a href="#2019-10-25" class="headerlink" title="2019-10-25"></a>2019-10-25</h4><hr><p>我是一个苦 b 的程序员，今晚加班到快通宵了，困得快睁不开眼了，女上司很关心，问我要不要吃宵夜。我没好气地说，宵夜就算了，能让我睡一觉就行了。女上司红着脸说了句讨厌啊，然后坐在我身边不动，好像距离我很近，搞得我很紧张，难道她发现我的程序出了 bug？</p><h4 id="2019-10-24"><a href="#2019-10-24" class="headerlink" title="2019-10-24"></a>2019-10-24</h4><hr><p>今天是 1024 程序猿节，首先祝广大猿们节日快乐，BUG 越写越多。下面来一个关于程序员的段子：</p><p>“你们用盗版的时候有想过做出这款软件的程序员吗？他们该如何养家糊口？”</p><p>“哈哈哈，别逗了，程序员哪有家要养啊！</p><h4 id="2019-10-23"><a href="#2019-10-23" class="headerlink" title="2019-10-23"></a>2019-10-23</h4><hr><p><strong>小白兔钓鱼记</strong></p><p>第一天，小白兔去河边钓鱼，什么也没钓到，回家了。</p><p>第二天，小白兔又去河边钓鱼，还是什么也没钓到，回家了。</p><p>第三天，小白兔刚到河边，一条大鱼从河里跳出来，冲着小白兔大叫：</p><p>你要是再敢用胡箩卜当鱼饵，我就扁死你！</p><h4 id="2019-10-22"><a href="#2019-10-22" class="headerlink" title="2019-10-22"></a>2019-10-22</h4><hr><p><img src="http://images.iamtaoxin.com/2019-10-22-%E6%88%AA%E5%B1%8F2019-10-22%E4%B8%8B%E5%8D%883.24.31.png" alt=""></p><h4 id="2019-10-21"><a href="#2019-10-21" class="headerlink" title="2019-10-21"></a>2019-10-21</h4><hr><p>今天带 2 岁儿子第一次吃臭豆腐。</p><p>儿子咬了一口：“妈妈，这是谁拉的，这么好吃！”老公听了后说：“这几天好好看着他，别自己拉屎吃了！</p><h4 id="2019-10-20"><a href="#2019-10-20" class="headerlink" title="2019-10-20"></a>2019-10-20</h4><hr><p>一天，美国、英国和大陆的特种部队在一起训练，为了比出谁是最优秀的，他们举办了一个比赛——把一只兔子放进森林里，三个部队谁在一天之内找到它就是最强的。只见美国特种兵立刻开会制定方案，迅速展开了地毯式搜索，结果一无所获；英国特种兵在森林外面一字排开，拿着个喇叭对里面喊：里面的兔子听好了，你已经被我们包围了，快点自己投降吧！结果当然什么都没出现；而大陆的特种兵似乎特别有把握，一整天在那里聊天赌博，一直到黄昏的时候，士兵们才拿起家伙懒洋洋地走进了森林，在一阵动物的惨叫声后，他们牵着一头鼻青脸肿的熊走了出来，只见那只熊不停地说：“别打了，我是兔子。”</p><h4 id="2019-10-19"><a href="#2019-10-19" class="headerlink" title="2019-10-19"></a>2019-10-19</h4><hr><p><img src="https://pic3.zhimg.com/80/f0519f84fc98664e3a777cd4d45413a6_hd.png" alt=""></p><h4 id="2019-10-18"><a href="#2019-10-18" class="headerlink" title="2019-10-18"></a>2019-10-18</h4><hr><p><img src="https://pic3.zhimg.com/80/v2-b0993c28c7da2d0fd1138e50487d6bba_hd.jpg" alt=""></p><h4 id="2019-10-17"><a href="#2019-10-17" class="headerlink" title="2019-10-17"></a>2019-10-17</h4><hr><p>小时候邻居大爷骗我说:“其实轻功很简单，就是左脚用力的踩一下右脚，然后往上一跳就行了。”</p><p>现在看来这是多么明显的谎言啊，可我当时还真就信了。</p><p>回家以后接着试了一下，结果给我疼哭了。</p><p>我妈听到哭声立刻冲进了屋里:“怎么了？”</p><p>然后</p><p>我爸一脸懵逼的说道:“不知道啊，他进来以后只说了一句爸爸你看，然后就把自己踩哭了。”</p><h4 id="2019-10-16"><a href="#2019-10-16" class="headerlink" title="2019-10-16"></a>2019-10-16</h4><hr><p><img src="https://pic1.zhimg.com/ad922ebb30cb34dadae5ac15aeb5aa4c_r.jpg" alt=""></p><h4 id="2019-10-15"><a href="#2019-10-15" class="headerlink" title="2019-10-15"></a>2019-10-15</h4><hr><p>一位老司机语重心长的对一个刚上路的小伙子说道：“你知道这路上什么车最惹不起么？”。“法拉利？保时捷？。。。”小伙子脱口而出。老司机摇了摇头说：“是五菱宏光。”小伙不解，老司机看了看自己的瘸腿，淡淡的说了句：“因为你永远不知道他车上会下来多少人。。。。”</p><h4 id="2019-10-14"><a href="#2019-10-14" class="headerlink" title="2019-10-14"></a>2019-10-14</h4><hr><p><img src="https://pic3.zhimg.com/80/5b06cd905cc30caca9a8452579dc912e_hd.png" alt=""></p><h4 id="2019-10-13"><a href="#2019-10-13" class="headerlink" title="2019-10-13"></a>2019-10-13</h4><hr><p>有次在学校的浴室澡堂子洗澡，水特别烫，洗完回寝，我随口说了一句：“真是的，今天浴室的水烫死人了。。。” 室友噌的一下从床上探出身子，惊恐里还有点小激动，：“啊？！真的吗？谁呀谁呀？？”</p><h4 id="2019-10-12"><a href="#2019-10-12" class="headerlink" title="2019-10-12"></a>2019-10-12</h4><hr><p><img src="https://pic2.zhimg.com/80/v2-d63494f21a62dcbac17dc380ab1298e9_hd.jpg" alt=""></p><h4 id="2019-10-11"><a href="#2019-10-11" class="headerlink" title="2019-10-11"></a>2019-10-11</h4><hr><p><img src="https://pic3.zhimg.com/80/v2-fd839686a288e5017d4072ad377dc3c4_hd.jpg" alt=""></p><h4 id="2019-10-10"><a href="#2019-10-10" class="headerlink" title="2019-10-10"></a>2019-10-10</h4><hr><p>一天，孟婆在煮孟婆汤，想尝尝咸淡，喝了一口，满意地笑了。想尝尝咸淡，喝了一口，满意地笑了。想尝尝咸淡，喝了一口，满意地笑了。想尝尝咸淡，喝了一口，满意地笑了。想尝尝咸淡，喝了一口，满意地笑了。想尝尝咸淡，喝了一口，满意地笑了…</p><h4 id="2019-10-09"><a href="#2019-10-09" class="headerlink" title="2019-10-09"></a>2019-10-09</h4><p><img src="https://pic4.zhimg.com/80/v2-e31cf61876d31932cd59fa325244358f_hd.jpg" alt=""></p><h4 id="2019-10-08"><a href="#2019-10-08" class="headerlink" title="2019-10-08"></a>2019-10-08</h4><hr><p>我们隔壁有一个 80 多岁的大爷，昨天在小区树下发现一条黑色的蛇，都冻僵了！</p><p>他就把蛇揣到怀里面，想给它一点温暖。</p><p>今天一大早他就在树上挂了个牌子:</p><p>“不准随地大小便”</p><h4 id="2019-10-07"><a href="#2019-10-07" class="headerlink" title="2019-10-07"></a>2019-10-07</h4><hr><p><img src="https://pic4.zhimg.com/80/v2-fadc7ca055e1ef396c906b0182ff8fa7_hd.jpg" alt=""></p><h4 id="2019-10-06"><a href="#2019-10-06" class="headerlink" title="2019-10-06"></a>2019-10-06</h4><hr><p>昨日，某高校自主招生复试举行，笔试和面试两轮测试。1 名考生对阵 4 名专家，一些考题让考生感到措手不及。考官：“请你出一道题把我难住，前提是你知道答案。” 该考生被问懵，反问考官：“你知道我爷爷叫什么名字吗？”</p><h4 id="2019-10-05"><a href="#2019-10-05" class="headerlink" title="2019-10-05"></a>2019-10-05</h4><hr><p>当你觉得自己很牛逼的时候， 当你以为自己很了不起的时候， 就要冷静下来想一想</p><p>……</p><p>怎么让全世界都知道这个事</p><h4 id="2019-10-04"><a href="#2019-10-04" class="headerlink" title="2019-10-04"></a>2019-10-04</h4><hr><p>跟女朋友一起去三亚旅游，在海滩一颗树下乘凉，仰头看到树上有几只鸟，然后，突然几滴白色的鸟屎掉我脸上。</p><p>然后女朋友说，你看你，防晒都没抹均匀，后面你们懂得！</p><h4 id="2019-10-03"><a href="#2019-10-03" class="headerlink" title="2019-10-03"></a>2019-10-03</h4><hr><p>一个真实的段子。我：xx，你外甥奶粉吃 pre 段还是 1 段的？徒弟：不间断！我：。。。</p><h4 id="2019-10-02"><a href="#2019-10-02" class="headerlink" title="2019-10-02"></a>2019-10-02</h4><hr><p>老师说:“今天的语文作业是《致老师》”。小明举手道:“老师,您还是去医院吧,我们治不了。”</p><h4 id="2019-10-01"><a href="#2019-10-01" class="headerlink" title="2019-10-01"></a>2019-10-01</h4><hr><p>登山者与老和尚喝茶。我说:我放不下些事,放不下一些人。他说:没有什么东西是放不下的。我说:可我偏偏放不下。他说:你不是喜欢喝茶吗，说完就递我一个茶杯然后往里面倒热水,一直倒到热水溢出来。真尼玛疼啊！我就把一整壶开水浇在老和尚脑袋上了,警察同志,全部过程就是这样,是他先烫的我。。。</p><h4 id="2019-09-30"><a href="#2019-09-30" class="headerlink" title="2019-09-30"></a>2019-09-30</h4><hr><p>领导提拔一美女后，几次要潜规则该美女，都被她以各种理由拒绝了。</p><p>对此领导非常生气，过几天就把该美女职位降了。</p><p>其他人对此颇不理解，问领导原因。</p><p>领导说：“该女在领导面前放不开，难以胜任。”</p><h4 id="2019-09-29"><a href="#2019-09-29" class="headerlink" title="2019-09-29"></a>2019-09-29</h4><hr><p>程序员见到科比，非常崇拜，于是就有下面一段对话</p><p>程序员：“你为什么这么成功，能告诉我成功的秘诀是什么吗？”</p><p>科比：“你见过城市凌晨四点的样子吗？”</p><p>程序员：“嗯，这个时候我一般在写代码！”</p><p>科比：“。。。。。”</p><h4 id="2019-09-28"><a href="#2019-09-28" class="headerlink" title="2019-09-28"></a>2019-09-28</h4><hr><p>第一个用蚂蚁花被（呗）的男人</p><p><img src="https://pic2.zhimg.com/80/v2-982a5041d1989fba2d7c9ed57440b6a5_hd.jpg" alt=""></p><h4 id="2019-09-27"><a href="#2019-09-27" class="headerlink" title="2019-09-27"></a>2019-09-27</h4><hr><p>一个女人总在白天丈夫出门工作时搞外遇。</p><p>一天，她 9 岁的儿子刚好回家，目睹了这一切，他躲进了卧室的衣柜里。</p><p>突然，丈夫也回家了。</p><p>她赶紧让情人躲进衣柜里，却不知道这里已经躲了一个男孩。</p><p>男孩：“这里好黑啊。”</p><p>男人：“是啊。”</p><p>“我有个棒球。”</p><p>“不错。”</p><p>“你想买吗？”</p><p>“不了吧。”</p><p>“我爸在外面呢。”</p><p>“行吧，多少钱？”</p><p>“300 块。”</p><p>。。。</p><p>过了几个星期，男孩和男人再次在衣柜里见面了。</p><p>男孩：“这里好黑啊。”</p><p>男人：“是啊。”</p><p>“我有个棒球手套。”</p><p>回忆起上次的谈话，男人无奈的问道：“多少钱啊？”</p><p>“700 块。”</p><p>。。。</p><p>又过了几天，男孩的父亲对他说：“把棒球手套拿上，咱们出去玩一会儿。”</p><p>男孩说：“不行啊，我把棒球和手套都卖掉了。”</p><p>父亲问：“你卖了多少钱？”</p><p>“1000 块。”</p><p>父亲：“你怎么能这么坑自己的朋友？快和我去教堂忏悔！”</p><p>他们一起到了教堂，男孩走进告解室。</p><p>男孩：“这里好黑啊。”</p><p>神父：“你他妈有完没完？！再说一句试试！”</p>]]></content>
      
      
      <categories>
          
          <category> 代码之外 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一笑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 Node.js 中的 Cron 定时任务</title>
      <link href="/2020/03/02/node-cron/"/>
      <url>/2020/03/02/node-cron/</url>
      
        <content type="html"><![CDATA[<p>cron 是一个 linux 下的定时执行工具，可以在无需人工干预的情况下运行作业。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g <span class="token function">cron</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Use"><a href="#Use" class="headerlink" title="Use"></a>Use</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> cronJob <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cron"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>CronJob<span class="token punctuation">;</span><span class="token comment">//每秒钟执行一次</span><span class="token keyword">new</span> <span class="token class-name">cronJob</span><span class="token punctuation">(</span>  <span class="token string">"* * * * * *"</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//your job code here</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string">"Asia/Chongqing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每隔30秒执行一次，会在0秒和30秒处执行</span><span class="token keyword">new</span> <span class="token class-name">cronJob</span><span class="token punctuation">(</span>  <span class="token string">"*/30 * * * * *"</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//your job code here</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string">"Asia/Chongqing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从早上8点到下午18点，每隔半个小时执行一次，会在0分和30分处执行</span><span class="token keyword">new</span> <span class="token class-name">cronJob</span><span class="token punctuation">(</span>  <span class="token string">"* */30 8-18 * * *"</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//your job code here</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string">"Asia/Chongqing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在每天的10点和18点的第26分钟各执行一次</span><span class="token keyword">new</span> <span class="token class-name">cronJob</span><span class="token punctuation">(</span>  <span class="token string">"* 26 10,18 * * *"</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//your job code here</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string">"Asia/Chongqing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不立即执行，人工启动</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> jobid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">cronJob</span><span class="token punctuation">(</span>  <span class="token string">"* 26 10,18 * * *"</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//your job code here</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string">"Asia/Chongqing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Asia/Shanghai</span>jobid<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="cron-表达式"><a href="#cron-表达式" class="headerlink" title="cron 表达式"></a>cron 表达式</h4><table><thead><tr><th>顺序</th><th>秒</th><th>分钟</th><th>小时</th><th>日期</th><th>月份</th><th>星期</th><th>年（可选）</th></tr></thead><tbody><tr><td>取值</td><td>0-59</td><td>0-59</td><td>0-23</td><td>1-30（31）</td><td>1-12</td><td>1-7</td><td></td></tr><tr><td>允许特殊字符</td><td>,-*/</td><td>,-*/</td><td>,-*/</td><td>,-*/?LWC</td><td>,-*/</td><td>,-*/L#C</td><td>1970-2099 , - * /</td></tr></tbody></table><h4 id="字段含义"><a href="#字段含义" class="headerlink" title="字段含义"></a>字段含义</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">*</span>：代表所有可能的值<span class="token operator">-</span>：指定范围<span class="token punctuation">,</span>：列出枚举  例如在分钟里，<span class="token string">"5,15"</span>表示<span class="token number">5</span>分钟和<span class="token number">20</span>分钟触发<span class="token operator">/</span>：指定增量  例如在分钟里，<span class="token string">"3/15"</span>表示从<span class="token number">3</span>分钟开始，没隔<span class="token number">15</span>分钟执行一次<span class="token operator">?</span>：表示没有具体的值，使用<span class="token operator">?</span>要注意冲突<span class="token constant">L</span>：表示last，例如星期中表示<span class="token number">7</span>或<span class="token constant">SAT</span>，月份中表示最后一天<span class="token number">31</span>或<span class="token number">30</span>，<span class="token number">6</span>L表示这个月倒数第<span class="token number">6</span>天，<span class="token constant">FRIL</span>表示这个月的最后一个星期五<span class="token constant">W</span>：只能用在月份中，表示最接近指定天的工作日#：只能用在星期中，表示这个月的第几个周几，例如<span class="token number">6</span>#<span class="token number">3</span>表示这个月的第<span class="token number">3</span>个周五<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-none"><code class="language-none">0 * * * * ? 每1分钟触发一次0 0 * * * ? 每天每1小时触发一次0 0 10 * * ? 每天10点触发一次0 * 14 * * ? 在每天下午2点到下午2:59期间的每1分钟触发0 30 9 1 * ? 每月1号上午9点半0 15 10 15 * ? 每月15日上午10:15触发*&#x2F;5 * * * * ? 每隔5秒执行一次0 *&#x2F;1 * * * ? 每隔1分钟执行一次0 0 5-15 * * ? 每天5-15点整点触发0 0&#x2F;3 * * * ? 每三分钟触发一次0 0 0 1 * ?  每月1号凌晨执行一次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>你可以在 <a href="http://cron.qqe2.com/">http://cron.qqe2.com/</a> 中验证 cron 表达式</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue + Qiankun 快速实现前端微服务</title>
      <link href="/2020/03/01/vue-qiankun/"/>
      <url>/2020/03/01/vue-qiankun/</url>
      
        <content type="html"><![CDATA[<p>本文介绍 Vue 项目如何实现前端微服务</p><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><h3 id="什么是微前端"><a href="#什么是微前端" class="headerlink" title="什么是微前端"></a>什么是微前端</h3><blockquote><p>Techniques, strategies and recipes for building a modern web app with multiple teams that can ship features independently. – Micro Frontends</p><p>微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。</p></blockquote><p>更多关于微前端的相关介绍，推荐大家可以去看这几篇文章：</p><ul><li><a href="https://micro-frontends.org/">Micro Frontends</a></li><li><a href="https://martinfowler.com/articles/micro-frontends.html">Micro Frontends from martinfowler.com</a></li><li><a href="https://zhuanlan.zhihu.com/p/78362028">可能是你见过最完善的微前端解决方案</a></li><li><a href="https://zhuanlan.zhihu.com/p/95085796">微前端的核心价值</a></li></ul><h3 id="qiankun"><a href="#qiankun" class="headerlink" title="qiankun"></a>qiankun</h3><p>qiankun 是蚂蚁金服开源的一套完整的微前端解决方案。具体描述可查看  <a href="https://qiankun.umijs.org/zh/">文档</a>  和  <a href="https://github.com/umijs/qiankun">Github</a>。</p><p>下面将通过一个微服务 Demo 介绍 Vue 项目如何接入 qiankun，代码地址：<a href="[https://github.com/taosin/micro-front-vue](https://github.com/taosin/micro-front-vue)">micro-front-vue</a></p><h2 id="二、配置主应用"><a href="#二、配置主应用" class="headerlink" title="二、配置主应用"></a>二、配置主应用</h2><ol><li>使用 vue cli 快速创建主应用；</li><li>安装 qiankun</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> qiankun <span class="token comment"># 或者 npm i qiankun -S</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>调整主应用  <code>main.js</code>  文件：具体如下：</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> registerMicroApps<span class="token punctuation">,</span> setDefaultMountApp<span class="token punctuation">,</span> start <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"qiankun"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">/** * 渲染函数 * appContent 子应用html内容 * loading 子应用加载效果，可选 */</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> appContent<span class="token punctuation">,</span> loading <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>app<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      el<span class="token operator">:</span> <span class="token string">"#container"</span><span class="token punctuation">,</span>      router<span class="token punctuation">,</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          content<span class="token operator">:</span> appContent<span class="token punctuation">,</span>          loading        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>          props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            content<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">,</span>            loading<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loading          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    app<span class="token punctuation">.</span>content <span class="token operator">=</span> appContent<span class="token punctuation">;</span>    app<span class="token punctuation">.</span>loading <span class="token operator">=</span> loading<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 路由监听 * @param &#123;*&#125; routerPrefix 前缀 */</span><span class="token keyword">function</span> <span class="token function">genActiveRule</span><span class="token punctuation">(</span><span class="token parameter">routerPrefix</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token parameter">location</span> <span class="token operator">=></span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>routerPrefix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">initApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> appContent<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">initApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 传入子应用的数据</span><span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    auth<span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  fns<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">"_LOGIN"</span><span class="token punctuation">,</span>      <span class="token function">_LOGIN</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">父应用返回信息</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 注册子应用</span><span class="token function">registerMicroApps</span><span class="token punctuation">(</span>  <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">"sub-app-1"</span><span class="token punctuation">,</span>      entry<span class="token operator">:</span> <span class="token string">"//localhost:8091"</span><span class="token punctuation">,</span>      render<span class="token punctuation">,</span>      activeRule<span class="token operator">:</span> <span class="token function">genActiveRule</span><span class="token punctuation">(</span><span class="token string">"/app1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      props<span class="token operator">:</span> msg    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">"sub-app-2"</span><span class="token punctuation">,</span>      entry<span class="token operator">:</span> <span class="token string">"//localhost:8092"</span><span class="token punctuation">,</span>      render<span class="token punctuation">,</span>      activeRule<span class="token operator">:</span> <span class="token function">genActiveRule</span><span class="token punctuation">(</span><span class="token string">"/app2"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    beforeLoad<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token parameter">app</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"before load"</span><span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 挂载前回调</span>    beforeMount<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token parameter">app</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"before mount"</span><span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 挂载后回调</span>    afterUnmount<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token parameter">app</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"after unload"</span><span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span> <span class="token comment">// 卸载后回调</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置默认子应用,与 genActiveRule中的参数保持一致</span><span class="token function">setDefaultMountApp</span><span class="token punctuation">(</span><span class="token string">"/app1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 启动</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>修改主应用 index.html 中绑定的  <code>id</code> ，需与  <code>el</code>   绑定 dom 为一致;</li><li>调整 App.vue 文件，增加渲染子应用的盒子:</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id&#x3D;&quot;main-root&quot;&gt;    &lt;!-- loading --&gt;    &lt;div v-if&#x3D;&quot;loading&quot;&gt;loading&lt;&#x2F;div&gt;    &lt;!-- 子应用盒子 --&gt;    &lt;div id&#x3D;&quot;root-view&quot; class&#x3D;&quot;app-view-box&quot; v-html&#x3D;&quot;content&quot;&gt;&lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;App&quot;,  props: &#123;    loading: Boolean,    content: String  &#125;&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>创建 vue.config.js 文件，设置  <code>port</code> :</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    port<span class="token operator">:</span> <span class="token number">8090</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、配置子应用"><a href="#三、配置子应用" class="headerlink" title="三、配置子应用"></a>三、配置子应用</h2><ol><li>在主应用同一级目录下快速创建子应用,子应用无需安装 qiankun</li><li>配置子应用 main.js:</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> routes <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./public-path"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    base<span class="token operator">:</span> window<span class="token punctuation">.</span>__POWERED_BY_QIANKUN__ <span class="token operator">?</span> <span class="token string">"/app1"</span> <span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    mode<span class="token operator">:</span> <span class="token string">"history"</span><span class="token punctuation">,</span>    routes  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    router<span class="token punctuation">,</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>__POWERED_BY_QIANKUN__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"vue app bootstraped"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"props from main app"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  instance<span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  router <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>配置 vue.config.js</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./package"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">dir</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">8091</span><span class="token punctuation">;</span> <span class="token comment">// dev port</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * You will need to set publicPath if you plan to deploy your site under a sub path,   * for example GitHub Pages. If you plan to deploy your site to https://foo.github.io/bar/,   * then publicPath should be set to "/bar/".   * In most cases please use '/' !!!   * Detail: https://cli.vuejs.org/config/#publicpath   */</span>  outputDir<span class="token operator">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span>  assetsDir<span class="token operator">:</span> <span class="token string">"static"</span><span class="token punctuation">,</span>  filenameHashing<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// tweak internal webpack configuration.</span>  <span class="token comment">// see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md</span>  devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// host: '0.0.0.0',</span>    hot<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    disableHostCheck<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    port<span class="token punctuation">,</span>    overlay<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      warnings<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      errors<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"Access-Control-Allow-Origin"</span><span class="token operator">:</span> <span class="token string">"*"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 自定义webpack配置</span>  configureWebpack<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"@"</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 把子应用打包成 umd 库格式</span>      library<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-[name]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      libraryTarget<span class="token operator">:</span> <span class="token string">"umd"</span><span class="token punctuation">,</span>      jsonpFunction<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">webpackJsonp_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中有个需要注意的点：</p><ol><li><strong>子应用必须支持跨域</strong>：由于 qiankun 是通过 fetch 去获取子应用的引入的静态资源的，所以必须要求这些静态资源支持跨域；</li><li>使用 webpack 静态 publicPath 配置：可以通过两种方式设置，一种是直接在 mian.js 中引入 public-path.js 文件，一种是在开发环境直接修改 vue.config.js:</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    publicPath<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">//localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>public-path.js 内容如下：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>__POWERED_BY_QIANKUN__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// eslint-disable-next-line no-undef</span>  __webpack_public_path__ <span class="token operator">=</span> window<span class="token punctuation">.</span>__INJECTED_PUBLIC_PATH_BY_QIANKUN__<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>至此，Vue 项目的前端微服务已经简单完成了。</p></blockquote><p>但是在实际的开发过程中，并非如此简单，同时还存在应用间跳转、应用间通信等问题。</p>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>辞职，修路去 -- 我做编程这几年（三）</title>
      <link href="/2019/11/04/these-years-third/"/>
      <url>/2019/11/04/these-years-third/</url>
      
        <content type="html"><![CDATA[<p>我对这座城市入了魔，曾经试图离开她，也离开了她，最后又鬼迷心窍般回到了这里，仿佛迷药已经侵蚀到了骨头里，稍有懈怠，你便会被一种无形的力量吞噬。</p><ul><li>一、辞职</li></ul><p>在这一年里，我做了很多事情，也学到了很多。我学习到了很多名词，但却杂乱无章，没有感觉到一丁点编程的乐趣；也领见识了勾心斗角，即使你不想参与任何一方的斗争，也仍然会被波及。在这一年，我的技术却没有任何进步，第一次感觉到迷茫，一年前也没有这般思考过自己。</p><p><strong>看来，编程真的不适合我。</strong></p><p>决定再三，我提交了辞呈，理由是不想再当程序员了，想做点有意义的事情，想转行，比如，去做建筑。</p><ul><li>二、青海</li></ul><p>只需一张火车票，就能把你从上海带到青海。一年前我由西向东，一年后我怀揣着梦想又离开了魔都。来的时候包里全是书，离开的时候我的包里装着七本建筑类的书籍，由此可见，我真的不想再做程序员了，已经做好了不再回去的打算。<br>对于一个西北人来说，回到大西北是对自己莫大的安慰。海拔一米一米上升，我的呼吸却不是那么顺畅，仿佛已经习惯了低海拔的生活，在经过海拔一千五的兰州时，我的鼻子已经有点堵塞了。窗外的景色，变化了很多次，从一开始的绿色到后来的黄土色，远处的山上寸草不生，一眼望去，这便是苍凉的大西北。</p><ul><li>三、路桥</li></ul><p>朋友专业是土木，毕业之后也是做了建筑这一行，因此我也是寻他而来，在他的帮助下，我投身到了路桥事业。每天的工作便是领着一群藏族民工修路，读图纸量距离看数据…西宁的太阳很是毒辣，没过几天我俨然被晒成黑人一个，脸上也开始脱皮。</p><p>后来由于种种原因，在连续工作了一周之后，甚至连工钱都没有拿便愤然离去。</p><p>当然，这并不是心血来潮，可依然要为自己的抉择负责。</p><ul><li>四、上班</li></ul><p>记得是八月下旬到西宁的，然后租了房子，买了各种电器，开始了新的生活。可是，我的建筑生涯在七天之后就已经戛然而止。后来也连续找了其他工作，或是工资太低，或是做六休一…终于在一家汽车 4S 店找到了适合我的工作，在当时的西宁来说，我的工资已经不低了。而且因为我是毕业于财经类学校的缘故，财务也有想培养我做会计的想法，领导也让我去总部培训，好能够留下来。同事们也都待人不错，每天可以喝到同事磨好的咖啡，跟楼下的大爷聊聊天，看他写字听他拉二胡，日子过得也是不错，那是一段很有意义的工作。</p><ul><li>五、离职</li></ul><p>当我提出离职的时候，领导很是不舍，以至于在离职当天，他半开玩笑却也认真地说要撕掉我的离职申请，但他也清楚我的想法，随即放手。</p><ul><li>六、初雪</li></ul><p>离职的时候才十一月，可在当时的西宁，已经下起了雪，那应该是 15 年冬的初雪，落地即化。踩在地上，很快就会湿了鞋子。<strong>这一离去，貌似我在今后的四年里再没有经历过西北的第一场雪。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我做编程这几年 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上海，我来了 -- 我做编程这几年（二）</title>
      <link href="/2019/10/30/these-years-second/"/>
      <url>/2019/10/30/these-years-second/</url>
      
        <content type="html"><![CDATA[<p>在我眼里，上海是一个绝对公平的世界，在上海，你可以不用依靠家里人的关系去考试，也可以不用对上级察言观色拍马屁，更不用对别人唯唯诺诺低头哈腰；在上海，你只要通过你自己的努力就会得到回报，当然，不是所有的付出都会得到相应的回报，至少这些回报都是自己努力得来的…</p><ul><li>一、世界杯</li></ul><p>毕业那时，正值第 20 届世界杯，已经拿到双证的我，暂时在家养(hun)精(tian)蓄(du)锐(日)，在心仪的德国队拿到冠军奖杯的十多天后，我接到了一家公司的面试电话，第二天便背上行李只身前往上海。</p><ul><li>二、在路上</li></ul><p>记得当时还是站票，拖着沉甸甸两包纸质书的我，没有座位，我只能坐在过道的地上，来往的人从我腿上跨过，我无动于衷。火车轰隆轰隆前进着，车轮正向上海驶来，我抬头看着车门窗外一道道迅速后退的景色，脑袋里回想着自己最近一年的所为所为…</p><ul><li>三、过去的一年</li></ul><p>其实在大四这一年里，我也参加了不少工作的招聘，参加过某省安全局的招聘，参加过某地区边防武警的招聘，笔试体检体能各项皆合格，最后却没了音讯；也接到了某银行软件开发中心的面试通知；也拒绝过某个工作千把块薪水的国企也通过了某些面试笔试，最后都以各种原因而告终…</p><ul><li>四、黑兰州和中性笔</li></ul><p>“不好意思，收一下脚，让一让…”，随着声声吆喝，我的思绪被拉回了现实，立马站起身来，提起自己的行李好让他人通过，掏出手机看了下时间，24 个小时的车程居然才过了四分之一。兜里揣着一包<strong>兰州</strong>，其实我并不喜欢抽烟，只是想在没有头绪的时候，抽一支烟来假装自己在思考，这时想抽一支，发现另一个兜里没有火，掏出来的反而是一直中性笔。随身揣着一支<strong>笔</strong>，是因为自己从小就有写日记的习惯，文采不咋滴，但是每天写写流水账还是可以的。或许，可能 “装笔” 这个词就是因此而来吧，嘿嘿</p><ul><li>五、第一份工作</li></ul><p>一家很小的公司，我以软件程师的身份（实际上是个打杂的）入职了这里。上班的第一天便被外包到了一家银行里工作，在没有任何人指导的情况下我完成了第一个项目的升级和二次优化，其实那时并不是第一次接触 C#，也并非第一次开发应用程序，实习的时候我就独立完成过某项目的开发。这里的同事比较温和更有礼貌，偶尔也会和他们一起去打打台球踢踢足球，在银行度过了两三个月，完成了自己的任务之后，回到了公司的办公室工作。从此开始了我的全干生涯，开始写 <strong>PHP、Android、Java、VB、JavaScript</strong> 等，早上还在写 PHP 项目，下午一个会议就得投入到 Angular 当中…</p><blockquote><p>在那一年，我做了不少事情，也学到了很多</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我做编程这几年 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那年，我大三 -- 我做编程这几年（一）</title>
      <link href="/2019/10/29/these-years-first/"/>
      <url>/2019/10/29/these-years-first/</url>
      
        <content type="html"><![CDATA[<p>“还愣在这干嘛？赶紧回去写退学申请，十二点之前必须写好交给我！”班主任冰冷地说道，不带有一点表情，我心里也觉得看来他让我退学这事儿是势在必得了。</p><p>事情还得从头说起，一切的源头其实都是因为自己没有好好读书，才至于考了一个渣渣二本。2010 年夏，对于这个学校这个专业，我是拒绝的，从高考结束那一天，我就想着补习一年，也想着把自己过去的不努力都给补上。</p><p>开学那天，我是自己拎着包从老家到兰州去，别人孩子都是父母陪同前来报名，我独自一人的原因是根本不想来这个学校。</p><p>…</p><p>就这样，喝酒和睡觉占用了我前两年的大学时光。</p><p>回到开头退学申请的事情，仅仅是因为连续两次翘课，就被班主任叫到办公室劈头盖脸一顿骂，然后叫嚷着让我必须退学。当时已经大三，对于自己来说，考研，靠公务员都不是自己心里想要的出路，说实话也没有想到要去做编程。其实大学的课程有 C、Java 之类的编程课，对这些倒也感兴趣。后来校内有 <strong>Java 编程</strong> 培训班，正好就报了名，想想就算以后不做编程，扫扫盲也是可以，至少自己是比较热爱计算机的。</p><p>对于自己热爱计算机，我是这么定义的。从小我就是一个不安分的孩子，喜欢拆东西，拆电脑手机，游戏机 Mp3…甚至连电热毯的开关也要拆开研究研究其中的原理，拆开之后通上电，然后就第一次体验到了电流穿身而过的感觉。</p><p>当时报班学习 <strong>Java</strong>，是因为想到自己不喜欢应试教育，不想再继续考啊考；不想考公务员，可能是觉得自己学习能力差吧，没法走到最后一关，后来正巧听到培训的消息，起初也没有投入太大的热情，仅仅是奔着扫盲和多个一技之长去的。当时的学费也挺贵的，还是朝家里伸手要钱，想尽了各种理由说服家里打来学费。</p><p>对计算机基础不错的我来说，学习起来并不吃力。每天至少有两个小时是在学习编程，周末是整天上课，因此在其他课程上的投入也相对少了些。</p><p>说起学习的结果来，其实收货还算蛮大的，至少编程规范方面，养成了我代码洁癖的习惯，而且当时主要是学习后端， <code>DIV</code> + <code>CSS</code> 的 <strong>HTML</strong> 页面对我来说，是最难理清的，以至于工作后的一年多时间里，对前端一直提不起兴趣来，在上课的过程中，也合其他同学合作开发了几个项目，<strong>在那时我才理解了团队的力量，一个人再优秀，永远发挥不出团队那样的能量，学会融入团队，学会扬长避短，才能塑造更好地自己。</strong></p><p>大三的时光是由 Java 伴随着我，当然里面也有一些插曲，13 年夏初，接到了某航的飞行员面试电话，当时对于飞行员这个行业我是拒绝的，只有一个原因，那就是我恐高。现在想想，脑袋真的是有个偌大的坑。</p><p>在暑假学完了最后的课程（居然是 <code>Oracle</code> 和 <code>Android</code>），升入到了大四，最后的欢乐时光~。</p><blockquote><p>_回想起来，命运真的是捉弄人，原来我大三的时候我已经踏上编程这条 “不归路”_。</p></blockquote><p><img src="http://images.iamtaoxin.com/2019-10-29-05177dc1104f6272271a8ad00e15fb17.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我做编程这几年 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坚持跑步的一些理由</title>
      <link href="/2019/10/08/why-run/"/>
      <url>/2019/10/08/why-run/</url>
      
        <content type="html"><![CDATA[<p>跑步是最古老、最纯洁、最简单的运动：亚当和夏娃在伊甸园中追逐嬉戏，非洲土著每天行走 10 英里狩猎，马拉松让世界记住了 1896 年的在希腊举行的首届现代奥林匹克运动会。这些都和跑步有关。</p><p><img src="http://images.iamtaoxin.com/2019-10-11-b028b673fa43779cfcc289ce4cdf4bfe.jpg" alt=""></p><p>当然，跑步也带来了很多的好处：</p><ol><li>你不需要任何指导手册就可以跑：如果你能走，你就能跑。</li><li>跑步可以让你精力更旺盛：一次合理的跑步训练会让你干其他的事情也都充满活力。</li><li>跑步的时候还可以干些其他的事情：听音乐、听文章、冥思等。</li><li>跑步可以提升你的创造力：当你思维陷入停滞，当你不得不做个很重要的决定时，跑步可以帮你理清思路，恢复你的思维活力。</li><li>跑步是一种积极的“嗜好”，它只会让你更健康、更快乐！而其他嗜好（烟、酒、暴食）的效果却相反。</li><li>跑步是最好的朋友，在你需要时，它随时在你身边，非常可靠，只要你想和“它”见面，你就可以见到它。</li><li>跑步可以提高你的时间管理能力：只要你把跑步时间安排好，其他事情可在跑步前还是跑步后做，你就能够很好的计划了。</li><li>跑步可以让你设立目标，并实现它：只要你有目标，努力去实现它，你就会有满足感。无论这个目标有多小，都比没有目标，让你的生活更充满渴望。</li><li>跑步是最好的方式了解一个新的城市：出差或是什么原因来到一个新的城市，跑在一个陌生的地方，会让你别有一番感受。</li><li>跑步让你更年轻。</li><li>跑步让你很兴奋：虽然不是每次跑步训练都会让你感觉到亢奋，但是经常性的兴奋感受足以回报你艰苦的训练过程。</li><li>跑步有助于提高自信心和保持自尊。</li><li>跑步会让你的身体有规律的运转。</li><li>跑步让你生活的更有效率。</li><li>跑步有助于睡眠。</li><li>跑步能使你更聪明：研究表明，跑步有助于提高你的记忆力。</li></ol><p>每次跑步都是一次不同的经历，当你系上鞋带，你今天迈出的每一步会和昨天是不同的，你所见所想，也会不同。每天都经历不同，多开心的一件事啊！</p><p>所以，跑起来吧！</p><p><img src="http://images.iamtaoxin.com/2019-10-11-0e74c0304b2273f233cb7d87a8618115.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 个人提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运动健身 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Babel 入门教程</title>
      <link href="/2019/07/08/about-babel/"/>
      <url>/2019/07/08/about-babel/</url>
      
        <content type="html"><![CDATA[<p>作用：将 ES6+ 版本的代码转换为 ES5代码，以便能够运行在当前环境和旧版浏览器环境中。</p><p><img src="http://images.iamtaoxin.com/bg2016012501.png" alt="Babel"></p><p>这就意味着，可以用 ES6 编写代码，而不用担心当前环境是否支持的问题。</p><a id="more"></a><h2 id="一、配置-babelrc"><a href="#一、配置-babelrc" class="headerlink" title="一、配置 .babelrc"></a>一、配置 .babelrc</h2><p>使用 Babel的第一步，就是配置 <code>.babelrc</code> 这个文件，该文件存放在项目根目录下，用来设置转码规则和插件，基本格式如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    <span class="token string">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>presets</code> 字段设定转码规则，可根据需要安装。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"># <span class="token constant">ES2015</span>转码规则$ npm install —save<span class="token operator">-</span>dev babel<span class="token operator">-</span>preset<span class="token operator">-</span>es2015# react转码规则$ npm install —save<span class="token operator">-</span>dev babel<span class="token operator">-</span>preset<span class="token operator">-</span>react# <span class="token constant">ES7</span>不同阶段语法提案的转码规则（共有<span class="token number">4</span>个阶段），选装一个$ npm install —save<span class="token operator">-</span>dev babel<span class="token operator">-</span>preset<span class="token operator">-</span>stage<span class="token operator">-</span><span class="token number">0</span>$ npm install —save<span class="token operator">-</span>dev babel<span class="token operator">-</span>preset<span class="token operator">-</span>stage<span class="token operator">-</span><span class="token number">1</span>$ npm install —save<span class="token operator">-</span>dev babel<span class="token operator">-</span>preset<span class="token operator">-</span>stage<span class="token operator">-</span><span class="token number">2</span>$ npm install —save<span class="token operator">-</span>dev babel<span class="token operator">-</span>preset<span class="token operator">-</span>stage<span class="token operator">-</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后将这些规则加入 <code>.babelrc</code>:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">    <span class="token punctuation">&#123;</span>        <span class="token string">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"es2015"</span><span class="token punctuation">,</span>            <span class="token string">"react"</span><span class="token punctuation">,</span>            <span class="token string">"stage-2"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、命令行转码-babel-cli"><a href="#二、命令行转码-babel-cli" class="headerlink" title="二、命令行转码 babel-cli"></a>二、命令行转码 babel-cli</h2><p>Babel 提供 <code>babel-cli</code> 工具，用于命令行转码。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> --global babel-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>基本用法如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 转码结果输出到标准输出</span>$ babel example.js<span class="token comment"># 转码结果写入一个文件</span><span class="token comment"># --out-file 或 -o 参数指定输出文件</span>$ babel example.js --out-file compiled.js<span class="token comment"># 或者</span>$ babel example.js -o compiled.js<span class="token comment"># 整个目录转码</span><span class="token comment"># --out-dir 或 -d 参数指定输出目录</span>$ babel src --out-dir lib<span class="token comment"># 或者</span>$ babel src -d lib<span class="token comment"># -s 参数生成source map文件</span>$ babel src -d lib -s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码是在全局环境下安装的，存在两个问题：</p><ol><li>如果项目要运行，全局环境必须有 Babel，也就是说项目对环境产生了依赖。</li><li>全局安装 Babel，无法支持不同项目使用不同版本的 Babel。</li></ol><p>针对上述问题，解决的办法是将 <code>babel-cli</code> 安装在项目之中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># install</span>$ <span class="token function">npm</span> <span class="token function">install</span> -save-dev babel-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后，改写 <code>package.json</code>。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// …</span>  “devDependencies”<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    “babel-cli”<span class="token operator">:</span> “^<span class="token number">6.0</span>.<span class="token number">0</span>”  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  “scripts”<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    “build”<span class="token operator">:</span> “babel src -d lib”  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转码的时候，执行<code>$ npm run build</code> 命令即可。</p><h2 id="三、babel-node"><a href="#三、babel-node" class="headerlink" title="三、babel-node"></a>三、babel-node</h2><p><code>babel-cli</code> 工具自带一个 <code>babel-node</code> 命令，提供一个支持 ES6 的 REPl环境。它支持 Node的REPL环境的所有功能，而且可以直接运行ES6代码。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ babel-node<span class="token operator">></span> <span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x * <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>babel-node</code> 命令可以直接运行ES6脚本。将上面的代码放入脚本文件 <code>es6.js</code>，然后直接运行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ babel-node es6.js<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>babel-node</code> 也可以安装在项目中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> --save-dev babel-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后改写 <code>package.json</code>。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>        <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"script-name"</span><span class="token operator">:</span> <span class="token string">"babel-node script.js"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中，使用     <code>babel-node</code> 替代 <code>node</code>， 这样 <code>script.js</code> 本身就不用做任何转码处理。</p><h2 id="四、babel-register"><a href="#四、babel-register" class="headerlink" title="四、babel-register"></a>四、babel-register</h2><p><code>babel-register</code> 模块改写 <code>require</code> 命令，为它加上一个钩子。此后，每当使用 <code>require</code> 加载 <code>.js</code> 、<code>.jsx</code> 、 <code>.es</code> 和 <code>.es6</code> 后缀名的文件，就会先用 Babel进行转码。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -save-dev babel-register<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用时，必须首先加载 <code>babel-register</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-register"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./index.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后就不需要手动对 <code>index.js</code> 转码了。</p><p>需要注意的是， <code>babel-register</code> 只会对 <code>require</code> 命令加载的文件转码，而不会对当前文件转码。另外它是实时转码，所以只适合在开发环境使用。</p><h2 id="五、babel-core"><a href="#五、babel-core" class="headerlink" title="五、babel-core"></a>五、babel-core</h2><p>如果某些代码需要调用到Babel的API进行转码，就需要使用 <code>babel-core</code> 模块。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> babel-core --saves<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，在项目中就可以调用  <code>babel-core</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-core"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 字符串转码</span>babel<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token string">'code();'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => &#123; code, map, ast&#125;</span><span class="token comment">// 文件转码 (异步)</span>babel<span class="token punctuation">.</span><span class="token function">transformFile</span><span class="token punctuation">(</span><span class="token string">'filename.js'</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">;</span>  <span class="token comment">// => &#123;code, map, ast&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 文件转码（同步）</span>babel<span class="token punctuation">.</span><span class="token function">transformFileSync</span><span class="token punctuation">(</span><span class="token string">'filename.js'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => &#123;code, map, ast&#125;</span><span class="token comment">// Babel AST转码</span>babel<span class="token punctuation">.</span><span class="token function">transformFromAst</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> code<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => &#123; code, map, ast &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置对象 <code>options</code>,可以参看官方文档 <a href="http://babeljs.io/docs/usage/options/">http://babeljs.io/docs/usage/options/</a> 。</p><p>下面是一个例子。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> es6Code <span class="token operator">=</span> <span class="token string">'let x = n => n + 1'</span><span class="token punctuation">;</span><span class="token keyword">var</span> es5Code <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'babel-core'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>es6Code<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'es2015'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>code<span class="token comment">// '"use strict";\n\nvar x = function x(n) &#123;\n  return n + 1;\n&#125;;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中， <code>transform</code> 方法的第一个参数是字符串，标识需要转换的ES6代码，第二个参数是转换的配置对象。</p><h2 id="六、babel-polyfill"><a href="#六、babel-polyfill" class="headerlink" title="六、babel-polyfill"></a>六、babel-polyfill</h2><p>Babel默认制转换新的JavaScript句法(syntax)，而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如  <code>Object.assign</code>）都不会转码。</p><p>举例来说，ES6在 <code>Array</code> 对象上新增了 <code>Array.from</code> 方法。 Babel就不会转码这个方法。如果想让这个方法运行，必须使用 <code>babel-polyfill</code>,为当前环境提供一个垫片。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> --save babel-polyfill<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后，在脚本头部，加入如下代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'babel-polyfill'</span><span class="token punctuation">;</span><span class="token comment">// 或者</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'babel-polyfill'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、浏览器环境"><a href="#七、浏览器环境" class="headerlink" title="七、浏览器环境"></a>七、浏览器环境</h2><p>Babel也可以用于浏览器环境。但是，从Babel 6.0开始，不再直接提供浏览器版本，而是要用构建工具构建出来。如果你没有或者不想使用构建工具，可以通过安装5.x版本的 <code>babel-core</code> 模块获取。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> babel-core@old<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行上面的命令以后，就可以在当前目录的 <code>node_modules/babel-core</code>子目录里面，找到<code>babel</code> 的浏览器版本<code>browser.js</code>和<code>browser.min.js</code>。</p><p>然后，将下面代码插入网页：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/babel-core/browser.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token comment">// Your ES6 code</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，<code>browser.js</code> 是Babel提供的转换器脚本，可以在浏览器运行。用户的ES6脚本放在 <code>script</code>标签之中，但是要注明 <code>type=&quot;text/babel&quot;</code>。</p><p>另一种方法是使用 <a href="https://github.com/Daniel15/babel-standalone">babel-standalone</a> 模块提供的浏览器版本，将其插入网页。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> [https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.4.4/babel.min.js](https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.4.4/babel.min.js) <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token comment">// Your ES6 code</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：网页中实时将ES6代码转为ES5，对性能会有影响。生产环境需要加载已经转码完成的脚本。</p><p>下面是如何将代码打包成浏览器可以使用的脚本，以 <code>Babel</code> 配合 <code>Browserify</code> 为例。首先，安装 <code>babelify</code> 模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> --save-dev babelify babel-preset-es2015<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，再用命令行转换ES6脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ browserify script.js -o bundle.js <span class="token punctuation">\</span> -t <span class="token punctuation">[</span>babelify --presets <span class="token punctuation">[</span> es2015 react<span class="token punctuation">]</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面代码将ES6脚本 <code>script.js</code>，转为 <code>bundle.js</code>，浏览器直接加载后者就可以了。</p><p>在 <code>package.json</code> 设置下面的代码，就不用每次命令行都输入参数了。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"browserify"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"transform"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"babelify"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、与其他工具配合"><a href="#八、与其他工具配合" class="headerlink" title="八、与其他工具配合"></a>八、与其他工具配合</h2><p>这里举两个例子：ESLint和Mocha。</p><p> <a href="http://eslint.org/">ESLint</a> 用于静态检查代码的语法和风格，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> --save-dev eslint babel-eslint<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，在项目根目录下，新建一个配置文件<code>.eslint</code>，在其中加入<code>parser</code>字段。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  “parser”<span class="token operator">:</span> “babel<span class="token operator">-</span>eslint”<span class="token punctuation">,</span>  “rules”<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    …  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 再在 <code>package.json</code> 之中，加入相应的<code>scripts</code>  脚本。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"my-module"</span><span class="token punctuation">,</span>    <span class="token string">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint my-files.js"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"babel-eslint"</span><span class="token operator">:</span> <span class="token string">"..."</span><span class="token punctuation">,</span>      <span class="token string">"eslint"</span><span class="token operator">:</span> <span class="token string">"..."</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html">Mocha</a> 则是一个测试框架，如果需要执行使用ES6语法的测试脚本，可以修改<code>package.json</code> 的<code>scripts.test</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token string">"test"</span><span class="token operator">:</span> <span class="token string">"mocha —ui qunit —compilers js:babel-core/register"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面命令中， <code>--compilers</code> 参数指定脚本的转码器，规定后缀名为 <code>js</code> 的文件，都需要使用 <code>babel-core/register</code>先转码。</p><hr><p>文章摘自： <a href="http://www.ruanyifeng.com/blog/2016/01/babel.html">http://www.ruanyifeng.com/blog/2016/01/babel.html</a> </p>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Babel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年书单</title>
      <link href="/2019/04/14/2019-books/"/>
      <url>/2019/04/14/2019-books/</url>
      
        <content type="html"><![CDATA[<p>每一年都做了很多计划，比如技术上有所长进，能进入大厂；又或者是去旅游几次，行万里路；亦或每天健身锻炼，练就一身腱子肉；也想每天坚持写作，即使是记流水账，也要把心中所想目中所见手中所得一一列举在这纸上。然鹅最后，无一不是以失败而告终，回到想想，坚持确实是世界上最难的事情。</p><p>这次，又计划“读万卷书”，[捂脸.jpg]。</p><ul><li><input checked="" disabled="" type="checkbox"> <del>商业的本质</del></li><li><input checked="" disabled="" type="checkbox"> <del>你的善良必须有点锋芒</del></li><li><input checked="" disabled="" type="checkbox"> <del>成为乔布斯</del></li><li><input checked="" disabled="" type="checkbox"> <del>鬼谷子的局</del></li><li><input checked="" disabled="" type="checkbox"> <del>山海经密码</del></li><li><input checked="" disabled="" type="checkbox"> <del>野性的呼唤</del></li><li><input checked="" disabled="" type="checkbox"> 穷爸爸富爸爸</li><li><input disabled="" type="checkbox"> 素数之恋</li><li><input disabled="" type="checkbox"> 编译原理</li><li><input disabled="" type="checkbox"> 区块链核心算法</li><li><input disabled="" type="checkbox"> 刻意练习</li><li><input disabled="" type="checkbox"> 墨菲定律</li><li><input disabled="" type="checkbox"> 巨人的陨落</li><li><input disabled="" type="checkbox"> 每天学点管理学</li><li><input disabled="" type="checkbox"> 自控力</li><li><input disabled="" type="checkbox"> 原则</li><li><input disabled="" type="checkbox"> 爱与数学</li><li><input disabled="" type="checkbox"> 数学之美</li><li><input disabled="" type="checkbox"> 大秦帝国</li><li><input disabled="" type="checkbox"> 增长黑客</li><li><input disabled="" type="checkbox"> 浮生六记</li><li><input disabled="" type="checkbox"> 仓央嘉措</li><li><input disabled="" type="checkbox"> 废都</li><li><input disabled="" type="checkbox"> 白话大数据与机器学习</li><li><input disabled="" type="checkbox"> 人人都是产品经理</li><li><input disabled="" type="checkbox"> 未来简史</li><li><input disabled="" type="checkbox"> 时间简史</li><li><input disabled="" type="checkbox"> 人类简史</li><li><input disabled="" type="checkbox"> 你不知道的 JavaScript（上）</li><li><input disabled="" type="checkbox"> 你不知道的 JavaScript（中）</li><li><input disabled="" type="checkbox"> 你不知道的 JavaScript（下）</li><li><input disabled="" type="checkbox"> JavaSrcipt 设计模式</li><li><input disabled="" type="checkbox"> JavaScript 数据结构与算法</li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打脸的Flag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记第一次半马</title>
      <link href="/2018/11/29/yangpu-marathon/"/>
      <url>/2018/11/29/yangpu-marathon/</url>
      
        <content type="html"><![CDATA[<p>其实我也算是个比较热爱跑步的人吧，线上的比赛也参加了不少，从一开始的 <code>5KM</code> 到 后来的 <code>10KM</code> 或者 <code>20KM</code>，无聊的时候也会去操场刷刷圈。</p><p>但是对于线下的马拉松比赛，这竟然是第一次参加。其实并非第一次想跑线下，究其原因，本来是报了各种线下比赛，奈何一次中签都没有[无奈.png]，可能还是由于自己的跑量不够多吧。</p><p>由于在杨浦区居住过小一年时间，所以对杨浦的印象还是蛮好的，老城区，环境好，小区旁边就是杨体，早晚都回去那边跑跑步，因此也认识了一群跑步的前辈们，跟他们比起来，我就是个跑渣。</p><p>对于这次比赛，我和基友两个人还是比较看重的，毕竟我俩是第一回参加嘛，所以提前一周就订好了酒店，比赛前一天晚上住在那边。</p><p>这次比赛的起点是在新江湾城耐克大中华区总部那边，十一月底的申城早上还笼罩着一层雾气，但是这毫不影响大家跑步的热情，上午 7 时，鸣枪开跑 🏃。</p><p><img src="http://images.iamtaoxin.com/cd401bdb6d1c030e8fc0e1e9afa47d18.jpg" alt="鸣枪开跑"></p><p>虽然之前也跑了不少的线上赛，至少一个人跑步可以控制稳定的步频和配速，但是到了线下，当鸣枪之后，所有人都在往前冲的时候，似乎也忘记了自己的配速。一开始的时候跟小伙伴商量好，要控制配速，确实在比赛伊始，是跟着 <code>230</code> 的兔子在跑，后来随着人流，也就慢慢加快了速度。过程中，有好几个艰难的阶段，有点像放弃的念头，好在最后还是坚持完赛了。</p><p>比赛的终点设在了复旦大学江湾校区，对于我自己来说，第一次跟复旦见面的情景居然是拖着沉重的脚步跑进校园里[😆]。</p><p><em>写在最后:</em></p><blockquote><p>关于坚持。<br>这辈子最难做的事情可能就是坚持。坚持运动，坚持阅读，坚持写作，坚持早起，坚持做对的事情…少则坚持一月，长则一年十年，坚持就是最好的习惯。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 个人提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运动健身 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链学习笔记</title>
      <link href="/2018/06/14/blockchain-note/"/>
      <url>/2018/06/14/blockchain-note/</url>
      
        <content type="html"><![CDATA[<p>区块链是个天然和钱离得很近的领域，离钱越近就越容易赚到钱，尽早开始准备并在区块链领域站稳脚跟的人将能享受到行业崛起的巨大红利，就像四年前的微信公众号，两年前的知识付费，一年前的微信小程序。</p><blockquote><p>参考来源: <label style="font-weight: bold;margin-left: 10px"><a href="https://juejin.im/book/5addb2eb6fb9a07abd0d4557/section/5ade6bf7518825673e353f33#heading-1">区块链开发入门：从 0 到 1 构建基于以太坊智能合约的 ICO DApp</a></label></p></blockquote><ul><li><p>一、账户、交易、区块、区块链是什么？</p><pre><code>    - **账户** (Account) 使用户在银行的户头+密码的组合，在区块链世界中也是如此，不论是比特币还是以太坊的账户都是由地址、公钥、私钥这3部分构成的，其中地址相当于用户名，而公钥+私钥相当于密码，尤其是私钥，丢失或者泄露就意味着失去账户的控制权；    * **交易** (Transaction) 是账户中的任意一直收支记录，在区块链世界中可以指两个账户之间的转账交易、或者只能合约调用请求；    * **区块** (Block) 是账本中的一页，账本的每页可能包含多笔收入和支出，同样，区块链中的每个区块都可能包含多笔交易；    * **区块链** (Blockchain) 是装订成册的多页账本，账本不同页按照记录时间先后顺序组织，区块链中不用区块按被矿工打包的时间先后组织。</code></pre></li><li><p>二、关于以太坊网络 * <strong>整体视角</strong>，以太坊网络本质是 P2P 网络系统，其用途是发起交易、存储交易历史，这里的交易可以是转账或者是调用只能合约中的方法，而以太坊区块链则是存储了以太坊网络上发生过的每笔交易的数据库。常说的以太坊网络通常情况下是指主网，实际上社区中存在很多用途各异的以太坊网络，类比到 Web 开发工程里面 3 套环境，可将其归类如下：</p><pre><code>        - **主网**： Mainnet，就是以太坊的 `线上环境`，记录、保存用户和只能合约的交易，主网中存储的代币才具有真正的价值；        - **测试网**： Testnet，以太坊的 `测试环境`，目的是方便社区和开发者测试智能合约、转账等功能，典型的测试网络有 `Rinkeby` 、 `Ropsten` 、 `Kovan` 等，其中的代币不具有任何价值；        - **其他网**： 以太坊的 `开发环境`，常通过开发者在本地运行以太坊节点组成，或者使用各种便捷的工具启动的本地测试网，以及以内部测试为目的而搭建的私有网络等。    * **个体视角**， P2P 网络通畅包含多个节点，每个节点都需要运行以太坊客户端，而任何人都可以运行以太坊节点，每个以太坊网络上的节点都包含了以太坊区块链数据库的整体副本，每个以太坊网络节点都可以接收 RPC 交易请求并将请求广播给网络中的其他节点，每个以太坊节点都会尝试进行交易的校验、打包（常说的挖矿），即区块生产的任务，生产出的区块也会被广播给其他网络节点。</code></pre></li></ul><blockquote><p><strong>注意：</strong> 以太坊不同网络之间的账户可以完全相同，就好比我们可以把线上数据库中的数据全部同步到测试环境数据库一样，但是不同测试网络之间、测试网络和主网之间、本地开发网络和主网之间是完全隔离的，即无法进行转账和智能合约功能调用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试之HTML篇</title>
      <link href="/2018/06/13/fe-interview-html/"/>
      <url>/2018/06/13/fe-interview-html/</url>
      
        <content type="html"><![CDATA[<h5 id="1-CSS-三列布局常用的实现方案（左右定宽，中间自适应）"><a href="#1-CSS-三列布局常用的实现方案（左右定宽，中间自适应）" class="headerlink" title="1. CSS 三列布局常用的实现方案（左右定宽，中间自适应）"></a>1. CSS 三列布局常用的实现方案（左右定宽，中间自适应）</h5><ul><li>圣杯布局 Holy Grail Layout<br>原理：利用 <strong>CSS</strong> 负边距(Negative Margin)强行将左右两边的 DIV 移动到 中间 DIV 的左右。</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 先渲染middle --></span><pre><code>&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;</code></pre><p>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><pre><code>相应的 style  如下 ：</code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container > div</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.middle</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span> <span class="token comment">/* 用 -200px 吃掉 .right 自己的宽度 */</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token comment">/* 相对 .container -200px */</span>  <span class="token property">right</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>双飞翼布局</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相应的 style 如下 ：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container > div</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.middle</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.middle-container</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 添加 .middle-container 包裹内容 */</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> darkred<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Flex 布局</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>相应的 style  如下 ：</code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container > div</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-CSS-如何实现垂直居中？"><a href="#2-CSS-如何实现垂直居中？" class="headerlink" title="2. CSS 如何实现垂直居中？"></a>2. CSS 如何实现垂直居中？</h5><ul><li>父标签上指定高度 (height) 与行度 (line-height)相同即可：</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>相应的 style  如下 ：</code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html,body</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.vertical</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span> <span class="token comment">/* 最简单的水平居中方式 */</span>  <span class="token comment">/* 以下是垂直居中的代码： */</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 <strong>Flex Layout</strong> 中的 <code>align-items</code> 和 <code>justify-content</code> 实现居中</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>相应的 style  如下 ：</code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 使用 CSS3 flex layout 使元素垂直居中 */</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.vertical</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&gt; &lt;span style=&quot;color:orange&quot;&gt;注：但是这种方法存在兼容性问题，下图是各个浏览器的支持情况：&lt;/span&gt;</code></pre><p><img src="http://images.iamtaoxin.com/20160922210759487.png" alt="flex 在各浏览器的支持情况"></p><blockquote><p>Flex 教程可参考 <a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局教程:语法篇</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 个人笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Node.js + Nginx 部署 HTTPS</title>
      <link href="/2018/06/08/node-js-nginx-https/"/>
      <url>/2018/06/08/node-js-nginx-https/</url>
      
        <content type="html"><![CDATA[<p>具体步骤：</p><ol><li>安装证书<br>&lt;!–hexoPostRenderEscape:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update<br>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> software-properties-common<br>$ <span class="token function">sudo</span> add-apt-repository ppa:certbot/certbot<br>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update<br>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-certbot-nginx </li></ol><p>$ <span class="token function">sudo</span> certbot --nginx certonly<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><ol start="2"><li>nginx 反向代理<br>在 <code>/ete/nginx/site-available/default</code> 中:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location /api <span class="token punctuation">&#123;</span> proxy_pass      http://localhost:8089<span class="token punctuation">;</span> proxy_buffering on<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>重启 <code>nginx</code>，重启 <code>node</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈前端优化</title>
      <link href="/2018/05/27/front-end-optimization/"/>
      <url>/2018/05/27/front-end-optimization/</url>
      
        <content type="html"><![CDATA[<h5 id="一、优化的原则和方向"><a href="#一、优化的原则和方向" class="headerlink" title="一、优化的原则和方向"></a>一、优化的原则和方向</h5><h6 id="1-1-前端性能优化的原则其实就是更好的用户体验，具体实现的目标大体有两个："><a href="#1-1-前端性能优化的原则其实就是更好的用户体验，具体实现的目标大体有两个：" class="headerlink" title="1.1 前端性能优化的原则其实就是更好的用户体验，具体实现的目标大体有两个："></a>1.1 前端性能优化的原则其实就是更好的用户体验，具体实现的目标大体有两个：</h6><ul><li>合理使用内存或缓存，减少请求；</li><li>减少 CPU 或 GPU 的计算，达到更快的展现。</li></ul><h6 id="1-2-前端在性能优化的方向大致有两个："><a href="#1-2-前端在性能优化的方向大致有两个：" class="headerlink" title="1.2 前端在性能优化的方向大致有两个："></a>1.2 前端在性能优化的方向大致有两个：</h6><ul><li>减少页面体积，提升网络加载;</li><li>优化页面渲染</li></ul><h5 id="二、方向详情"><a href="#二、方向详情" class="headerlink" title="二、方向详情"></a>二、方向详情</h5><h6 id="2-1-较少页面体积，提升网络加载"><a href="#2-1-较少页面体积，提升网络加载" class="headerlink" title="2.1 较少页面体积，提升网络加载"></a>2.1 较少页面体积，提升网络加载</h6><ul><li>静态资源的压缩合并（<strong>JS</strong> 代码压缩合并、 CSS 代码压缩合并、雪碧图）<ul><li>i. 压缩是为了减小文件的体积，减轻网络负载，达到更快的下载;</li><li>ii. 合并和雪碧图都是为了减少文件的请求次数，但不是合并的就一定比没有合并时加载快，要考虑合并之后的体积，若文件合并之后太大也不利于性能优化，所以在实际项目中要做好权衡。</li></ul></li><li>静态资源缓存（资源名称加 MD5 戳）<ul><li>i. 可以通过链接名称控制缓存： 通过前端构建工具为打包的文件添加 <em>MD5</em> 后缀，这样当打包上线时请求的链接将发生改变，可以防止由于缓存导致静态资源更新失效；</li></ul></li><li>使用 <em>CDN</em> 让资源加载更快</li></ul><h6 id="2-2-优化页面渲染"><a href="#2-2-优化页面渲染" class="headerlink" title="2.2 优化页面渲染"></a>2.2 优化页面渲染</h6><ul><li>CSS 放在头部， <strong>JS</strong> 放后面<ul><li>浏览器在渲染解析过程中，若遇到 <code>&lt;link href=&quot;...&quot;&gt;</code> 和 <code>&lt;script src=&quot;...&quot;&gt;</code> 这种外链加载 CSS 和 <strong>JS</strong> 的标签，浏览器会异步下载并解析执行。 CSS 放在头部是为了让浏览器今早解析执行 CSS 文件，渲染出页面的样式，若放在底部会出现渲染卡顿的情况，影响性能和体验。</li><li>而当渲染过程中遇到 <code>script</code> 标签时就会执行 <strong>JS</strong> 代码，从而阻塞页面渲染，因为浏览器渲染和 <strong>JS</strong> 执行共用一个县城，而且这里必须是单线程操作，多线程会产生渲染 <strong>DOM</strong> 冲突。所以要将 <strong>JS</strong> 放在底部，等到页面渲染完成之后再去解析执行 JS，保证用户体验性。</li><li>另外，JS 执行如果涉及 <strong>DOM</strong> 操作，得等待 <strong>DOM</strong> 解析完成才行，<strong>JS</strong> 放在底部执行是，HTML 肯定都解析成了 <strong>DOM</strong> 结构。 <strong>JS</strong> 如果放在 <strong>HTML</strong> 顶部，<strong>JS</strong> 执行的实行 <strong>HTML</strong> 还没来得及转换为 <strong>DOM</strong> 结构，可能会引起报错。</li></ul></li></ul><ul><li><p>懒加载（图片来加载、下拉加载更多）</p><ul><li>i. 先将 <code>src</code> 赋值成一个通用的浏览图，下拉的时候再动态赋值成正式的图片。通用的预览图可以是体积比较小的，这样加载会很快，待页面下拉，图片显示出来时，再去替换 <code>src</code> 为 <code>data-src</code> 的值。（ <code>data-</code> 开头的属性浏览器渲染的时候会忽略掉，提高渲染性能）<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>preview.png<span class="token punctuation">"</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>realImg.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>减少 <strong>DOM</strong> 查询，对 <strong>DOM</strong> 查询做缓存，代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 只查询一个DOM，缓存在 pList 中了</span><span class="token keyword">var</span> pList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//每次循环，都会查询 DOM，耗费性能</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>减少 <strong>DOM</strong> 操作，多个操作尽量合并在一起执行 （DocumentFragment）</p><ul><li><strong>DOM</strong> 操作是非常耗费性能的，因此插入多个标签时，先插入 <code>Fragment</code> 然后再统一插入 <strong>DOM</strong>。因为 <code>Fragment</code> 文档片段存在于内存中，并不在 <strong>DOM</strong> 树中，所以将子元素插入到文档片段时不会引起页面回流。</li></ul></li><li><p>事件节流</p><ul><li>i. 防抖</li><li>ii. 节流</li></ul></li><li><p>尽早执行操作</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 页面的全部资源加载完才会执行，包括图片、视频等</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// DOM 渲染完成即可执行，此时图片、视频等资源可能没有加载完成</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 同 DOMContentLoaded</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用 <strong>预渲染</strong> 或者 <strong>SSR服务端渲染</strong>，数据直接输出到 <strong>HTML</strong>中，减少浏览器使用 <strong>JS</strong> 模板渲染页面 <strong>HTML</strong> 的时间，同时也有利于网站的 <strong>SEO</strong>。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试基础之JavaScript篇</title>
      <link href="/2018/05/20/fe-interview-js/"/>
      <url>/2018/05/20/fe-interview-js/</url>
      
        <content type="html"><![CDATA[<h5 id="I-说说-JS-的数据类型"><a href="#I-说说-JS-的数据类型" class="headerlink" title="I. 说说 JS 的数据类型"></a>I. 说说 JS 的数据类型</h5><h6 id="1-1-基本类型"><a href="#1-1-基本类型" class="headerlink" title="1.1 基本类型"></a>1.1 基本类型</h6><ul><li>String</li><li>Number</li><li>Boolean</li><li>null</li><li>undefined</li><li>symbol (ES6 中新增)</li></ul><h6 id="1-2-引用类型"><a href="#1-2-引用类型" class="headerlink" title="1.2 引用类型"></a>1.2 引用类型</h6><ul><li>Date</li><li>RegExp</li><li>Object</li><li>Array</li><li>Function ( 后三种为基本包装类型，特殊的引用类型，也算作基本类型)</li></ul><h6 id="1-3-基本类型保存在栈上，引用类型的引用保存在栈上，其对象保存在堆中。"><a href="#1-3-基本类型保存在栈上，引用类型的引用保存在栈上，其对象保存在堆中。" class="headerlink" title="1.3 基本类型保存在栈上，引用类型的引用保存在栈上，其对象保存在堆中。"></a>1.3 基本类型保存在栈上，引用类型的引用保存在栈上，其对象保存在堆中。</h6><h6 id="1-4-null-和-undefined-的区别？"><a href="#1-4-null-和-undefined-的区别？" class="headerlink" title="1.4 null 和 undefined 的区别？"></a>1.4 <code>null</code> 和 <code>undefined</code> 的区别？</h6><pre><code>- i. 含义不同：`null` 表示该处不该有值，而 `undefined` 表示该处有值，但还没有进行初始化- ii. 类型不同： `null` 的类型为 `Object`, `undefined` 的类型为 `undefined`</code></pre><h5 id="II-变量提升"><a href="#II-变量提升" class="headerlink" title="II. 变量提升"></a>II. 变量提升</h5><h5 id="III-对于闭包的理解，以及在什么场景下会使用到闭包？"><a href="#III-对于闭包的理解，以及在什么场景下会使用到闭包？" class="headerlink" title="III. 对于闭包的理解，以及在什么场景下会使用到闭包？"></a>III. 对于闭包的理解，以及在什么场景下会使用到闭包？</h5><h6 id="3-1-什么是闭包？"><a href="#3-1-什么是闭包？" class="headerlink" title="3.1 什么是闭包？"></a>3.1 什么是闭包？</h6><p>闭包是指那些可以访问独立数据的函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"Mozilla"</span><span class="token punctuation">;</span>  <span class="token comment">// name 是一个被 init创建的局部变量</span>  <span class="token keyword">function</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// displayName() 是一个内部函数</span>    <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 一个闭包使用在父函数中声明的变量</span>  <span class="token punctuation">&#125;</span>  <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码中，<code>displayName</code> 是一个典型的闭包，它能够访问它之外的 <code>name</code> 变量，并保存这个变量在它创建时的状态。这个特性非常实用，因为 <code>Javascript</code> 有很多奇怪的坑</p><h5 id="IV-谈谈对原型与原型链的了解度，有几种方式可以实现继承，用原型实现集成有什么缺点，要怎么解决？"><a href="#IV-谈谈对原型与原型链的了解度，有几种方式可以实现继承，用原型实现集成有什么缺点，要怎么解决？" class="headerlink" title="IV. 谈谈对原型与原型链的了解度，有几种方式可以实现继承，用原型实现集成有什么缺点，要怎么解决？"></a>IV. 谈谈对原型与原型链的了解度，有几种方式可以实现继承，用原型实现集成有什么缺点，要怎么解决？</h5><h6 id="4-1-什么是原型链？"><a href="#4-1-什么是原型链？" class="headerlink" title="4.1 什么是原型链？"></a>4.1 什么是原型链？</h6><p>原型链是 <code>Javascript</code> 实现继承最重要的一种方式。每一个对象都有自己的原型对象，根原型对象没有原型，所以其 <code>__proto__</code> 属性值为 <code>null</code> 。在调用时，如果访问的对象属性没有找到，<code>Javascript</code> 会顺着原型链继续往下找，直到触碰到根原型为止。</p><h6 id="4-2-原型与原型链的区别是什么？"><a href="#4-2-原型与原型链的区别是什么？" class="headerlink" title="4.2 原型与原型链的区别是什么？"></a>4.2 原型与原型链的区别是什么？</h6><p><code>__proto__</code> 是隐式原型，指向创建这个对象的函数<code>(constructor)</code> 的 <code>prptotype</code>，用来构成原型链和实现基于原型的继承。</p><p><code>protype</code> 是显式原型，用来实现基于原型的继承与属性的共享。每一个函数都具有 <code>prototype</code> 属性。</p><h6 id="4-3-在面向对象语言中，继承分为两种："><a href="#4-3-在面向对象语言中，继承分为两种：" class="headerlink" title="4.3 在面向对象语言中，继承分为两种："></a>4.3 在面向对象语言中，继承分为两种：</h6><ul><li>接口集成：只集成方法签名</li><li>实现集成：继承实际的方法</li></ul><p>因为 <code>Javascript</code> 没有继承的关键字，所以 JS 实现继承的方法很特殊，大概有以下几种：</p><ul><li>原型链继承(最常见)：</li></ul><pre class="line-numbers language-原型链继承" data-language="原型链继承"><code class="language-原型链继承">var Base &#x3D; function ()&#123;    this.name &#x3D; &#39;Base&#39;;    this.toString &#x3D; function ()&#123;        return this.name;    &#125;&#125;var Sub &#x3D; function ()&#123;    Base.call(this);    this.name &#x3D; &#39;Sub&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种继承解决了原型链继承的问题，但它也有一些弊端：使用 <code>instanceof</code> 运算符的时候会发现，它的实例并不是父类的实例（因为父类并没有在它的原型链上）。</p><ul><li>实例继承</li></ul><pre class="line-numbers language-none"><code class="language-none">var Base &#x3D; function ()&#123;    this.name &#x3D; &#39;Base&#39;;    this.toString &#x3D; function ()&#123;        return this.name;    &#125;&#125;var Sub &#x3D; function()&#123;    var instance &#x3D; new Base();    instance.name &#x3D; &#39;Sub&#39;;    return instance;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种继承方法只能强行被归类为继承，因为它实际上是返回了一个父类的实例，与子类毫无关系。同样，这种方法也不支持多继承。</p><ul><li>拷贝继承</li></ul><pre class="line-numbers language-none"><code class="language-none">var Base &#x3D; function ()&#123;    this.name &#x3D; &#39;Base&#39;;    this.toString &#x3D; function ()&#123;        return this.name;    &#125;&#125;var Sub &#x3D; function ()&#123;    var base &#x3D; new Base();    for(var i in base)&#123;        sub.prototype[i] &#x3D; base[i];    &#125;    sub.prototype[&#39;name&#39;] &#x3D; &#39;Sub&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，只有可枚举的对象类型才能使用 <code>foreach</code> 的方式获取到。它的优点是可以实现多继承，缺点是不方便写，效率低。</p><h5 id="V-iframe-的缺点有哪些？"><a href="#V-iframe-的缺点有哪些？" class="headerlink" title="V. iframe 的缺点有哪些？"></a>V. iframe 的缺点有哪些？</h5><h5 id="VI-Ajax-的原生写法"><a href="#VI-Ajax-的原生写法" class="headerlink" title="VI. Ajax 的原生写法"></a>VI. Ajax 的原生写法</h5><h5 id="VII-为什么会有同源策略"><a href="#VII-为什么会有同源策略" class="headerlink" title="VII. 为什么会有同源策略"></a>VII. 为什么会有同源策略</h5><h5 id="VIII-前端解决跨域的几种方式"><a href="#VIII-前端解决跨域的几种方式" class="headerlink" title="VIII. 前端解决跨域的几种方式"></a>VIII. 前端解决跨域的几种方式</h5><h5 id="IX-怎么判断两个对象是否相等"><a href="#IX-怎么判断两个对象是否相等" class="headerlink" title="IX. 怎么判断两个对象是否相等"></a>IX. 怎么判断两个对象是否相等</h5><h5 id="X-代码实现一个对象的深拷贝"><a href="#X-代码实现一个对象的深拷贝" class="headerlink" title="X. 代码实现一个对象的深拷贝"></a>X. 代码实现一个对象的深拷贝</h5><h5 id="XI-从发送一个-url-地址到返回页面内容，中间发生了什么？"><a href="#XI-从发送一个-url-地址到返回页面内容，中间发生了什么？" class="headerlink" title="XI. 从发送一个 url 地址到返回页面内容，中间发生了什么？"></a>XI. 从发送一个 url 地址到返回页面内容，中间发生了什么？</h5><h5 id="XII-前端性能优化了解多少"><a href="#XII-前端性能优化了解多少" class="headerlink" title="XII. 前端性能优化了解多少"></a>XII. 前端性能优化了解多少</h5>]]></content>
      
      
      <categories>
          
          <category> 个人笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用axios发送POST请求时后端获取不到参数的问题</title>
      <link href="/2018/05/18/axios-post/"/>
      <url>/2018/05/18/axios-post/</url>
      
        <content type="html"><![CDATA[<p>在使用 <code>vue2</code> + <code>axios</code> + <code>node.js</code> + <code>express</code> 开发管理后台时，遇到了<em>axios发送POST请求时后端获取不到参数的问题</em> ，查阅资料许久，还是未找到解决办法，无奈之下，喝一口凉水，歇息一番，继续寻求良方。</p><p>终于，皇天不负有心人，<a href="https://zhuanlan.zhihu.com/p/27498996">在这里</a>，还是找到了解决的办法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由此看出，<code>axios</code> 在 <code>POST</code> 提交数据时也是使用的这种方式，在 <code>java</code> 和 <code>php</code> 可以获取到对应的 <code>request</code> 原始流数据获取到对应的值并将其序列化.</p><p>但是这样的方式在 <code>express</code> 服务后端并不能获取到数据，因此 <code>express</code> 中使用的是 <code>body-parser</code> 去格式化前台传来的数据，具体实现看代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//server</span><span class="token string">'use strict'</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">var</span> powerexpress <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'power-express'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>express<span class="token punctuation">)</span><span class="token keyword">var</span> authority <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./filter/authority'</span><span class="token punctuation">)</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">powerexpress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 使用 body-parse 格式化数据</span><span class="token keyword">var</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    extended<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> Server <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./server'</span><span class="token punctuation">)</span><span class="token keyword">var</span> cookieParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-parser'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./controllers/routes'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token keyword">var</span> appServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>appServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩过的坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断一个对象是否为数组</title>
      <link href="/2018/05/17/arr-yes-or-no/"/>
      <url>/2018/05/17/arr-yes-or-no/</url>
      
        <content type="html"><![CDATA[<p>如何判断一个对象是不是 <strong>Array</strong></p><pre><code>1. `Array.isArrya(obj)` 调用数组的 `isArray` 方法 ;2. `obj instanceOf Array` 判断对象是否是 `Array` 的示例 ;3. `Object.prototype.toString.call(obj) ===‘[object Array]’`</code></pre><p><code>Object.prototype.toString</code> 方法会取得对象的一个内部属性 <code>［［Class］］</code> ，然后依据这个属性，返回一个类似于<code>［object Array］</code>的字符串作为结果，<code>call</code> 用来改变 <code>toString</code> 的 <code>this</code> 指向为待检测的对象</p><pre><code>4. 判断对象是否有push等数组的一些方法。（这个方法有兼容问题，但也是一个简单易用的方法）5. `obj.constructor===Array   //true`</code></pre><ul><li><strong>同理判断一个对象是否是函数</strong>：</li></ul><p><code>console.log(Object.prototype.toString.call(obj)===&#39;[object Function]&#39;) //true或false</code></p>]]></content>
      
      
      <categories>
          
          <category> 个人笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端JS面试必须知道的几个点</title>
      <link href="/2018/05/17/fe-interview/"/>
      <url>/2018/05/17/fe-interview/</url>
      
        <content type="html"><![CDATA[<h5 id="I-函数的三种定义方法"><a href="#I-函数的三种定义方法" class="headerlink" title="I.函数的三种定义方法"></a>I.函数的三种定义方法</h5><h6 id="1-1-函数声明"><a href="#1-1-函数声明" class="headerlink" title="1.1 函数声明"></a>1.1 函数声明</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ES5</span><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//匿名函数</span><span class="token comment">// ES6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//如果 &#123;&#125; 内容只有一行 &#123;&#125; 和return 关键字可省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="1-2-函数表达式（函数字面量）"><a href="#1-2-函数表达式（函数字面量）" class="headerlink" title="1.2 函数表达式（函数字面量）"></a>1.2 函数表达式（函数字面量）</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ES5</span><span class="token keyword">var</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// ES6</span><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//如果&#123;&#125; 内容只有一行 &#123;&#125; 和return 关键字可省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="1-3-构造函数"><a href="#1-3-构造函数" class="headerlink" title="1.3 构造函数"></a>1.3 构造函数</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetSum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="1-4-三种方法的比较"><a href="#1-4-三种方法的比较" class="headerlink" title="1.4 三种方法的比较"></a>1.4 三种方法的比较</h6><ol><li>函数声明有预解析，而且函数声明的优先级高于变量；</li><li>使用 <code>Function</code> 构造函数定义函数的人方式是一个函数表达式，这种方式会导致解析两次代码，影响性能。第一次解析常规的 <code>Javascript</code> 代码，第二次解析传入构造函数的字符串。</li></ol><h5 id="II-ES5-中函数的-4-种调用"><a href="#II-ES5-中函数的-4-种调用" class="headerlink" title="II. ES5 中函数的 4 种调用"></a>II. ES5 中函数的 4 种调用</h5><h6 id="2-1-函数调用模式"><a href="#2-1-函数调用模式" class="headerlink" title="2.1 函数调用模式"></a>2.1 函数调用模式</h6><p>该模式包括 函数名() 和匿名函数调用， <code>this</code> 指向 <code>window</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//window</span><span class="token punctuation">&#125;</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//window</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">getSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//window</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-2-方法调用"><a href="#2-2-方法调用" class="headerlink" title="2.2 方法调用"></a>2.2 方法调用</h6><p>对象.方法名(), <code>this</code> 指向 对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> objList <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"methods"</span><span class="token punctuation">,</span>  <span class="token function-variable function">getSum</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//objList对象</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>objList<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-3-构造器调用"><a href="#2-3-构造器调用" class="headerlink" title="2.3 构造器调用"></a>2.3 构造器调用</h6><p><code>new</code> 构造函数名 (), <code>this</code> 指向构造函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//指向构造函数Person</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> personOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-4-间接调用"><a href="#2-4-间接调用" class="headerlink" title="2.4 间接调用"></a>2.4 间接调用</h6><p>利用 <code>call</code> 和 <code>apply</code> 来实现，<code>this</code> 就是 <code>call</code> 和 <code>apply</code> 对应的第一个参数，如果不传值或者第一个值为 <code>null</code> , <code>undefined</code> 时 指向 <code>window</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"我是apply改变的this值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"我是call改变的this值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="III-ES6-中函数的调用"><a href="#III-ES6-中函数的调用" class="headerlink" title="III. ES6 中函数的调用"></a>III. ES6 中函数的调用</h5><p>箭头函数不可以当作构造函数，也就是不能用 <code>new</code> 命令实例化一个对象，否则会抛出一个错误<br>箭头函数的 <code>this</code> 是和定义时有关，和调用无关<br>调用就是函数调用模式</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//window</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">arrowFun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//window</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">arrowFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> arrowObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">arrFun</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//arrowObj</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>arrowObj<span class="token punctuation">.</span>arrFun<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="IV-call-apply-和-bind"><a href="#IV-call-apply-和-bind" class="headerlink" title="IV. call, apply 和 bind"></a>IV. <code>call</code>, <code>apply</code> 和 <code>bind</code></h5><ul><li>IE5 之前不支持 <code>call</code> 和 <code>apply</code>，<code>bind</code> 是 <strong>ES5</strong> 之后出来的；</li><li><code>call</code> 和 <code>apply</code> 可以调用函数，改变 <code>this</code>,实现继承和借用别的对象的方法。</li></ul><h6 id="4-1-call-和-apply-定义"><a href="#4-1-call-和-apply-定义" class="headerlink" title="4.1 call 和 apply 定义"></a>4.1 <code>call</code> 和 <code>apply</code> 定义</h6><p>调用方法，用一个对象替换掉另一个对象 (this)<br>对象.call(新 this 对象，实参 1，实参 2，实参 3…)<br>对象.apply(新 this 对象，[实参 1，实参 2，实参 3…])</p><h6 id="4-2-call-和apply-用法"><a href="#4-2-call-和apply-用法" class="headerlink" title="4.2 call 和apply 用法"></a>4.2 <code>call</code> 和<code>apply</code> 用法</h6><ul><li>a. 间接调用函数，改变作用域的 <code>this</code> 值；</li><li>b. 劫持其他对象的方法</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>  <span class="token function-variable function">logName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">logName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//李四</span><span class="token comment">// 实质是call改变了foo的this指向为bar，并调用函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>c. 两个函数实现继承</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"font-size:20px"</span> <span class="token operator">></span><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">showName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'Black Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Black Cat</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>d. 为类数组(<code>arguments</code> 和<code>nodeList</code>)添加数组方法 <code>push</code>，<code>pop</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//['张三','李四','王五']</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>e. 合并数组</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将arr2合并到了arr1中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>f. 求数组最大值</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>g. 判断字符类型</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [object Object]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="V-JS-常见的四种设计模式"><a href="#V-JS-常见的四种设计模式" class="headerlink" title="V. JS 常见的四种设计模式"></a>V. JS 常见的四种设计模式</h5><h6 id="5-1-工厂模式"><a href="#5-1-工厂模式" class="headerlink" title="5.1 工厂模式"></a>5.1 工厂模式</h6><p>简单的工厂模式可以理解为解决多个相似的问题；</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">CreatePerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>  obj<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreatePerson</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"28"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreatePerson</span><span class="token punctuation">(</span><span class="token string">"Lisa"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// longen</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 28</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 男</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// longen</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tugenhua</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 27</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 女</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tugenhua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5-2-单例模式"><a href="#5-2-单例模式" class="headerlink" title="5.2 单例模式"></a>5.2 单例模式</h6><p>只能被实例化(构造函数给实例添加属性与方法)一次</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//单体模式</span><span class="token keyword">var</span> <span class="token function-variable function">Singleton</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//获取实例对象</span><span class="token keyword">var</span> getInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//相当于一个一次性阀门，只能实例化一次</span>      instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试单体模式的实例，所以 a===b</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5-3-沙箱模式"><a href="#5-3-沙箱模式" class="headerlink" title="5.3 沙箱模式"></a>5.3 沙箱模式</h6><p>将一些函数放到自执行函数里面，但要闭包暴露接口，用变量接受暴露的接口，再调用里面的值，否则无法使用里面的值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> sanboxModel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    sayName<span class="token operator">:</span> sayName<span class="token punctuation">,</span>    sayAge<span class="token operator">:</span> sayAge<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5-4-发布者订阅模式"><a href="#5-4-发布者订阅模式" class="headerlink" title="5.4 发布者订阅模式"></a>5.4 发布者订阅模式</h6><p>就例如我们关注了某一个公众号，然后他对应的有新的消息就会给你推送。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//发布者与订阅模式</span><span class="token keyword">var</span> shoeObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 定义发布者</span>shoeObj<span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//缓存列表 存放订阅者回调函数</span><span class="token comment">// 增加订阅者</span>shoeObj<span class="token punctuation">.</span><span class="token function-variable function">listen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  shoeObj<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 订阅消息添加到缓存列表</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 发布消息</span>shoeObj<span class="token punctuation">.</span><span class="token function-variable function">trigger</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> <span class="token punctuation">(</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//第二个参数只是改变fn的this</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 小红订阅如下消息</span>shoeObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">color<span class="token punctuation">,</span> size</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"颜色是: "</span> <span class="token operator">+</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"尺码是："</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 小花订阅如下消息</span>shoeObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">color<span class="token punctuation">,</span> size</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"再次打印颜色是: "</span> <span class="token operator">+</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"再次打印尺码是："</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shoeObj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shoeObj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"黑色"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码实现逻辑是用数组存储订阅者，发布者毁掉函数里面通知的方式是遍历订阅者数组，并将发布者内容传入订阅者数组</p><h5 id="VI-原型链"><a href="#VI-原型链" class="headerlink" title="VI. 原型链"></a>VI. 原型链</h5><h6 id="6-1-定义"><a href="#6-1-定义" class="headerlink" title="6.1 定义"></a>6.1 定义</h6><p>对象继承属性的一个链条</p><h6 id="6-2-构造函数，实例与原型对象的关系"><a href="#6-2-构造函数，实例与原型对象的关系" class="headerlink" title="6.2 构造函数，实例与原型对象的关系"></a>6.2 构造函数，实例与原型对象的关系</h6><p><img src="https://segmentfault.com/img/bV8wcf?w=638&h=241/view" alt="image"></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">person</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//person是构造函数</span><span class="token keyword">var</span> o3personTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">person</span><span class="token punctuation">(</span><span class="token string">"personTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//personTwo是实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://segmentfault.com/img/bV8wdm?w=534&h=333" alt="iamge"></p><p>原型对象都有一个默认的<code>constructor</code>属性指向构造函数</p><h6 id="6-3-创建实例的方法"><a href="#6-3-创建实例的方法" class="headerlink" title="6.3 创建实例的方法"></a>6.3 创建实例的方法</h6><ul><li>a. 字面量</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"张三"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>b. <code>Object</code> 构造函数创建</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> Obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>c. 使用工厂模式创建对象</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>d. 使用构造函数创建对象</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="6-4-new-运算符"><a href="#6-4-new-运算符" class="headerlink" title="6.4 new 运算符"></a>6.4 <code>new</code> 运算符</h6><ul><li>a. 创建了一个新对象；</li><li>b. <code>this</code>指向构造函数；</li><li>c. 构造函数有返回，会替换 <code>new</code> 出来的对象，如果没有就是 <code>new</code> 出来的对象</li><li>d. 手动封装一个 <code>new</code> 运算符</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">new2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>protorype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建对象</span>  <span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//改变this指向，把结果赋给k</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> k <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//判断k的类型是不是对象</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> o<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="6-5-对象的原型链"><a href="#6-5-对象的原型链" class="headerlink" title="6.5 对象的原型链"></a>6.5 对象的原型链</h6><p><img src="https://segmentfault.com/img/bV8wf4?w=570&h=709" alt="image"></p><h5 id="VII-继承的方式"><a href="#VII-继承的方式" class="headerlink" title="VII. 继承的方式"></a>VII. 继承的方式</h5><p>JS 是一门弱类型动态语言，封装和继承是他的两大特性：</p><h6 id="7-1-原型链继承"><a href="#7-1-原型链继承" class="headerlink" title="7.1 原型链继承"></a>7.1 原型链继承</h6>]]></content>
      
      
      <categories>
          
          <category> 个人笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>房、树、人绘画投射分析</title>
      <link href="/2018/03/14/house-tree-man/"/>
      <url>/2018/03/14/house-tree-man/</url>
      
        <content type="html"><![CDATA[<p>房树人测验(Tree-House-Person)，又称屋树人测验，它开始于 John Buck 的“画树测验”。John Buck 于 1948 年发明此方法，受测者只需在三张白纸上分别画屋、树及人就完成测试。而动态屋、树、人分析学则由 RobertC.Burn 在 1970 年发明，受测者会在同一张纸上画屋、树及人。这三者有互动作用，例如从屋及人的位置与距离都可看出受测者与家庭的关系，所以这两种分析学多数会结合使用。</p><ul><li><p>房：人们成长的场所，投射恩新的安全感。 - 画楼房：智商较高； - 房子画得像庙宇：两个极端，要不就是人才，或者就是怪异的行为表达；</p><ul><li>强调地面：缺乏安全感；</li><li>瓦片画得很仔细：追求细节和完美；</li><li>房子侧面画楼梯：想回避和间接性接触；</li><li>画烟囱：向上的直烟暗示受测者需要出气筒；向下的烟代表受测者内心的压力；</li><li>一般人画的烟方向会向右，如果向左可能有精神分裂的倾向。</li></ul></li><li><p>树：象征感情，投射人们对环境的体验 - 单线条的树：受测者内心忧郁，如果除了单线条的树外还画了落叶，受测者很可能在 10 天之内有自杀倾向；</p><ul><li>嫩叶：受测者渴望或正在重新开始；树干涂黑或树根呈鹰爪状：受测者潜在的攻击意识较强；</li><li>柳树：男性受测者较女性化；女性受测者则较追求完美；</li><li>女性画松树：追求成熟，较男性化；白桦树：受测者较敏感；画上树疤：受测者曾受过心理创伤，可以根据树疤在树干上的位置判断受创的大致年纪；</li><li>画果实：投射到现实生活中，他们如果压抑或遇到挫折时会退行为儿童行为；高山上一棵树：受测者可能有性行为问题或恋母情结。</li></ul></li></ul><ul><li>人：投射受测者的自我形象和人格完整性 - 符号化的人：受测者有掩饰性，说谎的能力较强； - 头：头画得越大，受测者的心理年龄越小。一般 12 岁以后不应该出现大头小身体的样子，否则可能智力有问题。如果画的是人的背影，这是在人际关系中过分警戒、不愿意暴露自己的表现。<ul><li>耳朵：孩子不画耳朵可能有逆反心理，不愿家长口罗嗦；画大耳朵的受测者如果画的不是卡通形象，可能比较敏感；</li><li>鼻子：画纽扣鼻的人可能智力有问题；成人画出鼻梁则表示对性的关注；</li><li>画牙齿：受测者有情绪、言语攻击性；</li><li>眼睛：眼睛画得太大的人比较敏感、多疑、偏执；画眼睫毛的人对美过分关注；不画瞳孔的人在人际交往中有回避倾向；</li><li>手：一般人只画形状，画手指的人太注意细节；手代表对环境的支配，伸得越开支配力越强，但一般在 90 度以下；画中手放到后面的受测者一般有被动攻击行为，如果是儿童则可能经常掩饰自己的错误行为；</li><li>脚：代表人的活动力，分得越开活动力越强；反之则比较拘谨，不善与人交往；</li><li>头发：把头发画得竖起来的受测者攻击性较强；</li><li>衣服：画口袋、纽扣的受测者比较注意细节；如果很注重对称则有强迫症的倾向；</li><li>裸体人：受测者有品行障碍或显露癖；</li><li>画出内脏：受测者有精神分裂症的倾向。</li></ul></li></ul><ul><li>房树人图在白纸中的位置 - 位置： - 居中：受测者自我意识较强，以自我为中心； - 偏左：受测者留恋过去； - 偏右：受测者憧憬未来； - 偏上：受测者喜欢幻想； - 偏下：受测者注重现实，对安全较为关注； - 画在角落：受测者可能有病理性疾病。<ul><li>其他：<ul><li>在房树人之外添加很多附加物（如太阳等），这是对环境关注的表现。在房子外面画上了篱笆，则是他们缺乏安全感的表现。还有很多人画的房、树、人都是符号化的，这表明很多现代人心理防御性强，善于掩饰自己。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue常见知识点</title>
      <link href="/2018/03/10/vue-notes/"/>
      <url>/2018/03/10/vue-notes/</url>
      
        <content type="html"><![CDATA[<h5 id="I-什么是-MVVM"><a href="#I-什么是-MVVM" class="headerlink" title="I. 什么是 MVVM?"></a>I. 什么是 MVVM?</h5><p>MVVM 是 <code>Model-View-ViewModel</code> 的缩写。它是一种设计思想。<code>Model</code> 层代表数据模型，也可以在 <code>Model</code> 中定义数据修改和操作的业务逻辑；<code>View</code> 代表 UI 组件，它负责将数据模型转化成 UI 展现出来；<code>ViewModel</code> 是一个同步 <code>View</code> 和 <code>Model</code> 的对象。</p><p>在<strong>MVVM</strong>架构下，<code>View</code> 和 <code>Model</code> 之间并没有直接的联系，而是通过 <code>ViewModel</code> 进行交互，<code>Model</code> 和 <code>ViewModel</code>之间的交互是双向的，因此 <code>View</code> 数据的变化会同步到 <code>Model</code> 中，而 <code>Model</code> 数据的变化也会立即反应到 <code>View</code> 上。</p><p><code>ViewModel</code> 通过双向数据绑定把 <code>View</code> 层 和 <code>Mode</code> 层连接了起来，而 <code>View</code> 和 <code>Model</code> 之间的同步工作完全是自动的，不需要手动去操作 <strong>DOM</strong> 节点，不需要灌输主句状态的同步问题，复杂的数据状态维护完全由 <strong>MVVM</strong> 来统一管理。</p><h5 id="II-MVVM-和-MVC-的区别？"><a href="#II-MVVM-和-MVC-的区别？" class="headerlink" title="II. MVVM 和 MVC 的区别？"></a>II. MVVM 和 MVC 的区别？</h5><p><strong>MVC</strong> 和 <strong>MVVM</strong> 都是一种设计思想。主要区别是 <strong>MVC</strong> 中 <code>Controller</code> 演变成了 <strong>MVVM</strong> 中的 <code>ViewModel</code>。 <em>*MVVM\</em> 主要解决了 <code>MCV</code> 中大量的 <em><em>DOM\</em>\</em> 操作是页面渲染性能降低，加载速度变慢，从而影响了用户体验。 而且当 <code>Model</code> 层数据频繁发生变化时，开发者需要手动更新 <code>View</code> 层。</p><h5 id="III-Vue-的优点是什么？"><a href="#III-Vue-的优点是什么？" class="headerlink" title="III. Vue 的优点是什么？"></a>III. Vue 的优点是什么？</h5><ul><li><p>a. 低耦合。视图层(View) 可以独立于 <code>Model</code> 变化和修改，一个 <code>ViewModel</code> 可以绑定到不同改的 <code>View</code> 上，当 <code>View</code> 发生变化 <code>Model</code> 可以不变，当 <code>Model</code> 变化的时候 <code>View</code> 也可以不变。</p></li><li><p>b. 可重用性。你可以把一些视图层逻辑放在一个 <code>ViewModel</code> 中，让很多 <code>View</code> 重用这段视图逻辑。</p></li><li><p>c. 独立开发。开发人员可以专注于业务逻辑和数据的开发(<code>ViewModel</code>)，设计人员可以专注于页面设计，使用 <code>Expression Blend</code> 可以很容易设计界面并生成 <strong>xml</strong> 代码。</p></li><li><p>d. 可测试。界面素来是比较难于测试的，而现在测试可以针对 <code>ViewModel</code> 来写专门的测试代码。</p></li></ul><h5 id="IV-Vue2-0-生命周期是什么？"><a href="#IV-Vue2-0-生命周期是什么？" class="headerlink" title="IV. Vue2.0 生命周期是什么？"></a>IV. Vue2.0 生命周期是什么？</h5><p><strong>Vue</strong> 的生命周期总共有 创建前/后，载入前/后，销毁前/后。</p><ul><li><p>a. 创建前/后：在 <code>beforeCreate</code> 阶段，<em>Vue</em> 实例的挂载元素 <code>el</code> 和数据对象 <code>data</code> 都为 <code>undefined</code> ，还未初始化。在 <code>create</code> 阶段，<em>vue</em> 实例的数据对象 <em>data</em> 有了值，但 <em>el</em> 仍然没有。</p></li><li><p>b. 载入前/后：在 <code>beforeMount</code> 阶段，<em>Vue</em> 实例的 <code>$el</code> 和 <code>data</code> 都初始化了，但还是挂载之前虚拟的 <code>DOM</code> 节点，<code>data.message</code> 还未替换。在 <code>mounted</code> 阶段，<em>Vue</em> 实例挂载完成，<code>data.message</code> 成功渲染。</p></li><li><p>c. 更新前/后：当 <code>data</code> 发生变化时，会触发 <code>beforeUpdate</code> 和 <code>update</code> 方法。</p></li><li><p>d. 销毁前/后: 在执行 <code>destroy</code> 方法后，对 <code>data</code>的改变不会再触发周期函数，说明此时 <em>Vue</em> 实例已经解除了事件监听以及和 <code>DOM</code> 的绑定，但是 <code>DOM</code>结构依然存在。</p></li></ul><h5 id="V-Vue1-0-和-Vue2-0的对比"><a href="#V-Vue1-0-和-Vue2-0的对比" class="headerlink" title="V. Vue1.0 和 Vue2.0的对比"></a>V. <a href="https://v1.vuejs.org/guide/">Vue1.0</a> 和 <a href="https://vuejs.org/">Vue2.0</a>的对比</h5><ul><li>1.片段代码: 在 <code>Vue2.0</code> 中，每个组件模板中，必须有一个根元素，来包裹所有的元素。</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 之前:   在1.0使用时完全没问题 --></span><p><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>我是组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>我是加粗标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><br><span class="token comment">&lt;!– 现在:  必须有根元素，包裹住所有的代码 –&gt;</span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">“</span>aaa<span class="token punctuation">“</span></span><span class="token punctuation">&gt;</span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>我是组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>我是加粗标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><ul><li>2.生命周期见下表</li></ul><table><thead><tr><th align="left">vue1.0</th><th align="left">vue2.0</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">init</td><td align="left">beforeCreate</td><td align="left">组件实例刚被创建，组件属性计算之前，如 data 属性等。</td></tr><tr><td align="left">created</td><td align="left">created</td><td align="left">组件实例创建完成，属性已绑定，但 <strong>DOM</strong> 还未生成，<code>$el</code>属性还不存在。</td></tr><tr><td align="left">beforeCompile</td><td align="left">boforeMount</td><td align="left">模板编译/挂载之前</td></tr><tr><td align="left">compiled</td><td align="left">mounted</td><td align="left">模板编辑/挂载之后</td></tr><tr><td align="left">ready</td><td align="left">mounted</td><td align="left">模板编译/挂载之后（不保证组件已在 <code>document</code> 中）</td></tr><tr><td align="left">-</td><td align="left">beforeUpdate</td><td align="left">组件更新之前</td></tr><tr><td align="left">-</td><td align="left">updated</td><td align="left">组件更新之后</td></tr><tr><td align="left">-</td><td align="left">activated</td><td align="left">for <code>keep-alive</code> ，组件被激活时调用</td></tr><tr><td align="left">-</td><td align="left">deactivated</td><td align="left">for <code>keep-alive</code> ，组件被移除时调用</td></tr><tr><td align="left">attached</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">deattached</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">beforeDestroy</td><td align="left">beforeDestroy</td><td align="left">组件销毁前调用</td></tr><tr><td align="left">destroyed</td><td align="left">destroyed</td><td align="left">组件销毁后调用</td></tr></tbody></table><ul><li>3.过滤器<br>2.0 删除了 1.0 所有自带的过滤器，将不再是传参的方式调用，如下：</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>msg <span class="token operator">|</span> mimi <span class="token string">'12'</span> <span class="token string">'5'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>而现在2.0中，要使用过滤器，必须要自定义一个过滤器:</code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">"toDou"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> n <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> n <span class="token operator">+</span> a <span class="token operator">+</span> b <span class="token operator">:</span> <span class="token string">""</span> <span class="token operator">+</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用过滤器</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#123;</span>    msg <span class="token operator">|</span> <span class="token function">mimi</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>4.<code>v-for</code>循环<ul><li>在 1.0 中循环渲染时会使用到 <code>tranck-by=&quot;$indec&quot;</code>来提高 for 循环的性能，而在 2.0，使用重复数据将不会报错，同时也去掉了一些隐式变量如：index 、 key，如果要用到 <code>index</code> 和 <code>key</code> 则可通过 ES6 的语法来获取：</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">v-for="(val,index) in rows"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>* 关于整数循环，1.0的整数循环是从0开始的，2.0的整数循环则是从1开始的。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 个人笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试知识点</title>
      <link href="/2018/02/09/front-end-md/"/>
      <url>/2018/02/09/front-end-md/</url>
      
        <content type="html"><![CDATA[<h5 id="1-CSS-盒模型"><a href="#1-CSS-盒模型" class="headerlink" title="1. CSS 盒模型"></a>1. CSS 盒模型</h5><ul><li><p>css 属性：分为 W3C 标准盒模型和 IE 标准盒模型。大多数浏览器采用 W3C 标准模型，而 IE 中采用微软自己的标准。</p></li><li><p>怪异盒模型：是指 部分浏览器在采用 W3C 标准的同时还保留了原来的解析模式，这种情况主要表现在 IE 内核的浏览器中。</p></li><li><p>怪异模式的触发：当不对 <code>Doctype</code> 进行定义时，则会触发怪异模式。</p></li><li><p>标准模式下：一个块的总宽度 = <code>width + margin(左右) + padding(左右) + border(左右)</code> 。</p></li><li><p>怪异模式下：一个块的总宽度 = <code>width + margin(左右)</code> ，因为 <code>width</code> 已经包含了 <code>padding</code> 和 <code>border</code> 值。</p></li></ul><h4 id="2-box-sizing-应用场景"><a href="#2-box-sizing-应用场景" class="headerlink" title="2. box-sizing 应用场景"></a>2. box-sizing 应用场景</h4><ul><li>语法：box-sizing:content-box || border-box || inherit;</li><li>使用场景： 1.特殊场景的布局：假设一个场景，设置子类元素的 <code>margin</code> 或者 <code>border</code> 时，可能会撑破父层元素的尺寸，这时我就需要使用 <code>box-sizing: border-box</code> 来讲 <code>border</code> 包含进元素的尺寸中，这样就不会存在撑破父层元素的情况了。 2.统一风格的表格元素：表单中有些 input 展现的还是传统的 IE 盒模型，带有一些默认的样式，而且在不同平台或者浏览器下的表现不一，造成了表单层展现的差异，此时就可以通过 <code>box-sizing</code> 属性来构建一个风格统一的表单元素。</li></ul><h4 id="3-Flex-布局。"><a href="#3-Flex-布局。" class="headerlink" title="3.Flex 布局。"></a>3.Flex 布局。</h4><ul><li>09 年 W3C 提出了 Flex 布局，可以简便、完整、响应地实现各种页面布局。</li><li>Flex 是 Flexible Box 的缩写，意味“弹性布局”，用来为盒装模型提供最大的灵活性。</li><li>网页布局的传统解决方案，基于盒状模型，依赖 <code>display</code> 属性 + <code>position</code> 属性 + <code>float</code>属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</li><li>用法</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector"># 任何一个容器都可以使用Flex布局 .box</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector"># 行内元素也可以使用Flex布局 .box</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector"># Webkit 内核的浏览器，必须加上 -webkit 前缀 .box</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-flex<span class="token punctuation">;</span> <span class="token comment">/* Safari */</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>注意，设为 Flex 布局以后，子元素的 <code>float</code> 、<code>clear</code> 和<code>vertical-align</code> 属性将失效。</em></p><ul><li><p>采用 Flex 布局的元素，都成为 <strong>Flex 容器</strong>，所有子元素自动成为容器成员，成为 <strong>Flex 项目</strong>。</p></li><li><p>水平的主轴（main axis）和垂直的交叉轴（cross axis）。</p></li><li><p>主轴的开始位置（与边框的交叉点）叫做 <code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p></li><li><p>属性：</p></li></ul><ol><li>flex-direction: 决定主轴的方向，即排列方向。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> * row →| row-reverse ←| column ↓| column-reverse ↑<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>flex-wrap: 决定一条轴线上项目的换行。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> * nowrap 不换行| wrap 换行第一行在上方| wrap-reverse    换行第一行在下方<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>flex-flow: flex-direction 和 flex-wrap 的简写。 默认值为 <code>row nowrap</code>。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-flow</span><span class="token punctuation">:</span> &lt;flex-direction> || &lt;flex-wrap><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>justify-content: 定义项目在主轴上的对齐方式。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> * flex-start 左对齐| flex-end 右对齐| center 居中|    space-between 两端对齐| space-around 每个项目两侧的间隔相等<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>align-items: 定义项目在交叉轴上的对齐方式。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start 起点对齐| flex-end 终点对齐| center 中点对齐| baseline    基线对齐| stretch 占满整个容器的高度<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>aligin-content: 定义多根轴线的对齐方式。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">box</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around |    stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>项目属性</li></ul><ol><li>order: 定义项目的排列属性。数值越小，排列越靠前，默认为 0.</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">order</span><span class="token punctuation">:</span> &lt;integer><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>flex-grow: 定义项目的放大比例，默认为 0，表如果存在剩余空间，也不能放大。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">item</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span> <span class="token comment">/* default 0 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>flex-shrink: 定义项目的缩小比例，默认为 1，表如果空间不足，该项目将缩小。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span> <span class="token comment">/* default 1 */</span>    0则不缩小<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>flex-basis: 定义在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性进行计算主轴是否有多余空间。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-basis</span><span class="token punctuation">:</span> &lt;length> | auto<span class="token punctuation">;</span> <span class="token comment">/* default auto */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>flex: 是 <code>flex-grow</code> , <code>flex-shrink</code> 和 <code>flex-basis</code> 的简写， 默认值为 <code>0 1 auto</code>。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> none | [ &lt; <span class="token string">"flex-grow"</span> > &lt; <span class="token string">"flex-shrink"</span> >? || &lt; <span class="token string">"flex-basis"</span> > ]<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><ol start="6"><li>align-self: 允许单个项目有与其他项目不一样的对齐方式，可覆盖 <code>align-items</code> 属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code> 属性，如果没有父元素，则等同于<code>stretch</code>。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> auto | flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-未知元素上下左右垂直居中"><a href="#4-未知元素上下左右垂直居中" class="headerlink" title="4.未知元素上下左右垂直居中"></a>4.未知元素上下左右垂直居中</h4><ul><li>flex 实现方式：</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.div</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-js-对象、原型链、构造函数"><a href="#5-js-对象、原型链、构造函数" class="headerlink" title="5.js 对象、原型链、构造函数"></a>5.js 对象、原型链、构造函数</h4><ul><li><code>__proto__</code>:每个 JS 对象一定对应一个原型对象，并继承原型对象的属性和方法。</li><li>prototye: 只有函数才有 <code>prototype</code>属性。JS 通过函数来模拟类，当创建函数时，JS 会为这个函数自动添加<code>prototype</code>属性，值是空对象。而一旦把这个函数当做构造函数（<code>constructor</code>）调用（即通过<code>new</code>调用）,JS 就会帮你创建该构造函数的实例，实例继承构造函数<code>prototype</code>的所有属性和方法（实例通过设置自己的 <code>__proto__</code> 指向承构造函数的 prototype 来实现这种继承）。</li><li>JS 通过<code>__proto__</code> 和<code>prototype</code>的合作实现了原型链，以及对象的继承。</li><li>构造函数，通过 <code>protytype</code>来存储要共享的属性和方法，也可以设置<code>prototype</code>指向现存的对象来继承该对象。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> one <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>one<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>two<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>one<span class="token punctuation">.</span>toString <span class="token operator">===</span> one<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>toString<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对象的 <code>__proto__</code> 指向自己的构造函数的 <code>prototype</code> 。<code>one.__proto__.__proto__...</code> 的原型链有次产生，包括操作符 <code>instanceof</code> 正是通过探测 <code>obj.__proto__.__proto__... === Constructor.prototype</code> 来验证 <code>obj</code> 是否是 <code>Constructor</code> 的实例。<br>回到开头的代码，<code>two = new Object()</code>中 Object 是构造函数，所以 <code>two.__proto__</code> 就是 <code>Object.prototype</code> 。至于 <code>one</code> ，ES 规范定义对象字面量的原型就是 <code>Object.prototype</code> 。</strong></p><ul><li><code>Function.prototype</code> 和 <code>Function.__proto__</code> 都指向 <code>Function.prototype</code> 。</li><li><code>Object.prototype.__proto__ == null</code> ,说明原型链到 <code>Object.prototye</code> 终止。</li></ul><p>结论：</p><ul><li><ol><li>所有对象均从 <code>Object.prototye</code> 继承属性。</li></ol></li><li><ol start="2"><li><code>Function.prototype</code> 和 <code>Function.prototype</code> 为同一个对象。</li></ol></li><li><ol start="3"><li><code>Function.prototype</code> 直接继承 <code>root(Object.prototype)</code> 。</li></ol></li></ul><p><strong>一句话总结：先有<code>Object.prototype</code>(原型链顶端),<code>Function.prototype</code>继承<code>Object.prototype</code>而产生，<code>Function</code>和<code>Object</code>和其他构造函数继承<code>Function.prototype</code>而产生。</strong></p><h4 id="6-常见的布局解决方案"><a href="#6-常见的布局解决方案" class="headerlink" title="6.常见的布局解决方案"></a>6.常见的布局解决方案</h4><ul><li><p>1.居中布局</p><ul><li>水平居中</li><li>垂直居中</li></ul></li><li><p>2.单列布局：</p><ul><li>定宽，水平居中</li></ul></li><li><p>3.二列布局&amp;三列布局</p><ul><li><code>float + margin</code> 左右浮动，中间 <code>margin</code></li><li>position + margin 左右绝对定位，中间 <code>margin</code></li><li>圣杯布局 <code>(float + 负margin + padding + position)</code></li><li>双飞翼布局 <code>(float + 负margin + margin)</code></li><li><code>Flex</code> 布局</li></ul></li></ul><h4 id="7-关于-WebSocket"><a href="#7-关于-WebSocket" class="headerlink" title="7.关于 WebSocket"></a>7.关于 WebSocket</h4><ul><li>WebSocket 是 HTML5 提出的一个协议规范。</li><li>WebSocket 约定了一个通信的规范，通过一个握手的机制，客户端（浏览器）和服务器（webserver）之间能简历一个类型 TCP 的链接，从而方便 c-s 之间的通信。在 websocket 出现之前，web 交互一般是基于 http 协议的短连接或者长连接。</li><li>WebSocket 是为解决客户端与服务端实时通信而产生的技术。websocket 协议本质上是一个基于 TCP 的协议，是先通过 HTTP/HTTPS 协议发起一条特殊的 http 请求进行握手后创建一个用于交换的 TCP 连接，此后服务端与客户端通过此 TCP 连接进行实时通信。</li><li><strong>优点</strong>： 服务器和客户端可以在给定的时间范围内的任意时刻，相互推送信息。浏览器和服务器只需要做一个握手的动作，在建立连接之后，服务器可以主动传送数据给客户端，客户端也可以随时向服务器发送数据。此外，服务器与客户端之间叫唤的标头信息很小。</li><li>以前 web server 实现推送技术或者即时通讯，用的都是轮询（polling），在特定的时间间隔由浏览器自动发出请求，将服务器的消息主动拉取，在这种情况下，浏览器需要不断地向服务器发送请求，然而 HTTP request 的 header 是非常长的，里面包含的数据可能只是一个很小的值，这样就会占用很多的带宽和服务器资源。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之Set个人解读</title>
      <link href="/2018/02/07/es6-set/"/>
      <url>/2018/02/07/es6-set/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="http://es6.ruanyifeng.com/#docs/set-map">ECMAScript 6 入门- Set 和 Map 数据结构</a></p><h5 id="I-定义："><a href="#I-定义：" class="headerlink" title="I. 定义："></a>I. 定义：</h5><p>Set 本身是一个构造函数，用来生成 Set 数据结构。</p><p>Set 是 ES6 中提供的新的数据结构，结构类似于数组，但 Set 中的成员的值都是唯一的，没有重复值。</p><p>Set 函数可以将一个数组作为参数，将其初始化。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [1, 2, 3, 4, 4];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="II-Set-实例的属性"><a href="#II-Set-实例的属性" class="headerlink" title="II. Set 实例的属性"></a>II. Set 实例的属性</h5><ul><li>Set 实例有以下两个属性：</li></ul><ul><li><code>Set.prototype.constructor</code>：构造函数，默认就是 Set 函数。</li><li><code>Set.prototype.size</code>：返回 Set 实例的成员总数。</li></ul><h5 id="III-Set-实例的方法"><a href="#III-Set-实例的方法" class="headerlink" title="III. Set 实例的方法"></a>III. Set 实例的方法</h5><ul><li>Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。四个操作方法如下：</li></ul><ul><li><code>add(value)</code>: 添加某个值，返回 Set 结构本身。</li><li><code>delete(value)</code>: 删除某个值，返回一个布尔值，表示删除是否成功。</li><li><code>has(value)</code>: 返回一个布尔值，表示该值是否为 Set 的成员。</li><li><code>clear(value)</code>: 清楚所有成员，没有返回值。</li></ul><p><strong>初级用法：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注意2被加入了两次</span>s<span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment">// 2</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>s<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Array.from</code> 方法可以将 Set 结构转为数组。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> array <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这就提供了数组去重的一种方式：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">dedupe</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">dedupe</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>中级用法</strong></p><p>遍历操作</p><p>Set 实例的四个遍历方法：</p><ul><li><code>keys()</code>: 返回键名的遍历器</li><li><code>values()</code>: 返回键值的遍历器</li><li><code>entries()</code>: 返回键值对的遍历器</li><li><code>forEach()</code>: 使用回调函数遍历每个成员</li></ul><p><em>需要特别指出的是，Set 的遍历顺序就是插入顺序。这个特性有时非常有用，比如在使用 Set 保存一个回调函数列表，调用时就能保证按照添加顺序调用。</em></p><ul><li><p>(1) <code>keys()</code>, <code>values()</code>, <code>entries()</code></p><pre><code>    `keys`方法、`values`方法、`entries`方法返回的都是遍历器对象。由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys方法和values方法的行为完全一致。</code></pre></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> set<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// red</span><span class="token comment">// green</span><span class="token comment">// blue</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> set<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// red</span><span class="token comment">// green</span><span class="token comment">// blue</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> set<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ["red", "red"]</span><span class="token comment">// ["green", "green"]</span><span class="token comment">// ["blue", "blue"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>上面代码中，`entries` 方法返回的遍历器，同事包括键名和键值，所以每次输出一个数组，它的两个成员完全相等。</code></pre><p>Set 结构的实例默认可遍历，它的默认遍历器生成函数就是它的 <code>values()</code> 方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Set</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token class-name">Set</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>values<span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>这意味着，可以省略    `values` 方法，直接用    `for…of`遍历循环 Set。</code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">of</span> set<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// red</span><span class="token comment">// green</span><span class="token comment">// blue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>(2) <code>forEach()</code></p><pre><code>    `forEach` 方法用于对每个成员执行某种操作，没有返回值。</code></pre></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1:1</span><span class="token comment">// 2:2</span><span class="token comment">// 4:4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>上面代码说明， `forEach` 方法的参数就是一个处理函数，该函数的参数与数组的 `forEach` 一致，依次为 键值、键名、集合本身 。Set 的键名和键值永远是一样的。另外，`forEach`方法还可以有第二个参数，表示绑定处理函数内部的 `this` 对象。</code></pre><ul><li><p>(3)遍历的应用</p><pre><code>    扩展运算符(`...`) 内部使用 `for…of` 循环，所以也可以用于 Set 结构。</code></pre></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// ['red', 'green', 'blue']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>扩展运算符和 Set 结构相符合，就可以进行数组去重了。</code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> unique <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// [3, 5, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>进阶方法</strong></p><p>数组的 <code>map</code> 和 <code>filter</code> 方法也可适用于 Set。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  返回的set结构： &#123;2, 4, 6&#125;;</span><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回Set结构：&#123;2, 4&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 Set 实现并集（Union）、交集（Intersect）和差集（Difference）。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 并集</span><span class="token keyword">let</span> union <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Set &#123;1, 2, 3, 4&#125;</span><span class="token comment">// 交集</span><span class="token keyword">let</span> intersect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// set &#123;2, 3&#125;</span><span class="token comment">// 差集</span><span class="token keyword">let</span> difference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Set &#123;1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想在遍历操作中，同步改变原来的 Set 结构，目前没有直接的方法，但有两种变通方法。一种是利用原 Set 结构映射出一个新的结构，然后赋值给原来的 Set 结构；另一种是利用 <code>Array.from</code> 方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 方法一</span><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// set的值是2, 4, 6</span><span class="token comment">// 方法二</span><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// set的值是2, 4, 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 个人笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>App Shell模型</title>
      <link href="/2018/02/06/app-shell-md/"/>
      <url>/2018/02/06/app-shell-md/</url>
      
        <content type="html"><![CDATA[<p>文章来自：<a href="https://developers.google.com/web/fundamentals/architecture/app-shell?hl=zh-cn">App Shell 模型  |  Web  |  Google Developers</a></p><p><strong>App Shell</strong> 架构是构建 Progressive Web App 的一种方式，这种应用能可靠且即时地加载到您的用户屏幕上，与本机应用相似。</p><p><strong>App Shell</strong> 是支持用户界面所需的最小的 HTML、CSS 和 JavaScript，如果离线缓存，可确保在用户重复访问时提供 <strong>即时</strong>、<strong>可靠的良好性能</strong>。这意味着并不是每次用户访问时都要从网络加载 App Shell，只需要从网络中加载必要的内容。</p><p>对于使用包含大量 JavaScript 的架构的 <a href="https://en.wikipedia.org/wiki/Single-page_application">单页应用</a>来说，App Shell 是一种常用方法。这种方法依赖渐进式缓存 Shell（使用<a href="https://developers.google.com/web/fundamentals/primers/service-workers/?hl=zh-cn">服务工作线程：简介  |  Web  |  Google Developers</a>）让应用运行。接下来，为使用 JavaScript 的每个页面加载动态内容。App Shell 非常适合用于在没有网络的情况下将一些初始 HTML 快速加载到屏幕上。</p><p><img src="App%20Shell%E6%A8%A1%E5%9E%8B/appshell.png" alt=""></p><p>换个说法，App Shell 就类似于您在开发本机应用时需要向应用商店发布的一组代码。 它是 UI 的主干以及让您的应用成功起步所需的核心组件，但可能并不包含数据。</p><p>注：请尝试<a href="https://codelabs.developers.google.com/codelabs/your-first-pwapp/?hl=zh-cn#0">Your First Progressive Web App</a>代码实验室，了解如何为天气应用构建和实现第一个 App Shell。<a href="https://www.youtube.com/watch?v=QhUzmR8eZAo&hl=zh-cn">使用 Shell Model 应用即时下载（第三季，第二集） - YouTube</a>也演练了这种模式。</p><h3 id="何时使用-App-Shell-模型"><a href="#何时使用-App-Shell-模型" class="headerlink" title="何时使用 App Shell 模型"></a>何时使用 App Shell 模型</h3><p>构建 PWA 并不意味着从头开始。如果您构建的是现代单页应用，那么您很可能使用的就是类似于 App Shell 的模型，不管您是否这么称呼它。根据您使用的内容库或框架的不同，详细内容可能略有不同，但该概念本身与框架无关。</p><p>App Shell 架构具有相对不变的导航以及一直变化的内容，对应于和网站意义重大。 大量现代 JavaScript 框架和内容库已经鼓励拆分应用逻辑及其内容，从而使这种架构更能直接应用。对于只有静态内容的某一类网站，您也可以使用相同的模型，但网站 100% 是 App Shell。</p><p>如需了解 Google 构建 App Shell 架构的方式，请查看构建<a href="https://developers.google.com/web/showcase/2016/iowa2016?hl=zh-cn">Building the Google I/O 2016 Progressive Web App  |  Web  |  Google Developers</a>。这个真实的应用以 SPA 开始创建 PWA，使用服务工作线程预先缓存内容、动态加载新页面、在视图之间完美过渡，并且在第一次加载后重用内容。</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>使用服务工作线程的 App Shell 架构的优势包括：</p><ul><li><strong>始终快速的可靠性能</strong>。重复访问速度极快。 第一次访问时即可缓存静态资产和 UI（例如 HTML、JavaScript、图像和 CSS），以便在重复访问时即时加载。内容可能会在第一次访问时缓存到系统中，但一般会在需要时才进行加载。</li><li><strong>如同本机一样的交互</strong>。通过采用 App Shell 模型，您可以构建如同本机应用一样的即时导航和交互，包括离线支持。</li><li><strong>数据的经济使用</strong>。其设计旨在实现最少的数据使用量，并且可以正确判断缓存的内容，因为列出不需要的文件（例如，并不是每个页面都显示的大型图像）会导致浏览器下载的数据超出所必需的量。尽管在西方国家和地区中，数据相对较廉价，但新兴市场并非如此，这些市场中连接和数据费用都非常昂贵。</li></ul><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><hr><p>App Shell 应能完美地执行以下操作：</p><ul><li>快速加载</li><li>尽可能使用较少的数据</li><li>使用本机缓存中的静态资产</li><li>将内容与导航分离开来</li><li>检索和显示特定页面的内容（HTML、JSON 等）</li><li>可选：缓存动态内容<br>App Shell 可保证 UI 的本地化以及从 API 动态加载内容，但同时不影响网络的可链接性和可检测性。 用户下次访问您的应用时，应用会自动显示最新版本。无需在使用前下载新版本。</li></ul><p>注：<a href="https://github.com/GoogleChrome/lighthouse/find/master">Lighthouse</a>审核扩展可用于验证使用 App Shell 的 PWA 是否获得了高性能。 <a href="https://www.youtube.com/watch?v=LZjQ25NRV-E&hl=zh-cn">To the Lighthouse (Progressive Web App Summit 2016) - YouTube</a>介绍了使用这个工具优化 PWA 的过程。</p><h3 id="构建您自己的-App-Shell"><a href="#构建您自己的-App-Shell" class="headerlink" title="构建您自己的 App Shell"></a>构建您自己的 App Shell</h3><hr><p>构建您自己的应用，明确区分页面 Shell 和动态内容。 一般而言，您的应用应加载尽可能最简单的 Shell，但初始下载时应包含足够的有意义的页面内容。 确定每个数据来源的速度与数据新鲜度之间的正确平衡点。</p><p><img src="App%20Shell%E6%A8%A1%E5%9E%8B/wikipedia.jpg" alt=""></p><p>Jake Archibald 的离线维基百科应用<a href="https://wiki-offline.jakearchibald.com/wiki/Rick_and_Morty">Rick and Morty - Offline Wikipedia</a>就是使用 App Shell 模型的 PWA 好例子。它会在重复访问时即时加载，但同时使用 JS 动态抓取内容。系统随后会离线缓存此内容，以备以后访问。</p><h3 id="App-Shell-的-HTML-示例"><a href="#App-Shell-的-HTML-示例" class="headerlink" title="App Shell 的 HTML 示例"></a>App Shell 的 HTML 示例</h3><hr><p>此示例将核心应用基础架构和 UI 从数据中分离出来。请务必使初始加载尽可能简单，在打开网络应用后仅显示页面的布局。有些数据来自于应用的索引文件（内联 DOM、样式），其他数据加载自外部脚本和样式表。</p><p>所有 UI 和基础架构都使用服务工作线程本地缓存，因此，随后的加载将仅检索新数据或发生更改的数据，而不是必须加载所有数据。</p><p>您工作目录中的 <code>index.html</code> 文件内容应类似于以下代码。 这是实际内容的子集，不是完整的索引文件。 让我们看看它包含的内容。</p><ul><li>用户界面“主干”的 HTML 和 CSS，包含导航和内容占位符。</li><li>用于处理导航和 UI 逻辑的外部 JavaScript 文件 (<code>app.js</code>)，以及用于显示从服务器中检索的帖子并使用 IndexedDB 等存储机制将其存储在本地的代码。</li><li>网络应用清单和用于启用离线功能的服务工作线程加载程序。</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>App Shell<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/manifest.json<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>App Shell<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>styles/inline.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header__title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>App Shell<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialog-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loader<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- Show a spinner or placeholders for content --></span><pre><code>&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;app.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;serviceWorker&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;    navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serviceWorker      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/sw.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;registration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;// Registration was successful&lt;/span&gt;        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;          &lt;span class=&quot;token string&quot;&gt;&quot;ServiceWorker registration successful with scope: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;          registration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scope        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;// registration failed :(&lt;/span&gt;        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ServiceWorker registration failed: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;</code></pre><p>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><p><em>注：请参阅 <a href="https://app-shell.appspot.com/，查看一个非常简单的、使用">https://app-shell.appspot.com/，查看一个非常简单的、使用</a> App Shell 和内容服务器端渲染的 PWA 的真实演示。App Shell 可通过使用任意内容库或框架实现（如我们的所有框架上的 Progressive Web App 讲座中<a href="https://www.youtube.com/watch?v=srdKq0DckXQ&hl=zh-cn">Progressive Web Apps across all frameworks - Google I/O 2016 - YouTube</a>所述）。您可以使用 Polymer (<a href="https://shop.polymer-project.org/">SHOP</a>) 和 React （<a href="https://github.com/insin/react-hn">ReactHN</a> 、iFixit）查看示例。</em></p><h3 id="缓存-App-Shell"><a href="#缓存-App-Shell" class="headerlink" title="缓存 App Shell"></a>缓存 App Shell</h3><hr><p>您可以使用手动编写的服务工作线程或通过 sw-precache 等静态资产预缓存工具生成的服务工作线程缓存 App Shell。</p><p>注：这些示例仅为呈现一般信息以及进行说明而提供。 您的应用使用的实际资源很可能不同。</p><h3 id="手动缓存-App-Shell"><a href="#手动缓存-App-Shell" class="headerlink" title="手动缓存 App Shell"></a>手动缓存 App Shell</h3><p>以下是使用服务工作线程的 <code>install</code> 事件将 <code>App Shell</code> 中的静态资源缓存到 Cache API <a href="https://developer.mozilla.org/en-US/docs/Web/API/Cache">Cache - Web APIs | MDN</a> 中的服务工作线程代码示例:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ar cacheName <span class="token operator">=</span> <span class="token string">'shell-content'</span><span class="token punctuation">;</span><span class="token keyword">var</span> filesToCache <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'/css/styles.css'</span><span class="token punctuation">,</span>  <span class="token string">'/js/scripts.js'</span><span class="token punctuation">,</span>  <span class="token string">'/images/logo.svg'</span><span class="token punctuation">,</span>  '<span class="token operator">/</span>offline<span class="token punctuation">.</span>html’<span class="token punctuation">,</span>  '<span class="token operator">/</span>’<span class="token punctuation">]</span><span class="token punctuation">;</span>self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'install'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[ServiceWorker] Install'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  e<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>    caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>cacheName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cache</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[ServiceWorker] Caching app shell'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>filesToCache<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-sw-precache-缓存-App-Shell"><a href="#使用-sw-precache-缓存-App-Shell" class="headerlink" title="使用 sw-precache 缓存 App Shell"></a>使用 sw-precache 缓存 App Shell</h3><hr><p>sw-precache 生成的服务工作线程会缓存并提供您在构建过程中配置的资源。 您可以让此线程预先缓存构成 App Shell 的每个 HTML、JavaScript 和 CSS 文件。 所有资源都可以离线工作，并且可在随后的访问中快速加载相关内容，无需其他操作。</p><p>以下是在 gulp 构建过程中使用 sw-precache 的基本示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"generate-service-worker"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> swPrecache <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"sw-precache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> rootDir <span class="token operator">=</span> <span class="token string">"app"</span><span class="token punctuation">;</span>  swPrecache<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>    path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>rootDir<span class="token punctuation">,</span> <span class="token string">"service-worker.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      staticFileGlobs<span class="token operator">:</span> <span class="token punctuation">[</span>rootDir <span class="token operator">+</span> <span class="token string">"/**/*.&#123;js,html,css,png,jpg,gif&#125;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      stripPrefix<span class="token operator">:</span> rootDir    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    callback  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如需了解有关静态资产缓存的详细信息，请参阅使用 sw-precache 添加服务工作线程代码实验室<a href="https://codelabs.developers.google.com/codelabs/sw-precache/index.html?index=..%2F..%2Findex&hl=zh-cn#0">Adding a Service Worker with sw-precache</a>。</p><p>注：sw-precache 对于离线缓存您的静态资源非常有用。对于运行时/动态资源，我们建议使用我们的免费内容库<a href="https://github.com/GoogleChromeLabs/sw-toolbox">sw-toolbox</a>。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><hr><p>使用服务工作线程的 <code>App Shell</code> 是实现离线缓存的强大模式，但同时还可以针对 <code>PWA</code> 的重复访问实现即时加载这一重要性能。您可以缓存自己的 <code>App Shell</code> ，以便它可以离线使用并使用 <code>JavaScript</code> 填充其内容。</p><p>如果重复访问，这样还可让您在没有网络的情况下（即使您的内容最终源自网络）在屏幕上获得有意义的像素。</p>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue.js组件使用和开发规范</title>
      <link href="/2017/07/13/vue-use-dev-normal/"/>
      <url>/2017/07/13/vue-use-dev-normal/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://cn.vuejs.org/v2/style-guide/">Vue.js风格指南</a></p><h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><h3 id="开发之前"><a href="#开发之前" class="headerlink" title="开发之前"></a>开发之前</h3><p>尽量使用最新ES语法，具体如下：</p><ul><li>正确使用<code>const</code>和<code>let</code>替代<code>var</code></li><li>使用模板字符串<code>$&#123;this.data&#125;</code></li><li>将工具函数等依赖单独分离，并用<code>import</code>导入</li><li>对象字面量缩写、箭头函数</li><li>通用工具集可以在<code>utils/assist</code>内扩展</li><li>在<code>local/routers</code>内测试组件</li></ul><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="1-命名"><a href="#1-命名" class="headerlink" title="1,命名"></a>1,命名</h4><ul><li>尽量简单、表意</li><li><code>export</code> 出的对象是用驼峰命名法，比如 <code>Page</code> 、 <code>ButtonItem</code></li><li>如组件需要嵌套使用，子组件命名在父组件后加<code>-item</code>，比如<code>timeline</code>及<code>timeline-item</code></li></ul><h4 id="2-目录"><a href="#2-目录" class="headerlink" title="2,目录"></a>2,目录</h4><ul><li>组件应在目录 <code>compoents/</code>下，每个组件要有单独的目录，目录命名是用小写，入口文件为<code>index.js</code>，导出组件，再由<code>index.js</code> 暴露给使用者</li><li>每个组件的文件名当使用小写， 但必须与组件的名称一致，比如 <code>timeline.vue</code>和<code>timeline-item.vue</code></li></ul><h4 id="3-属性"><a href="#3-属性" class="headerlink" title="3,属性"></a>3,属性</h4><ul><li>必须规定<code>type</code>或者使用<code>validator</code>进行验证</li><li>如果<code>validator</code>验证为几个值中的一个，则使用<code>utils/assist</code>内的<code>oneOf</code>函数进行验证</li><li>如果有尺寸的参数<code>size</code>，则只能使用<code>small</code> 、<code>large</code>，默认是适中，可不写</li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="1-命名-1"><a href="#1-命名-1" class="headerlink" title="1,命名"></a>1,命名</h4><ul><li>使用<code>on-</code> 为前缀，比如<code>on-change</code></li></ul><h4 id="2-规范"><a href="#2-规范" class="headerlink" title="2,规范"></a>2,规范</h4><ul><li>使用<code>$emit</code>来对外触发事件，而不用<code>$dispatch</code>和<code>$broadcast</code></li><li>嵌套组件之间通信，使用<code>$parent</code>和<code>$children</code>，而不用<code>$emit</code>，避免使用这错误使用自定义事件</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>css前缀</li></ul><h2 id="使用规范"><a href="#使用规范" class="headerlink" title="使用规范"></a>使用规范</h2><p>使用 <code>:prop</code> 传递数据类型为<code>数字</code> 或 <code>boolean</code>时，必须带 <code>:</code>,比如：</p><p>正确的使用方法：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>Page <span class="token operator">:</span>current<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">:</span>total<span class="token operator">=</span><span class="token string">"100"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Page<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>错误的使用方法：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>Page current<span class="token operator">=</span><span class="token string">"1"</span> total<span class="token operator">=</span><span class="token string">"100"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Page<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Http静态服务器环境</title>
      <link href="/2017/07/02/nginx/"/>
      <url>/2017/07/02/nginx/</url>
      
        <content type="html"><![CDATA[<p>搭建静态网站，首先需要部署环境。下面的步骤，将告诉大家如何在服务器上通过 Nginx 部署 HTTP 静态服务</p><ul><li>安装Nginx</li></ul><p>在 <code>CentOS</code> 上，可直接使用 <code>yum</code> 来安装 <code>Nginx</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> nginx -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，使用 <code>nginx</code> 命令启动 Nginx:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时，访问 http://&lt;您的域名&gt; 可以看到 Nginx 的测试页面<br>*<p style="color:red">如果无法访问，请重试用 <code>nginx -s reload</code> 命令重启 Nginx</p>*</p><ul><li>配置静态服务器访问路径</li></ul><p>外网用户访问服务器的 Web 服务由 Nginx 提供，Nginx 需要配置静态资源的路径信息才能通过 url 正确访问到服务器上的静态资源。</p><p>打开 <code>Nginx</code> 的默认配置文件 <em>/etc/nginx/nginx.conf</em> ，修改 Nginx 配置，将默认的<code>root /usr/share/nginx/html;</code> 修改为: <code>root /data/www;</code>，如下：<br>示例代码：<code>/etc/nginx/nginx.conf</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">user nginx<span class="token punctuation">;</span>worker_processes auto<span class="token punctuation">;</span>error_log <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>error<span class="token punctuation">.</span>log<span class="token punctuation">;</span>pid <span class="token operator">/</span>run<span class="token operator">/</span>nginx<span class="token punctuation">.</span>pid<span class="token punctuation">;</span>include <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>modules<span class="token operator">/</span> <span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>events <span class="token punctuation">&#123;</span>    worker_connections <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>http <span class="token punctuation">&#123;</span>    log_format  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" '</span>                      <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>                      <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span>    access_log  <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>    sendfile            on<span class="token punctuation">;</span>    tcp_nopush          on<span class="token punctuation">;</span>    tcp_nodelay         on<span class="token punctuation">;</span>    keepalive_timeout   <span class="token number">65</span><span class="token punctuation">;</span>    types_hash_max_size <span class="token number">2048</span><span class="token punctuation">;</span>    include             <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>mime<span class="token punctuation">.</span>types<span class="token punctuation">;</span>    default_type        application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    include <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span> <span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>    server <span class="token punctuation">&#123;</span>        listen       <span class="token number">80</span> default_server<span class="token punctuation">;</span>        listen       <span class="token punctuation">[</span><span class="token operator">:</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">80</span> default_server<span class="token punctuation">;</span>        server_name  _<span class="token punctuation">;</span>        root         <span class="token operator">/</span>data<span class="token operator">/</span>www<span class="token punctuation">;</span>        include <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span><span class="token keyword">default</span><span class="token punctuation">.</span>d<span class="token operator">/</span> <span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>        location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        error_page <span class="token number">404</span> <span class="token operator">/</span><span class="token number">404.</span>html<span class="token punctuation">;</span>            location <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">40</span>x<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        error_page <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>            location <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件将 <code>/data/www/static</code> 作为所有静态资源请求的根路径，如访问: <strong><em>http://&lt;您的域名&gt;/static/index.js</em></strong>，将会去 <code>/data/www/static/</code>目录下去查找 <strong>index.js</strong>。现在我们需要重启 Nginx 让新的配置生效，如</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启后，现在我们应该已经可以使用我们的静态服务器了，现在让我们新建一个静态文件，查看服务是否运行正常。</p><p>首先让我们在 <em>/data</em> 目录 下创建 <code>www</code> 目录，如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /data/www<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建第一个静态文件</li></ul><p>在 <strong>/data/www</strong> 目录下创建我们的第一个静态文件<code>index.html</code></p><p>示例代码：<code>/data/www/index.html</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>第一个静态文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Hello world！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在访问 <code>http://&lt;您的域名&gt;/index.html</code> 应该可以看到页面输出 [Hello world!]</p><p>到此，一个基于 <code>Nginx</code> 的静态服务器就搭建完成了，现在所有放在 /data/www 目录下的的静态资源都可以直接通过域名访问。</p><p><span>注：如果无显示，请刷新浏览器页面。</span></p>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Js页面中oss在https下web直传的问题</title>
      <link href="/2017/05/24/guan-yu-js-ye-mian-zhong-oss-zai-https-xia-web-zhi-chuan-de-wen-ti/"/>
      <url>/2017/05/24/guan-yu-js-ye-mian-zhong-oss-zai-https-xia-web-zhi-chuan-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>在页面中进行 <code>web端</code> 直传，开发环境下测试没有问题，但部署到服务器上时出现了问题，服务器上的站点是基于 <code>https</code> 协议进行访问的，在此情况下，<code>web端</code> 直传出现了异常，原因是在 <code>HTTPS</code> 网页中，不允许发起 <code>HTTP</code> 的请求，可以使用 <code>https</code> 的 <code>endpoint</code> ，示例如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSS<span class="token punctuation">.</span>Wrapper</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   region<span class="token operator">:</span> <span class="token string">'oss-cn-shanghai'</span><span class="token punctuation">,</span>   secure<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token comment">// 为true时，即允许发起http请求</span>  accessKeyId<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>   accessKeySecret<span class="token operator">:</span> <span class="token string">''</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩过的坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue使用阿里oss上传图片功能(二)</title>
      <link href="/2017/05/24/vue-ye-mian-shi-yong-a-li-oss-shang-chuan-tu-pian-gong-neng-er/"/>
      <url>/2017/05/24/vue-ye-mian-shi-yong-a-li-oss-shang-chuan-tu-pian-gong-neng-er/</url>
      
        <content type="html"><![CDATA[<h3 id="主要介绍OSS管理控制台设置访问权限、角色等。"><a href="#主要介绍OSS管理控制台设置访问权限、角色等。" class="headerlink" title="主要介绍OSS管理控制台设置访问权限、角色等。"></a>主要介绍OSS管理控制台设置访问权限、角色等。</h3><p><a href="https://github.com/taosin/alioss-js-upload">demo源码</a></p><p>进入控制台，鼠标移到右上角用户名处，点击“访问控制”,如下图：<br><img src="http://images.iamtaoxin.com/oss_11.jpg" alt="enter image description here"><br>如果没有此功能，则将鼠标移至 <strong>产品</strong>  -&gt; <strong>管理与控制</strong>，点击 <strong>访问控制</strong>进入访问控制产品页<br><img src="http://images.iamtaoxin.com/oss_123.png" alt="enter image description here"></p><h4 id="1-创建子账号"><a href="#1-创建子账号" class="headerlink" title="1.创建子账号"></a>1.创建子账号</h4><ul><li>点击左侧的 <strong>用户管理</strong> -&gt; <strong>自定义授权策略</strong> -&gt;<strong>新建授权策略</strong> ， 如下图：<br><img src="http://images.iamtaoxin.com/oss_14.jpg" alt="enter image description here"></li></ul><h4 id="2-新建授权策略"><a href="#2-新建授权策略" class="headerlink" title="2.新建授权策略"></a>2.新建授权策略</h4><ul><li>点击左侧的 <strong>策略管理</strong> -&gt; <strong>新建用户</strong> ， 如下图：</li></ul><p><img src="http://images.iamtaoxin.com/oss_15.jpg" alt="enter image description here"></p><ul><li>在弹出对话框中：选择授权策略模板（使用空模板）</li><li>编辑授权策略并提交：修改 授权策略名称（自定义名称），备注，策略内容，并提交。</li><li><em>示例*</em>：一个MNS授权策略内容模版:<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>   <span class="token string">"Statement"</span><span class="token operator">:</span> <span class="token punctuation">[</span>   　　    <span class="token punctuation">&#123;</span>           <span class="token string">"Action"</span><span class="token operator">:</span> <span class="token string">"mns:*"</span><span class="token punctuation">,</span>           <span class="token string">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span>           <span class="token string">"Resource"</span><span class="token operator">:</span> <span class="token string">"acs:mns:*:*:*"</span>        <span class="token punctuation">&#125;</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token string">"Version"</span><span class="token operator">:</span> <span class="token string">"1"</span>　 　<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><em>授权策略*</em>是json格式的字符串，其中，</li><li><em>Action*</em> ： 表示要授权的操作，MNS 操作都以”mns:”开头，<br>例如: “mns:SendMessage” 表示 MNS 服务的API：SendMessage/BatchSenMessage<br>其他详见附录：MNS API和授权操作映射表；</li><li><em>Effect*</em> ： 表示授权类型，　例如:Allow, Deny</li><li><em>Resrouce** : 表示要授权的阿里云资源名（ARN），格式为：”acs:&lt;云服务名&gt;: &lt;地域名&gt;: &lt;主账号UID&gt;:&lt;资源URI&gt;”<br>例如：“acs:mns:cn-hangzhou:123456789:/queues/MyQueue1/messages”<br>表示：授权资源是主账号UID为123456789在cn-hangzhou地域的MyQueue1。<br>用”</em>“表示不指定具体的字段，例如：”acs:mns:<em>:</em>:*” 表示不指定地域名,主账号ID和资源URI，子账号可以访问主账号的所有mns资源。</li></ul><h4 id="3-授权子账号访问MNS"><a href="#3-授权子账号访问MNS" class="headerlink" title="3.授权子账号访问MNS"></a>3.授权子账号访问MNS</h4><ul><li>返回 <strong>用户管理</strong> ,找到第一步创建的子账号，点击右侧 <strong>授权</strong></li><li>在弹出的对话框中，选择<strong>授权策略名称</strong>，并添加到右侧已选<strong>授权策略</strong>列表，点击 <strong>确定</strong> 提交，如下图：</li><li><img src="http://images.iamtaoxin.com/add_policy_to_user.jpg" alt="enter image description here"></li></ul><h4 id="4-创建角色"><a href="#4-创建角色" class="headerlink" title="4.创建角色"></a>4.创建角色</h4><ul><li>点击左侧的 <strong>角色管理</strong> -&gt; <strong>新建角色</strong>如下图：</li></ul><p><img src="http://images.iamtaoxin.com/oss_13.jpg" alt="enter image description here"><br><img src="http://images.iamtaoxin.com/oss_16.jpg" alt="enter image description here"></p><h4 id="4-授权策略访问角色"><a href="#4-授权策略访问角色" class="headerlink" title="4.授权策略访问角色"></a>4.授权策略访问角色</h4><ul><li>点击左侧的 <strong>角色管理</strong> ,在右侧的角色列表中选择需要授权的角色，点击<strong>授权</strong>，如下图：</li></ul><p><img src="http://images.iamtaoxin.com/oss_17.jpg" alt="enter image description here"></p><h4 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5.注意事项"></a>5.注意事项</h4><p>1.server端的代码中 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> sts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">STS</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    accessKeyId<span class="token operator">:</span> <span class="token string">'子账号 accessKeyId'</span><span class="token punctuation">,</span>    accessKeySecret<span class="token operator">:</span> <span class="token string">'子账号 accessKeySecret'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>accessKeyId 和 accessKeySecret 为第一步创建的子用户的 key2. rolearn&lt;!--hexoPostRenderEscape:&lt;pre class=&quot;line-numbers language-javascript&quot; data-language=&quot;javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rolearn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;对应角色的Arn值&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;:hexoPostRenderEscape--&gt;3.policy&lt;!--hexoPostRenderEscape:&lt;pre class=&quot;line-numbers language-javascript&quot; data-language=&quot;javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; policy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;oss:GetObject&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;oss:PutObject&quot;&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;acs:oss:*:*:BucketName&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;acs:oss:*:*:BucketName/*&quot;&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;</code></pre><p><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>:hexoPostRenderEscape–&gt;</p><pre><code>这里的policy 必须和之前创建的策略一致。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue使用阿里oss上传图片功能(一)</title>
      <link href="/2017/05/24/vue-ye-mian-shi-yong-a-li-oss-shang-chuan-gong-neng-yi/"/>
      <url>/2017/05/24/vue-ye-mian-shi-yong-a-li-oss-shang-chuan-gong-neng-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/taosin/alioss-js-upload">demo源码</a></p><blockquote><h2 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h2></blockquote><p>1.前端页面中需要引入oss-sdk:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://gosspublic.alicdn.com/aliyun-oss-sdk-4.4.4.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.自己封装的upload组件：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oss_file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">:multiple</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doUpload<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>        props<span class="token operator">:</span><span class="token punctuation">&#123;</span>            multiple<span class="token operator">:</span><span class="token punctuation">&#123;</span>                type<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>                twoWay<span class="token operator">:</span><span class="token boolean">false</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            id<span class="token operator">:</span><span class="token punctuation">&#123;</span>                type<span class="token operator">:</span> String<span class="token punctuation">,</span>                twoWay<span class="token operator">:</span><span class="token boolean">false</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            url<span class="token operator">:</span><span class="token punctuation">&#123;</span>                type<span class="token operator">:</span> Array<span class="token punctuation">,</span>                twoWay<span class="token operator">:</span><span class="token boolean">true</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">&#123;</span>                region<span class="token operator">:</span><span class="token string">'Your oss Region'</span><span class="token punctuation">,</span>                bucket<span class="token operator">:</span><span class="token string">'Bucket Name'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">doUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>                Vue<span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/alioss/getOssToken'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSS<span class="token punctuation">.</span>Wrapper</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                        region<span class="token operator">:</span>_this<span class="token punctuation">.</span>region<span class="token punctuation">,</span>                        accessKeyId<span class="token operator">:</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>token<span class="token punctuation">.</span>AccessKeyId<span class="token punctuation">,</span>                        accessKeySecret<span class="token operator">:</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>token<span class="token punctuation">.</span>AccessKeySecret<span class="token punctuation">,</span>                        stsToken<span class="token operator">:</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>token<span class="token punctuation">.</span>SecurityToken<span class="token punctuation">,</span>                        bucket<span class="token operator">:</span>_this<span class="token punctuation">.</span>bucket                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    <span class="token keyword">const</span> files <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>_this<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span>files<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">const</span> fileLen <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>_this<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>files                        <span class="token keyword">const</span> resultUpload <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fileLen<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">const</span> file <span class="token operator">=</span> fileLen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                            <span class="token keyword">const</span> storeAs <span class="token operator">=</span> file<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                            client<span class="token punctuation">.</span><span class="token function">multipartUpload</span><span class="token punctuation">(</span>storeAs<span class="token punctuation">,</span> file<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>results<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                    resultUpload<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>results<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        _this<span class="token punctuation">.</span>url <span class="token operator">=</span> resultUpload<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style type="text/css">    .oss_file</span> <span class="token punctuation">&#123;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.oss_file  input</span> <span class="token punctuation">&#123;</span>        <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">alpha</span><span class="token punctuation">(</span>opacity=0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.使用组件：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ali-upload</span> <span class="token attr-name">:url.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadUrl<span class="token punctuation">"</span></span> <span class="token attr-name">:multiple</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadId<span class="token punctuation">"</span></span> <span class="token attr-name">:code.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadCode<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ali-upload</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url in uploadUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            ![](url)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">import</span> aliUpload <span class="token keyword">from</span> <span class="token string">'./../components/aliossupload.vue'</span><span class="token punctuation">;</span>    <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>        components<span class="token operator">:</span><span class="token punctuation">&#123;</span>            aliUpload        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">&#123;</span>                uploadUrl<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                uploadId<span class="token operator">:</span><span class="token string">'file'</span><span class="token punctuation">,</span>                uploadCode<span class="token operator">:</span><span class="token number">0</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        watch<span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">uploadCode</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h2 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h2></blockquote><p>1.首先安装依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> ali-oss<span class="token function">npm</span> <span class="token function">install</span> co<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.service文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">var</span> <span class="token constant">OSS</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ali-oss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token constant">STS</span> <span class="token operator">=</span> <span class="token constant">OSS</span><span class="token punctuation">.</span><span class="token constant">STS</span><span class="token punctuation">;</span><span class="token keyword">var</span> co <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'co'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">STS</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    accessKeyId<span class="token operator">:</span> <span class="token string">'accessKeyId'</span><span class="token punctuation">,</span>    accessKeySecret<span class="token operator">:</span> <span class="token string">'accessKeySecret'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> rolearn <span class="token operator">=</span> <span class="token string">'acs:ram::ID:role/ram'</span><span class="token punctuation">;</span><span class="token keyword">var</span> policy <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"Version"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token string">"Statement"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token string">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span>        <span class="token string">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"oss:GetObject"</span><span class="token punctuation">,</span>        <span class="token string">"oss:PutObject"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"Resource"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"acs:oss:*:*:Bucket"</span><span class="token punctuation">,</span>        <span class="token string">"acs:oss:*:*:BucketName/*"</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">OssUploadService</span> <span class="token punctuation">&#123;</span>    <span class="token function">getOssToken</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">co</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> token <span class="token operator">=</span> <span class="token keyword">yield</span> sts<span class="token punctuation">.</span><span class="token function">assumeRole</span><span class="token punctuation">(</span>rolearn<span class="token punctuation">,</span> policy<span class="token punctuation">,</span> <span class="token number">15</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">'ossupload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                token<span class="token operator">:</span>token<span class="token punctuation">.</span>credentials            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OssUploadService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.controller文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">var</span> ossUploadService <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../service/ossUploadService'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/alioss/getOssToken'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> ossUploadService<span class="token punctuation">.</span><span class="token function">getOssToken</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        code<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> result      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>到这里就大功告成了吗？错！这只是完成了最基本的部分，接下来我们要在阿里云控制台中设置权限、角色、策略等。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 安装 Node.js、npm、htop、pm2</title>
      <link href="/2017/05/21/centos-an-zhuang-node-js-npm-htop-pm2/"/>
      <url>/2017/05/21/centos-an-zhuang-node-js-npm-htop-pm2/</url>
      
        <content type="html"><![CDATA[<p><strong>1. 下载node.js</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">wget</span> http://nodejs.org/dist/v0.12.0/node-v0.12.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2. 解压node.js</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> xvf node-v0.12.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3. 编译及安装</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4. 查看node版本</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><strong>1. 安装npm</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.查看npm版本</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><strong>1. 安装 htop</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">htop</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2. 安装pm2</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g pm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue+leancloud轻松打造个人博客</title>
      <link href="/2017/05/20/vue-leancloud-qing-song-da-zao-ge-ren-bo-ke/"/>
      <url>/2017/05/20/vue-leancloud-qing-song-da-zao-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>基于 Vue.js 的纯前端博客</p><ul><li>通过 Vue 构建博客前端框架</li><li>前端代码自动化部署到阿里云 cdn</li><li>使用阿里云和 leancloud 构建一个强大的个人博客</li></ul><hr><p>项目采用前端使用 vue 1.0 做为开发框架，leancloud 为本站提供数据储存服务。所有静态文件存放在阿里 OSS 上，无需另外购买服务器，这对于个人来说省了不少费用。</p><p>博客说明：该项目是个人博客 <a href="http://blog.iamtaoxin.com">iamtaoxin</a> 的前端源码，它属于博客系统的一部分，博客系统一共分 3 部分:</p><ol><li>基于 Vue 1.0 构建的 Vuex 架构的博客前端页面</li><li>使用 <a href="http://leancloud.cn"><code>Leancloud</code></a> 作为数据存储</li><li>收藏阅读笔记的 Safari 插件</li></ol><p>源码地址： <a href="https://github.com/taosin/ixinyi_admin">Github</a></p><h2 id="具体步骤如下："><a href="#具体步骤如下：" class="headerlink" title="具体步骤如下："></a>具体步骤如下：</h2><p><strong>一、获取代码，安装依赖</strong><br>拉取博客代码至本地目录文件夹，进入文件加中 public 中安装依赖程序。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>二、安装 leancloud SDK</strong><br>2.1 在<code>index.html</code>中添加以下代码：</p><!-- 存储服务 --><script src="//cdn1.lncld.net/static/js/2.1.4/av-min.js"></script><p><strong><em>具体安装指南见 ：</em></strong><br>JavaScript SDK 安装指南</p><p>2.2leancloud 初始化<br>在<code>ext/vue_ext.js</code>文件中已封装好<code>leancloud</code>初始化的方法，如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">AVInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> appId <span class="token operator">=</span> <span class="token string">"Your appID"</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> appKey <span class="token operator">=</span> <span class="token string">"Your appkey"</span><span class="token punctuation">;</span>  <span class="token constant">AV</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> appId<span class="token operator">:</span> appId<span class="token punctuation">,</span> appKey<span class="token operator">:</span> appKey <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需在 App.vue 中调用即可:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$AVInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>三、启动项目</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>四、部署项目</strong></p><p>部署项目中使用到了<code>aliyunoss-webpack-plugin</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> aliyunoss-webpack-plugin --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>webpack.prod.conf.js</code> 中配置自己的路径和相应的 key</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">AliyunossWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  buildPath<span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/build"</span><span class="token punctuation">,</span>  region<span class="token operator">:</span> <span class="token string">"your region"</span><span class="token punctuation">,</span>  accessKeyId<span class="token operator">:</span> <span class="token string">"your accessKeyId"</span><span class="token punctuation">,</span>  accessKeySecret<span class="token operator">:</span> <span class="token string">"your accessKeySecret"</span><span class="token punctuation">,</span>  bucket<span class="token operator">:</span> <span class="token string">"your bucket"</span><span class="token punctuation">,</span>  deleteAll<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token function-variable function">getObjectHeaders</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token string">"Cache-Control"</span><span class="token operator">:</span> <span class="token string">"max-age=2592000"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>五、部署项目</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此，项目部署已完成，配置相应的域名即可访问。</p><hr><p>书写完毕，如有欠缺，请多指教。</p>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leadcloud数据存储开发指南(四)－Js篇</title>
      <link href="/2016/08/01/leancloud-shu-ju-cun-chu-kai-fa-zhi-nan-4/"/>
      <url>/2016/08/01/leancloud-shu-ju-cun-chu-kai-fa-zhi-nan-4/</url>
      
        <content type="html"><![CDATA[<h2 id="leadcloud数据存储开发指南-四-－Js篇"><a href="#leadcloud数据存储开发指南-四-－Js篇" class="headerlink" title="leadcloud数据存储开发指南(四)－Js篇"></a>leadcloud数据存储开发指南(四)－Js篇</h2><p>保存对象<br>AV.Object 对象在保存时可以设置选项来快捷完成关联操作，可用的选项属性有：</p><table><thead><tr><th>选项</th><th align="center">类型</th><th align="right">说明</th></tr></thead><tbody><tr><td>fetchWhenSave</td><td align="center">BOOL</td><td align="right">对象成功保存后，自动返回该对象在云端的最新数据。用途请参考 更新计数器</td></tr><tr><td>query</td><td align="center">AV.Query</td><td align="right">当 query 中的条件满足后对象才能成功保存，否则放弃保存，并返回错误码 305。</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">new AV.Query(&#39;Wiki&#39;).first().then(function (data) &#123;    var wiki &#x3D; data;    var currentVersion &#x3D; wiki.get(&#39;version&#39;);    wiki.set(&#39;version&#39;, currentVersion + 1);    wiki.save(null, &#123;      query: new AV.Query(&#39;Wiki&#39;).equalTo(&#39;version&#39;, currentVersion)    &#125;).then(function (data) &#123;    &#125;, function (error) &#123;      if (error) &#123;        throw error;      &#125;    &#125;);  &#125;, function (error) &#123;    if (error) &#123;      throw error;    &#125;  &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取对象<br>每个被成功保存在云端的对象会有一个唯一的 Id 标识 id，因此获取对象的最基本的方法就是根据 id 来查询：</p><pre class="line-numbers language-none"><code class="language-none">var query &#x3D; new AV.Query(&#39;Todo&#39;);query.get(&#39;57328ca079bc44005c2472d0&#39;).then(function (data) &#123;  &#x2F;&#x2F; 成功获得实例  &#x2F;&#x2F; data 就是 id 为 57328ca079bc44005c2472d0 的 Todo 对象实例&#125;, function (error) &#123;  &#x2F;&#x2F; 失败了&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不想使用查询，还可以通过从本地构建一个 id，然后调用接口从云端把这个 id 的数据拉取到本地，示例代码如下:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 第一个参数是 className，第二个参数是 objectId var todo &#x3D; AV.Object.createWithoutData(&#39;Todo&#39;, &#39;5745557f71cfe40068c6abe0&#39;); var title &#x3D; todo.get(&#39;title&#39;);&#x2F;&#x2F; 读取 title var content &#x3D; todo.get(&#39;content&#39;);&#x2F;&#x2F; 读取 content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>获取 objectId<br>每一次对象存储成功之后，云端都会返回 id，它是一个全局唯一的属性。</p><pre class="line-numbers language-none"><code class="language-none">var todo &#x3D; new Todo(); todo.set(&#39;title&#39;, &#39;工程师周会&#39;); todo.set(&#39;content&#39;, &#39;每周工程师会议，周一下午2点&#39;); todo.save().then(function (todo) &#123;   &#x2F;&#x2F; 成功保存之后，执行其他逻辑   &#x2F;&#x2F; 获取 objectId   var objectId &#x3D; todo.id; &#125;, function (error) &#123;   &#x2F;&#x2F; 失败之后执行其他逻辑   console.log(error); &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leancloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js实现对象的深度拷贝</title>
      <link href="/2016/07/31/js-shi-xian-dui-xiang-de-shen-du-kao-bei/"/>
      <url>/2016/07/31/js-shi-xian-dui-xiang-de-shen-du-kao-bei/</url>
      
        <content type="html"><![CDATA[<p>在前端页面中，有些时候数据的变化并没有驱动页面视图的变化，这个时候就需要深度拷贝，所以封装了一个使用原生JS深度的拷贝，代码如下：</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">function deepCopy(oldObj) &#123;        &#x2F;&#x2F; 定义一个新的空对象        let newObject &#x3D; &#123;&#125;;        &#x2F;&#x2F; 判断原对象是否存在        if(oldObj)&#123;        &#x2F;&#x2F; 判断原对象的类型        if (oldObj.constructor &#x3D;&#x3D;&#x3D; Object) &#123;            newObject &#x3D; new oldObj.constructor();        &#125; else &#123;            newObject &#x3D; new oldObj.constructor(oldObj.valueOf());        &#125;        &#x2F;&#x2F; 遍历克隆原对象的属性        for (const key in oldObj) &#123;            if (newObject[key] !&#x3D;&#x3D; oldObj[key]) &#123;                if (typeof(oldObj[key]) &#x3D;&#x3D;&#x3D; &#39;object&#39;) &#123;                    &#x2F;&#x2F; 对象内部的子对象                    newObject[key] &#x3D; deepCopy(oldObj[key]);                &#125; else &#123;                    newObject[key] &#x3D; oldObj[key];                &#125;            &#125;        &#125;        &#x2F;&#x2F; 克隆原对象的常用方法        newObject.toString &#x3D; oldObj.toString;        newObject.valueOf &#x3D; oldObj.valueOf;        return newObject;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leancloud对象</title>
      <link href="/2016/07/29/leancloud-dui-xiang/"/>
      <url>/2016/07/29/leancloud-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="leadcloud数据存储开发指南-三-－Js篇"><a href="#leadcloud数据存储开发指南-三-－Js篇" class="headerlink" title="leadcloud数据存储开发指南(三)－Js篇"></a>leadcloud数据存储开发指南(三)－Js篇</h2><p>AV.Object 是 LeanStorage 对复杂对象的封装，每个 AV.Object 包含若干属性值对，也称键值对（key-value）。属性的值是与 JSON 格式兼容的数据。通过 REST API 保存对象需要将对象的数据通过 JSON 来编码。这个数据是无模式化的（Schema Free），这意味着你不需要提前标注每个对象上有哪些 key，你只需要随意设置 key-value 对就可以，云端会保存它。</p><p>数据类型：<br>AV.Object 支持以下类型：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 该语句应该只声明一次 var TestObject &#x3D; AV.Object.extend(&#39;DataTypeTest&#39;); var number &#x3D; 2014; var string &#x3D; &#39;famous film name is &#39; + number; var date &#x3D; new Date(); var array &#x3D; [string, number]; var object &#x3D; &#123; number: number, string: string &#125;; var testObject &#x3D; new TestObject(); testObject.set(&#39;testNumber&#39;, number); testObject.set(&#39;testString&#39;, string); testObject.set(&#39;testDate&#39;, date); testObject.set(&#39;testArray&#39;, array); testObject.set(&#39;testObject&#39;, object); testObject.set(&#39;testNull&#39;, null); testObject.save().then(function(testObject) &#123;   &#x2F;&#x2F; 成功 &#125;, function(error) &#123;   &#x2F;&#x2F; 失败 &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：每个 AV.Object 的大小都不应超过 128 KB。如果需要储存更多的数据，建议使用 AV.File。</p><p>构建对象：<br>构建一个AV.Object对象可以使用以下方式：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; AV.Object.extend(&#39;className&#39;) 所需的参数 className 则表示对应的表名 &#x2F;&#x2F; 声明一个类型 var Todo &#x3D; AV.Object.extend(&#39;Todo&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注：每个 id 必须有一个 Class 类名称，这样云端才知道它的数据归属于哪张数据表。</p><p>保存对象：<br>现在我们保存一个 TodoFolder，它可以包含多个 Todo，类似于给行程按文件夹的方式分组。我们并不需要提前去后台创建这个名为 TodoFolder 的 Class 类，而仅需要执行如下代码，云端就会自动创建这个类：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 声明类型var TodoFolder &#x3D; AV.Object.extend(&#39;TodoFolder&#39;);&#x2F;&#x2F; 新建对象var todoFolder &#x3D; new TodoFolder();&#x2F;&#x2F; 设置名称todoFolder.set(&#39;name&#39;,&#39;工作&#39;);&#x2F;&#x2F; 设置优先级todoFolder.set(&#39;priority&#39;,1);todoFolder.save().then(function (todo) &#123;  console.log(&#39;objectId is &#39; + todo.id);&#125;, function (error) &#123;  console.log(error);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建完成后，打开 控制台 &gt; 存储，点开 TodoFolder 类，就可以看到刚才添加的数据。除了 name、priority（优先级）之外，其他字段都是数据表的内置属性。</p><table><thead><tr><th>内置属性</th><th align="center">类型</th><th align="right">描述</th></tr></thead><tbody><tr><td>id</td><td align="center">String</td><td align="right">该对象唯一的Id标识</td></tr><tr><td>ACL</td><td align="center">ACL</td><td align="right">该对象的权限控制，实际上是一个 JSON 对象，控制台做了展现优化。</td></tr><tr><td>createdAt</td><td align="center">Date</td><td align="right">该对象被创建的 UTC 时间，控制台做了针对当地时间的展现优化。</td></tr><tr><td>updatedAt</td><td align="center">Date</td><td align="right">该对象最后一次被修改的时间</td></tr></tbody></table><p>属性名<br>也叫键或 key，必须是由字母、数字或下划线组成的字符串；自定义的属性名，不能以 __（双下划线）开头。<br>属性值<br>可以是字符串、数字、布尔值、数组或字典。</p><pre class="line-numbers language-none"><code class="language-none">以下为系统保留字段，不能作为属性名来使用。acl             error            pendingKeysACL             fetchWhenSave    runningclassName       id               updatedAtcode            isDataReady      uuidcreatedAt       keyValuesdescription     objectId<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用CQL语法保存对象</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 执行 CQL 语句实现新增一个 TodoFolder 对象 AV.Query.doCloudQuery(&#39;insert into TodoFolder(name, priority) values(&quot;工作&quot;, 1)&#39;).then(function (data) &#123;   &#x2F;&#x2F; data 中的 results 是本次查询返回的结果，AV.Object 实例列表   var results &#x3D; data.results; &#125;, function (error) &#123;   &#x2F;&#x2F;查询失败，查看 error   console.log(error); &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a href="https://leancloud.cn/docs/leanstorage_guide-js.html">leadcloud</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leancloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leancloud开发指南2</title>
      <link href="/2016/07/28/leancloud-kai-fa-zhi-nan-2/"/>
      <url>/2016/07/28/leancloud-kai-fa-zhi-nan-2/</url>
      
        <content type="html"><![CDATA[<p>leadcloud数据存储开发指南(二)－Js篇</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h4 id="首先注册并登录leancloud-创建应用："><a href="#首先注册并登录leancloud-创建应用：" class="headerlink" title="首先注册并登录leancloud,创建应用："></a>首先注册并登录<a href="https://leancloud.cn">leancloud</a>,创建应用：</h4><p><img src="http://upload-images.jianshu.io/upload_images/2222175-efa8ae9c117c602b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-07-28 14.49.18.png"></p><p>然后打开 控制台 / 设置 / 应用 Key：<br><img src="http://upload-images.jianshu.io/upload_images/2222175-8d3d1305a58a7350.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="145.pic.jpg"><br>前端项目使用leadcloud javascript sdk，在页面加载的时候调用初始化函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token constant">APP_ID</span> <span class="token operator">=</span> <span class="token string">'apLrGX1xBjvsj3TROPuj41A6z2gasD-ZAFG'</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token constant">APP_KEY</span> <span class="token operator">=</span> <span class="token string">'pE0Y3fCPp01I1DBS4Nh4Gj2'</span><span class="token punctuation">;</span><span class="token constant">AV</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  appId<span class="token operator">:</span> <span class="token constant">APP_ID</span><span class="token punctuation">,</span>  appKey<span class="token operator">:</span> <span class="token constant">APP_KEY</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 启用节点：<br>默认为大陆节点，如需切换到其他节点，可在初始化函数中加入：region: 节点，如下：</p><pre class="line-numbers language-none"><code class="language-none">const APP_ID &#x3D; &#39;apLrGX1xBjvsj3TROPuj41A6z2gasD-ZAFG&#39;;const APP_KEY &#x3D; &#39;pE0Y3fCPp01I1DBS4Nh4Gj2&#39;;AV.init(&#123;  appId,  appKey,  &#x2F;&#x2F; 启用美国节点  region: &#39;us&#39;,&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证本地网络是否可以访问leadcloud服务器，</p><pre class="line-numbers language-none"><code class="language-none">ping api.leancloud.cn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果网络正常则得到如下相应：</p><pre class="line-numbers language-none"><code class="language-none">PING api.leancloud.cn (120.132.49.239): 56 data bytes64 bytes from 120.132.49.239: icmp_seq&#x3D;3 ttl&#x3D;49 time&#x3D;65.165 ms64 bytes from 120.132.49.239: icmp_seq&#x3D;4 ttl&#x3D;49 time&#x3D;53.273 ms64 bytes from 120.132.49.239: icmp_seq&#x3D;5 ttl&#x3D;49 time&#x3D;51.519 ms64 bytes from 120.132.49.239: icmp_seq&#x3D;6 ttl&#x3D;49 time&#x3D;68.442 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在项目中编写测试代码：</p><pre class="line-numbers language-none"><code class="language-none">const TestObject &#x3D; AV.Object.extend(&#39;TestObject&#39;);const testObject &#x3D; new TestObject();await testObject.save(&#123; words: &#39;Hello World!&#39; &#125;);alert(&#39;LeanCloud Rocks!&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可在  控制台 &gt; 存储 &gt; 数据 &gt; TestObject，中查看测试内容，至此，sdk安装完毕</p>]]></content>
      
      
      
        <tags>
            
            <tag> leancloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leadcloud数据存储（一）-Javascript</title>
      <link href="/2016/07/27/leadcloud-shu-ju-cun-chu-1/"/>
      <url>/2016/07/27/leadcloud-shu-ju-cun-chu-1/</url>
      
        <content type="html"><![CDATA[<h2 id="安装sdk"><a href="#安装sdk" class="headerlink" title="安装sdk"></a>安装sdk</h2><h3 id="获取sdk"><a href="#获取sdk" class="headerlink" title="获取sdk"></a>获取sdk</h3><h4 id="包依赖管理工具安装"><a href="#包依赖管理工具安装" class="headerlink" title="包依赖管理工具安装"></a>包依赖管理工具安装</h4><h5 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h5><pre class="line-numbers language-none"><code class="language-none"># 存储服务$ npm install leancloud-storage --save# 实时消息服务$ npm install leancloud-realtime --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>cnpm安装</p><pre class="line-numbers language-none"><code class="language-none">$ npm install -g cnpm --registry&#x3D;http:&#x2F;&#x2F;r.cnpmjs.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后执行</p><pre class="line-numbers language-none"><code class="language-none"># 存储服务$ cnpm install leancloud-storage --save# 实时消息服务$ cnpm install leancloud-realtime --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="bower安装"><a href="#bower安装" class="headerlink" title="bower安装"></a>bower安装</h5><pre class="line-numbers language-none"><code class="language-none">$ bower install leancloud-storage --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="cdn加速"><a href="#cdn加速" class="headerlink" title="cdn加速"></a>cdn加速</h5><pre class="line-numbers language-none"><code class="language-none">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn1.lncld.net&#x2F;static&#x2F;js&#x2F;av-min-1.2.1.js&quot;&gt;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="TypeScript-支持"><a href="#TypeScript-支持" class="headerlink" title="TypeScript 支持"></a>TypeScript 支持</h4><h5 id="通过-typings-工具安装"><a href="#通过-typings-工具安装" class="headerlink" title="通过 typings 工具安装"></a>通过 typings 工具安装</h5><p>首先需要安装 typings 命令行工具</p><pre class="line-numbers language-none"><code class="language-none">npm install typings --global<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后执行如下命令：</p><pre class="line-numbers language-none"><code class="language-none">typings install leadcloud-jssdk --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>######直接引用d.ts文件<br>typescript使用javascript SDK是通过定义文件夹来实现调用的，定义文件夹开源地址：<a href="https://github.com/leancloud/typed-leancloud-jssdk">typed-leancloud-jssdk</a></p><h6 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h6><hr><p>参考地址<a href="https://leancloud.cn/docs/leanstorage_guide-js.html">javascript数据存储开发指南</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leancloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NexT内置标签的使用</title>
      <link href="/2016/07/23/next-nei-zhi-biao-qian-de-shi-yong/"/>
      <url>/2016/07/23/next-nei-zhi-biao-qian-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>NexT内置标签的使用</p><h3 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h3><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><h5 id="HTML方式"><a href="#HTML方式" class="headerlink" title="HTML方式:"></a>HTML方式:</h5><pre class="line-numbers language-none"><code class="language-none">&lt;blockquote class&#x3D;&quot;blockquote-center&quot;&gt;这个城市的灯火辉煌，与你无关&lt;&#x2F;blockquote&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="标签方式："><a href="#标签方式：" class="headerlink" title="标签方式："></a>标签方式：</h5><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;&#123;% centerquote %&#125; 这个城市的灯火辉煌，与你无关 &#123;% endcenterquote %&#125;&lt;!-- 别名 --&gt;&#123;% cq %&#125; 这个城市的灯火辉煌，与你无关 &#123;% endcq %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例：<br><img src="http://7xs43y.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-07-23%2018.06.09.png"/><br>文字解释：此标签将生成一个带上下分割线的引用，同时引用内文本将自动居中。</p><h3 id="图片突破容器宽度限制"><a href="#图片突破容器宽度限制" class="headerlink" title="图片突破容器宽度限制"></a>图片突破容器宽度限制</h3><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><h4 id="HTML方式："><a href="#HTML方式：" class="headerlink" title="HTML方式："></a>HTML方式：</h4><pre class="line-numbers language-none"><code class="language-none">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;&lt;!-- 其中 class&#x3D;&quot;full-image&quot; 是必须的 --&gt;&lt;img src&#x3D;&quot;&#x2F;image-url&quot; class&#x3D;&quot;full-image&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="标签方式：-1"><a href="#标签方式：-1" class="headerlink" title="标签方式："></a>标签方式：</h4><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;&#123;% fullimage &#x2F;image-url, alt, title %&#125;&lt;!-- 别名 --&gt;&#123;% fi &#x2F;image-url, alt, title %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：<br><img src="http://7xs43y.com1.z0.glb.clouddn.com/%E5%A4%96%E6%BB%A9.jpg" class="full-image" /><br>文字解释：当使用此标签引用图片时，图片将自动扩大 26%，并突破文章容器的宽度。 此标签使用于需要突出显示的图片, 图片的扩大与容器的偏差从视觉上提升图片的吸引力。</p>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NexT主题配置</title>
      <link href="/2016/07/18/next-zhu-ti-pei-zhi/"/>
      <url>/2016/07/18/next-zhu-ti-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>NexT主题配置</p><hr><p>###添加「标签」页面</p><h4 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h4><pre class="line-numbers language-none"><code class="language-none">$ cd your-hexo-site$ hexo new page tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="设置页面类型"><a href="#设置页面类型" class="headerlink" title="设置页面类型"></a>设置页面类型</h4><p>编辑之前心间的标签页面，内容如下：</p><pre class="line-numbers language-none"><code class="language-none">title: 标签date: 2014-12-22 12:39:04type: &quot;tags&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改菜单"><a href="#修改菜单" class="headerlink" title="修改菜单"></a>修改菜单</h4><p>编辑 主题配置文件 themes/_config.yml，内容如下：</p><pre class="line-numbers language-none"><code class="language-none">menu:  home: &#x2F;  archives: &#x2F;archives  tags: &#x2F;tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>###添加「分类」页面</p><h4 id="设置步骤同-设置标签步骤"><a href="#设置步骤同-设置标签步骤" class="headerlink" title="设置步骤同 设置标签步骤"></a>设置步骤同 设置标签步骤</h4><h3 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h3><p>编辑 主题配置文件 themes/_config.yml，内容如下：</p><pre class="line-numbers language-none"><code class="language-none">highlight_theme: normal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="侧栏社交链接"><a href="#侧栏社交链接" class="headerlink" title="侧栏社交链接"></a>侧栏社交链接</h3><p>编辑 主题配置文件 themes/_config.yml</p><h4 id="设置链接"><a href="#设置链接" class="headerlink" title="设置链接"></a>设置链接</h4><pre class="line-numbers language-none"><code class="language-none"># Social linkssocial: GitHub: https:&#x2F;&#x2F;github.com&#x2F;taosin  微博: http:&#x2F;&#x2F;www.weibo.com&#x2F;p&#x2F;1005055164097015&#x2F;home?from&#x3D;page_100505&amp;mod&#x3D;TAB&amp;is_all&#x3D;1#place  # 等等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置图标"><a href="#设置图标" class="headerlink" title="设置图标"></a>设置图标</h4><pre class="line-numbers language-none"><code class="language-none"># Social Iconssocial_icons:  enable: true  # Icon Mappings  GitHub: github  Twitter: twitter  微博: weibo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置打赏功能"><a href="#设置打赏功能" class="headerlink" title="设置打赏功能"></a>设置打赏功能</h3><p>编辑 主题配置文件 themes/_config.yml</p><pre class="line-numbers language-none"><code class="language-none">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！wechatpay: http:&#x2F;&#x2F;7xs43y.com1.z0.glb.clouddn.com&#x2F;u&#x3D;1421062774,389829371&amp;fm&#x3D;21&amp;gp&#x3D;0.jpgalipay: http:&#x2F;&#x2F;7xs43y.com1.z0.glb.clouddn.com&#x2F;u&#x3D;1421062774,389829371&amp;fm&#x3D;21&amp;gp&#x3D;0.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="设置友情链接"><a href="#设置友情链接" class="headerlink" title="设置友情链接"></a>设置友情链接</h3><p>编辑 主题配置文件 themes/_config.yml</p><pre class="line-numbers language-none"><code class="language-none"># titlelinks_title: Linkslinks:  MacTalk: http:&#x2F;&#x2F;macshuo.com&#x2F;  Title: http:&#x2F;&#x2F;example.com&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="腾讯公益404页面"><a href="#腾讯公益404页面" class="headerlink" title="腾讯公益404页面"></a>腾讯公益404页面</h3><p>在themes/source目录下新建404页面，内容如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;  &lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html;charset&#x3D;utf-8;&quot;&#x2F;&gt;  &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge,chrome&#x3D;1&quot; &#x2F;&gt;  &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;all&quot; &#x2F;&gt;  &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;index,follow&quot;&#x2F;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;http:&#x2F;&#x2F;www.qq.com&#x2F;404&#x2F;search_children.js&quot;        charset&#x3D;&quot;utf-8&quot; homePageUrl&#x3D;&quot;your site url &quot;        homePageName&#x3D;&quot;回到我的主页&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h3><p>编辑 主题配置文件 themes/_config.yml</p><pre class="line-numbers language-none"><code class="language-none">since: 2013<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>注：本文参考NexT官方文档，如需了解详细，请访问<a href="http://theme-next.iissnan.com">NexT官网</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用NexT主题</title>
      <link href="/2016/07/17/hexo-shi-yong-next-zhu-ti/"/>
      <url>/2016/07/17/hexo-shi-yong-next-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo与NexT主题"><a href="#hexo与NexT主题" class="headerlink" title="hexo与NexT主题"></a>hexo与NexT主题</h2><h2 id="关于NexT"><a href="#关于NexT" class="headerlink" title="关于NexT"></a>关于NexT</h2><p>NexT 主旨在于简洁优雅且易于使用，所以首先要尽量确保 NexT 的简洁易用性，github地址：<a href="https://github.com/iissnan/hexo-theme-next。">https://github.com/iissnan/hexo-theme-next。</a></p><h3 id="使用NExT"><a href="#使用NExT" class="headerlink" title="使用NExT"></a>使用NExT</h3><h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><p>进入到目标目录，使用git checkout代码：</p><pre class="line-numbers language-none"><code class="language-none">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h4><p>打开配置文件_config.yml<br>修改theme字段</p><pre class="line-numbers language-none"><code class="language-none">theme:next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h4><pre class="line-numbers language-none"><code class="language-none">hexo s --debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问浏览器， <a href="http://localhost:4000">http://localhost:4000</a></p><h4 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h4><p>Next共有三种外观： Muse, Mist , Piscec,<br>在tmemes\next_config.yml中进行更改</p><pre class="line-numbers language-none"><code class="language-none">#scheme: Muse#scheme: Mistscheme: Pisces<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h4><p>编辑站点配置文件，设置所需语言，<br>|语言 |    代码 |    设定示例<br>|English |    en |    language: en<br>简体中文     |zh-Hans     |language: zh-Hans<br>繁體中文     |zh-hk 或者 zh-tw |     language: zh-hk</p><h4 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h4><pre class="line-numbers language-none"><code class="language-none">menu:  home: &#x2F;  archives: &#x2F;archives  #about: &#x2F;about  #categories: &#x2F;categories  tags: &#x2F;tags  #commonweal: &#x2F;404.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h4><p>编辑 站点配置文件， 新增字段 avatar， 值设置成头像的链接地址<br>eg: avatar: <a href="http://example.com/avtar.png">http://example.com/avtar.png</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用初体验</title>
      <link href="/2016/07/17/hexo-shi-yong-chu-ti-yan/"/>
      <url>/2016/07/17/hexo-shi-yong-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo初体验"><a href="#hexo初体验" class="headerlink" title="hexo初体验"></a>hexo初体验</h1><h2 id="hexo终于还是搭好了，分享一些踩坑经验"><a href="#hexo终于还是搭好了，分享一些踩坑经验" class="headerlink" title="hexo终于还是搭好了，分享一些踩坑经验"></a>hexo终于还是搭好了，分享一些踩坑经验</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><h4 id="首先在本地创建目标目录，"><a href="#首先在本地创建目标目录，" class="headerlink" title="首先在本地创建目标目录，"></a>首先在本地创建目标目录，</h4><h4 id="使用下面命令安装hexo"><a href="#使用下面命令安装hexo" class="headerlink" title="使用下面命令安装hexo"></a>使用下面命令安装hexo</h4><pre class="line-numbers language-none"><code class="language-none">mkdir hexo &amp; cd hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">sudo npm install -g hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="hexo初始化"><a href="#hexo初始化" class="headerlink" title="hexo初始化"></a>hexo初始化</h3><pre class="line-numbers language-none"><code class="language-none">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成静态页面</p><pre class="line-numbers language-none"><code class="language-none">hexo generate（hexo g 等同于 hexo generate）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动hexo"><a href="#启动hexo" class="headerlink" title="启动hexo"></a>启动hexo</h3><pre class="line-numbers language-none"><code class="language-none">hexo server (hexo s 等同于 hexo server)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览器地址栏输入<a href="http://localhost:4000">http://localhost:4000</a> ,即可浏览页面，此时hexo已经安装成功。</p><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><h4 id="Github帐号"><a href="#Github帐号" class="headerlink" title="Github帐号"></a>Github帐号</h4>]]></content>
      
      
      <categories>
          
          <category> 技术整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
